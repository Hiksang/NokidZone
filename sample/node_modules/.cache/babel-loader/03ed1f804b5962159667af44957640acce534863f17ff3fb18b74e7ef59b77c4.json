{"ast":null,"code":"import { datas } from '../Data/MapData';\n\n/*global kakao*/\n//------------------------------------------------ Latlng 는 저장소 들어가면 깨지니 깐 좌표 로 하셈--------------------------------------------------\n//var datas = datas\n\nexport const makeMarker = map => {\n  for (var i = 0; i < datas.length; i++) {\n    console.log(datas[i]);\n    const imageSize = new kakao.maps.Size(64, 69); // 마커이미지의 크기입니다\n    const imageOption = {\n      offset: new kakao.maps.Point(27, 69)\n    }; // 마커이미지의 옵션입니다. 마커의 좌표와 일치시킬 이미지 안에서의 좌표를 설정합니다.\n    const markerImage = new kakao.maps.MarkerImage(datas[i].imageSrc, imageSize, imageOption); //마커 이미지 생성\n    // 마커를 생성합니다\n\n    console.log(datas[i].WGS84X, datas[i].WGS84Y);\n    const lng = new kakao.maps.LatLng(datas[i].WGS84X, datas[i].WGS84Y);\n    console.log(lng);\n    var marker = new kakao.maps.Marker({\n      map: map,\n      // 마커를 표시할 지도\n      position: lng,\n      // 마커를 표시할 위치\n      title: datas[i].title,\n      // 마커의 타이틀, 마커에 마우스를 올리면 타이틀이 표시됩니다\n      image: markerImage,\n      // 마커 이미지 \n      clickable: true // 마커 클릭시 지도 클릭 이벤트 방지\n    });\n\n    console.log(marker.n, i);\n    marker.id = datas[i].id; //MapInfoListView에서 클릭시 해당 마커 infoWindow Open Event 호출용\n\n    marker.setClickable(true);\n    const iwContent = `${InfoWindowContent(datas[i])}`; // 인포윈도우에 표출될 내용으로 HTML 문자열이나 document element가 가능합니다\n    // 인포윈도우를 생성합니다\n    var overlay = new kakao.maps.CustomOverlay({\n      content: iwContent,\n      map: map,\n      position: marker.getPosition()\n    });\n    overlay.id = datas[i].id;\n    overlay.setMap(null);\n\n    // 마커에 클릭이벤트를 등록합니다\n    kakao.maps.event.addListener(marker, 'click', makeOverListener(map, marker, overlay, datas[i].selected));\n    function makeOverListener(map, marker, overlay, isSelected) {\n      return function () {\n        if (!isSelected) {\n          console.log(\"clied\");\n          isSelected = true;\n          overlay.setMap(map);\n          var pos = marker.getPosition();\n          console.log(pos);\n          map.panTo(pos);\n        } else {\n          isSelected = false;\n          overlay.setMap(null);\n        }\n      };\n    }\n\n    //  console.log(marker)\n  }\n};\n\nexport const setMakerOption = map => {\n  var options = {\n    // Drawing Manager를 생성할 때 사용할 옵션입니다\n    map: map,\n    // Drawing Manager로 그리기 요소를 그릴 map 객체입니다\n    drawingMode: [\n    // drawing manager로 제공할 그리기 요소 모드입니다\n    kakao.maps.drawing.OverlayType.MARKER],\n    // 사용자에게 제공할 그리기 가이드 툴팁입니다\n    // 사용자에게 도형을 그릴때, 드래그할때, 수정할때 가이드 툴팁을 표시하도록 설정합니다\n    markerOptions: {\n      // 마커 옵션입니다 \n      draggable: true,\n      // 마커를 그리고 나서 드래그 가능하게 합니다 \n      removable: true // 마커를 삭제 할 수 있도록 x 버튼이 표시됩니다  \n    }\n  };\n\n  var manager = new kakao.maps.drawing.DrawingManager(options);\n  return manager;\n};\n\n//버튼 클릭 시 호출되는 핸들러 입니다\nexport function selectOverlay(type, manager) {\n  // 그리기 중이면 그리기를 취소합니다\n  manager.cancel();\n\n  // 클릭한 그리기 요소 타입을 선택합니다\n  manager.select(kakao.maps.drawing.OverlayType[type]);\n}\nexport function getDataFromDrawingMap(manager) {\n  // Drawing Manager에서 그려진 데이터 정보를 가져옵니다 \n  var data = manager.getData();\n  console.log(data);\n  if (data.marker.length === 0) {\n    console.log(\"return\");\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n  // 아래 지도에 그려진 도형이 있다면 모두 지웁니다\n  //console.log(data.marker[0].x);\n  const wgs84 = {\n    x: data.marker[0].x,\n    y: data.marker[0].y\n  };\n  return wgs84;\n  // 지도에 가져온 데이터로 도형들을 그립니다\n  //drawMarker(data[kakao.maps.drawing.OverlayType.MARKER]);\n}","map":{"version":3,"names":["datas","makeMarker","map","i","length","console","log","imageSize","kakao","maps","Size","imageOption","offset","Point","markerImage","MarkerImage","imageSrc","WGS84X","WGS84Y","lng","LatLng","marker","Marker","position","title","image","clickable","n","id","setClickable","iwContent","InfoWindowContent","overlay","CustomOverlay","content","getPosition","setMap","event","addListener","makeOverListener","selected","isSelected","pos","panTo","setMakerOption","options","drawingMode","drawing","OverlayType","MARKER","markerOptions","draggable","removable","manager","DrawingManager","selectOverlay","type","cancel","select","getDataFromDrawingMap","data","getData","x","y","wgs84"],"sources":["/Users/sonyl/Documents/GitHub/nokidszone/src/kakaoMap/kakaoFunctions.js"],"sourcesContent":["import {datas} from '../Data/MapData'\n\n\n/*global kakao*/\n    //------------------------------------------------ Latlng 는 저장소 들어가면 깨지니 깐 좌표 로 하셈--------------------------------------------------\n//var datas = datas\n\nexport const makeMarker = (map) =>{\n    for (var i = 0; i < datas.length; i ++) {\n        console.log(datas[i])\n        const imageSize = new kakao.maps.Size(64, 69); // 마커이미지의 크기입니다\n        const imageOption = {offset: new kakao.maps.Point(27, 69)}; // 마커이미지의 옵션입니다. 마커의 좌표와 일치시킬 이미지 안에서의 좌표를 설정합니다.\n        const markerImage = new kakao.maps.MarkerImage(datas[i].imageSrc, imageSize, imageOption);//마커 이미지 생성\n        // 마커를 생성합니다\n      \n      \n        console.log(datas[i].WGS84X,datas[i].WGS84Y)\n        const lng = new kakao.maps.LatLng( datas[i].WGS84X, datas[i].WGS84Y);\n        console.log(lng)\n        var marker = new kakao.maps.Marker({\n\n            map: map, // 마커를 표시할 지도\n            position:lng , // 마커를 표시할 위치\n            title : datas[i].title, // 마커의 타이틀, 마커에 마우스를 올리면 타이틀이 표시됩니다\n            image : markerImage, // 마커 이미지 \n            clickable: true ,// 마커 클릭시 지도 클릭 이벤트 방지\n           \n        });\n      \n        console.log(marker.n,i)\n        marker.id = datas[i].id;  //MapInfoListView에서 클릭시 해당 마커 infoWindow Open Event 호출용\n        \n        marker.setClickable(true);\n\n        const iwContent = `${InfoWindowContent(datas[i])}`; // 인포윈도우에 표출될 내용으로 HTML 문자열이나 document element가 가능합니다\n        // 인포윈도우를 생성합니다\n        var overlay = new kakao.maps.CustomOverlay({\n        content: iwContent,\n        map: map,\n        position: marker.getPosition()       \n        });\n        overlay.id =datas[i].id;\n        overlay.setMap(null);\n      \n        \n// 마커에 클릭이벤트를 등록합니다\n        kakao.maps.event.addListener(marker, 'click', makeOverListener(map, marker, overlay, datas[i].selected));\n        \n        function makeOverListener(map, marker, overlay,isSelected) {\n            \n         return function(){\n            if(!(isSelected)){\n                console.log(\"clied\")\n                isSelected = true;\n                overlay.setMap(map);\n                  \n\t\t\t    var pos = marker.getPosition();\n\t\t\t    console.log(pos);\n\t\t\t    map.panTo(pos);\n                \n            }\n            else{\n              \n                isSelected = false;\n                overlay.setMap(null);\n                \n            }\n         }   \n      }\n\n    //  console.log(marker)\n   }\n}\n\nexport const setMakerOption = (map) =>{\n    var options = { // Drawing Manager를 생성할 때 사용할 옵션입니다\n        map: map, // Drawing Manager로 그리기 요소를 그릴 map 객체입니다\n        drawingMode: [ // drawing manager로 제공할 그리기 요소 모드입니다\n            kakao.maps.drawing.OverlayType.MARKER\n        ],\n        // 사용자에게 제공할 그리기 가이드 툴팁입니다\n        // 사용자에게 도형을 그릴때, 드래그할때, 수정할때 가이드 툴팁을 표시하도록 설정합니다\n        markerOptions: { // 마커 옵션입니다 \n            draggable: true, // 마커를 그리고 나서 드래그 가능하게 합니다 \n            removable: true // 마커를 삭제 할 수 있도록 x 버튼이 표시됩니다  \n        },\n    };\n    \n    var manager = new kakao.maps.drawing.DrawingManager(options);\n\n    return manager;\n\n}\n\n//버튼 클릭 시 호출되는 핸들러 입니다\nexport function selectOverlay(type,manager) {\n    // 그리기 중이면 그리기를 취소합니다\n    manager.cancel();\n\n    // 클릭한 그리기 요소 타입을 선택합니다\n    manager.select(kakao.maps.drawing.OverlayType[type]);\n}\n\nexport function getDataFromDrawingMap(manager) {\n    // Drawing Manager에서 그려진 데이터 정보를 가져옵니다 \n    var data = manager.getData();\n    console.log(data);\n    if(data.marker.length === 0){\n        console.log(\"return\")\n        return {x:0,y:0};\n    }\n    // 아래 지도에 그려진 도형이 있다면 모두 지웁니다\n    //console.log(data.marker[0].x);\n    const wgs84 = {\n        x:data.marker[0].x,\n        y:data.marker[0].y\n    }\n   return wgs84;\n    // 지도에 가져온 데이터로 도형들을 그립니다\n    //drawMarker(data[kakao.maps.drawing.OverlayType.MARKER]);\n    \n}\n"],"mappings":"AAAA,SAAQA,KAAK,QAAO,iBAAiB;;AAGrC;AACI;AACJ;;AAEA,OAAO,MAAMC,UAAU,GAAIC,GAAG,IAAI;EAC9B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,KAAK,CAACI,MAAM,EAAED,CAAC,EAAG,EAAE;IACpCE,OAAO,CAACC,GAAG,CAACN,KAAK,CAACG,CAAC,CAAC,CAAC;IACrB,MAAMI,SAAS,GAAG,IAAIC,KAAK,CAACC,IAAI,CAACC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;IAC/C,MAAMC,WAAW,GAAG;MAACC,MAAM,EAAE,IAAIJ,KAAK,CAACC,IAAI,CAACI,KAAK,CAAC,EAAE,EAAE,EAAE;IAAC,CAAC,CAAC,CAAC;IAC5D,MAAMC,WAAW,GAAG,IAAIN,KAAK,CAACC,IAAI,CAACM,WAAW,CAACf,KAAK,CAACG,CAAC,CAAC,CAACa,QAAQ,EAAET,SAAS,EAAEI,WAAW,CAAC,CAAC;IAC1F;;IAGAN,OAAO,CAACC,GAAG,CAACN,KAAK,CAACG,CAAC,CAAC,CAACc,MAAM,EAACjB,KAAK,CAACG,CAAC,CAAC,CAACe,MAAM,CAAC;IAC5C,MAAMC,GAAG,GAAG,IAAIX,KAAK,CAACC,IAAI,CAACW,MAAM,CAAEpB,KAAK,CAACG,CAAC,CAAC,CAACc,MAAM,EAAEjB,KAAK,CAACG,CAAC,CAAC,CAACe,MAAM,CAAC;IACpEb,OAAO,CAACC,GAAG,CAACa,GAAG,CAAC;IAChB,IAAIE,MAAM,GAAG,IAAIb,KAAK,CAACC,IAAI,CAACa,MAAM,CAAC;MAE/BpB,GAAG,EAAEA,GAAG;MAAE;MACVqB,QAAQ,EAACJ,GAAG;MAAG;MACfK,KAAK,EAAGxB,KAAK,CAACG,CAAC,CAAC,CAACqB,KAAK;MAAE;MACxBC,KAAK,EAAGX,WAAW;MAAE;MACrBY,SAAS,EAAE,IAAI,CAAE;IAErB,CAAC,CAAC;;IAEFrB,OAAO,CAACC,GAAG,CAACe,MAAM,CAACM,CAAC,EAACxB,CAAC,CAAC;IACvBkB,MAAM,CAACO,EAAE,GAAG5B,KAAK,CAACG,CAAC,CAAC,CAACyB,EAAE,CAAC,CAAE;;IAE1BP,MAAM,CAACQ,YAAY,CAAC,IAAI,CAAC;IAEzB,MAAMC,SAAS,GAAI,GAAEC,iBAAiB,CAAC/B,KAAK,CAACG,CAAC,CAAC,CAAE,EAAC,CAAC,CAAC;IACpD;IACA,IAAI6B,OAAO,GAAG,IAAIxB,KAAK,CAACC,IAAI,CAACwB,aAAa,CAAC;MAC3CC,OAAO,EAAEJ,SAAS;MAClB5B,GAAG,EAAEA,GAAG;MACRqB,QAAQ,EAAEF,MAAM,CAACc,WAAW;IAC5B,CAAC,CAAC;IACFH,OAAO,CAACJ,EAAE,GAAE5B,KAAK,CAACG,CAAC,CAAC,CAACyB,EAAE;IACvBI,OAAO,CAACI,MAAM,CAAC,IAAI,CAAC;;IAG5B;IACQ5B,KAAK,CAACC,IAAI,CAAC4B,KAAK,CAACC,WAAW,CAACjB,MAAM,EAAE,OAAO,EAAEkB,gBAAgB,CAACrC,GAAG,EAAEmB,MAAM,EAAEW,OAAO,EAAEhC,KAAK,CAACG,CAAC,CAAC,CAACqC,QAAQ,CAAC,CAAC;IAExG,SAASD,gBAAgB,CAACrC,GAAG,EAAEmB,MAAM,EAAEW,OAAO,EAACS,UAAU,EAAE;MAE1D,OAAO,YAAU;QACd,IAAG,CAAEA,UAAW,EAAC;UACbpC,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;UACpBmC,UAAU,GAAG,IAAI;UACjBT,OAAO,CAACI,MAAM,CAAClC,GAAG,CAAC;UAE5B,IAAIwC,GAAG,GAAGrB,MAAM,CAACc,WAAW,EAAE;UAC9B9B,OAAO,CAACC,GAAG,CAACoC,GAAG,CAAC;UAChBxC,GAAG,CAACyC,KAAK,CAACD,GAAG,CAAC;QAET,CAAC,MACG;UAEAD,UAAU,GAAG,KAAK;UAClBT,OAAO,CAACI,MAAM,CAAC,IAAI,CAAC;QAExB;MACH,CAAC;IACJ;;IAEF;EACD;AACH,CAAC;;AAED,OAAO,MAAMQ,cAAc,GAAI1C,GAAG,IAAI;EAClC,IAAI2C,OAAO,GAAG;IAAE;IACZ3C,GAAG,EAAEA,GAAG;IAAE;IACV4C,WAAW,EAAE;IAAE;IACXtC,KAAK,CAACC,IAAI,CAACsC,OAAO,CAACC,WAAW,CAACC,MAAM,CACxC;IACD;IACA;IACAC,aAAa,EAAE;MAAE;MACbC,SAAS,EAAE,IAAI;MAAE;MACjBC,SAAS,EAAE,IAAI,CAAC;IACpB;EACJ,CAAC;;EAED,IAAIC,OAAO,GAAG,IAAI7C,KAAK,CAACC,IAAI,CAACsC,OAAO,CAACO,cAAc,CAACT,OAAO,CAAC;EAE5D,OAAOQ,OAAO;AAElB,CAAC;;AAED;AACA,OAAO,SAASE,aAAa,CAACC,IAAI,EAACH,OAAO,EAAE;EACxC;EACAA,OAAO,CAACI,MAAM,EAAE;;EAEhB;EACAJ,OAAO,CAACK,MAAM,CAAClD,KAAK,CAACC,IAAI,CAACsC,OAAO,CAACC,WAAW,CAACQ,IAAI,CAAC,CAAC;AACxD;AAEA,OAAO,SAASG,qBAAqB,CAACN,OAAO,EAAE;EAC3C;EACA,IAAIO,IAAI,GAAGP,OAAO,CAACQ,OAAO,EAAE;EAC5BxD,OAAO,CAACC,GAAG,CAACsD,IAAI,CAAC;EACjB,IAAGA,IAAI,CAACvC,MAAM,CAACjB,MAAM,KAAK,CAAC,EAAC;IACxBC,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;IACrB,OAAO;MAACwD,CAAC,EAAC,CAAC;MAACC,CAAC,EAAC;IAAC,CAAC;EACpB;EACA;EACA;EACA,MAAMC,KAAK,GAAG;IACVF,CAAC,EAACF,IAAI,CAACvC,MAAM,CAAC,CAAC,CAAC,CAACyC,CAAC;IAClBC,CAAC,EAACH,IAAI,CAACvC,MAAM,CAAC,CAAC,CAAC,CAAC0C;EACrB,CAAC;EACF,OAAOC,KAAK;EACX;EACA;AAEJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}