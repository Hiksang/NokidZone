{"ast":null,"code":"import e, { useLayoutEffect as o, useEffect as t, useState as n, useRef as a, useImperativeHandle as r, useContext as i, useMemo as s } from \"react\";\nimport l from \"react-dom\";\nfunction d() {\n  return d = Object.assign || function (e) {\n    for (var o = 1; o < arguments.length; o++) {\n      var t = arguments[o];\n      for (var n in t) Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);\n    }\n    return e;\n  }, d.apply(this, arguments);\n}\nfunction c(e, o) {\n  if (null == e) return {};\n  var t,\n    n,\n    a = {},\n    r = Object.keys(e);\n  for (n = 0; n < r.length; n++) o.indexOf(t = r[n]) >= 0 || (a[t] = e[t]);\n  return a;\n}\nconst p = \"undefined\" != typeof window && \"undefined\" != typeof document ? o : t,\n  u = (e, o, t) => {\n    p(() => {\n      if (!e || !t) return;\n      const n = function () {\n        for (var _len = arguments.length, o = new Array(_len), _key = 0; _key < _len; _key++) {\n          o[_key] = arguments[_key];\n        }\n        return void 0 === o ? t(e) : t(e, ...o);\n      };\n      return kakao.maps.event.addListener(e, o, n), () => {\n        kakao.maps.event.removeListener(e, o, n);\n      };\n    }, [e, o, t]);\n  };\nvar k;\n!function (e) {\n  e[e.INITIALIZED = 0] = \"INITIALIZED\", e[e.LOADING = 1] = \"LOADING\", e[e.SUCCESS = 2] = \"SUCCESS\", e[e.FAILURE = 3] = \"FAILURE\";\n}(k || (k = {}));\nclass m {\n  constructor(_ref) {\n    let {\n      appkey: e,\n      id: o = \"__reactKakaoMapsSdkloaderId\",\n      libraries: t = [],\n      nonce: n,\n      retries: a = 3,\n      url: r = \"//dapi.kakao.com/v2/maps/sdk.js\"\n    } = _ref;\n    if (this.id = void 0, this.appkey = void 0, this.url = void 0, this.libraries = void 0, this.nonce = void 0, this.retries = void 0, this.callbacks = [], this.done = !1, this.loading = !1, this.errors = [], this.onerrorEvent = void 0, this.id = o, this.appkey = e, this.libraries = t, this.nonce = n, this.retries = a, this.url = r, m.instance) {\n      if (!m.equalOptions(this.options, m.instance.options)) throw new Error(`Loader must not be called again with different options. ${JSON.stringify(this.options)} !== ${JSON.stringify(m.instance.options)}`);\n      return m.instance;\n    }\n    m.instance = this;\n  }\n  get options() {\n    return {\n      appkey: this.appkey,\n      id: this.id,\n      libraries: this.libraries,\n      nonce: this.nonce,\n      retries: this.retries,\n      url: this.url\n    };\n  }\n  static isLoaded() {\n    return new Promise(e => m.instance ? m.instance.status === k.FAILURE || m.instance.status === k.INITIALIZED ? e(!1) : (m.instance.status === k.LOADING && m.loadcheckcallbacks.push(o => e(!o)), e(!0)) : window.kakao && window.kakao.maps ? window.kakao.maps.load(() => {\n      e(!0);\n    }) : m.loadcheckcallbacks.push(o => {\n      e(!o);\n    }));\n  }\n  load() {\n    return new Promise((e, o) => {\n      this.loadCallback(t => {\n        t ? o(t.error) : e(window.kakao);\n      });\n    });\n  }\n  get status() {\n    return this.onerrorEvent ? k.FAILURE : this.done ? k.SUCCESS : this.loading ? k.LOADING : k.INITIALIZED;\n  }\n  get failed() {\n    return this.done && !this.loading && this.errors.length >= this.retries + 1;\n  }\n  loadCallback(e) {\n    this.callbacks.push(e), this.execute();\n  }\n  resetIfRetryingFailed() {\n    this.failed && this.reset();\n  }\n  reset() {\n    this.deleteScript(), this.done = !1, this.loading = !1, this.errors = [], this.onerrorEvent = void 0;\n  }\n  execute() {\n    if (this.resetIfRetryingFailed(), this.done) this.callback();else {\n      if (window.kakao && window.kakao.maps) return console.warn(\"Kakao Maps이 이미 외부 요소에 의해 로딩되어 있습니다.설정한 옵션과 일치 하지 않을 수 있으며, 이에 따른 예상치 동작이 발생할 수 있습니다.\"), void this.callback();\n      this.loading || (this.loading = !0, this.setScript());\n    }\n  }\n  setScript() {\n    document.getElementById(this.id) && this.callback();\n    const e = this.createUrl(),\n      o = document.createElement(\"script\");\n    o.id = this.id, o.type = \"text/javascript\", o.src = e, o.onerror = this.loadErrorCallback.bind(this), o.onload = this.callback.bind(this), o.defer = !0, o.async = !0, this.nonce && (o.nonce = this.nonce), document.head.appendChild(o);\n  }\n  loadErrorCallback(e, o, t, n, a) {\n    if (this.errors.push({\n      event: e,\n      source: o,\n      lineno: t,\n      colno: n,\n      error: a\n    }), this.errors.length <= this.retries) {\n      const e = this.errors.length * 2 ** this.errors.length;\n      console.log(`Failed to load Kakao Maps script, retrying in ${e} ms.`), setTimeout(() => {\n        this.deleteScript(), this.setScript();\n      }, e);\n    } else this.onerrorEvent = this.errors[this.errors.length - 1], this.callback();\n  }\n  createUrl() {\n    let e = this.url;\n    return e += `?appkey=${this.appkey}`, this.libraries.length && (e += `&libraries=${this.libraries.join(\",\")}`), e += \"&autoload=false\", e;\n  }\n  deleteScript() {\n    const e = document.getElementById(this.id);\n    e && e.remove();\n  }\n  callback() {\n    kakao.maps.load(() => {\n      this.done = !0, this.loading = !1, this.callbacks.forEach(e => {\n        e(this.onerrorEvent);\n      }), this.callbacks = [], m.loadcheckcallbacks.forEach(e => {\n        e(this.onerrorEvent);\n      }), m.loadcheckcallbacks = [];\n    });\n  }\n  static equalOptions(e, o) {\n    if (e.appkey !== o.appkey) return !1;\n    if (e.id !== o.id) return !1;\n    if (e.libraries.length !== o.libraries.length) return !1;\n    for (let t = 0; t < e.libraries.length; ++t) if (e.libraries[t] !== o.libraries[t]) return !1;\n    return e.nonce === o.nonce && e.retries === o.retries && e.url === o.url;\n  }\n}\nm.instance = void 0, m.loadcheckcallbacks = [];\nconst g = [\"id\", \"as\", \"children\", \"center\", \"isPanto\", \"padding\", \"disableDoubleClick\", \"disableDoubleClickZoom\", \"draggable\", \"zoomable\", \"keyboardShortcuts\", \"level\", \"maxLevel\", \"minLevel\", \"mapTypeId\", \"projectionId\", \"scrollwheel\", \"tileAnimation\", \"onBoundsChanged\", \"onCenterChanged\", \"onClick\", \"onDoubleClick\", \"onDrag\", \"onDragEnd\", \"onDragStart\", \"onIdle\", \"onMaptypeidChanged\", \"onMouseMove\", \"onRightClick\", \"onTileLoaded\", \"onZoomChanged\", \"onZoomStart\", \"onCreate\"],\n  h = e.createContext(void 0),\n  w = e.forwardRef((o, t) => {\n    let {\n        id: i,\n        as: s,\n        children: l,\n        center: k,\n        isPanto: w = !1,\n        padding: v = 32,\n        disableDoubleClick: f,\n        disableDoubleClickZoom: C,\n        draggable: y,\n        zoomable: b,\n        keyboardShortcuts: I,\n        level: M,\n        maxLevel: L,\n        minLevel: O,\n        mapTypeId: x,\n        projectionId: S,\n        scrollwheel: z,\n        tileAnimation: E,\n        onBoundsChanged: P,\n        onCenterChanged: R,\n        onClick: A,\n        onDoubleClick: D,\n        onDrag: T,\n        onDragEnd: Z,\n        onDragStart: W,\n        onIdle: N,\n        onMaptypeidChanged: j,\n        onMouseMove: _,\n        onRightClick: F,\n        onTileLoaded: G,\n        onZoomChanged: U,\n        onZoomStart: V,\n        onCreate: B\n      } = o,\n      $ = c(o, g);\n    const q = s || \"div\",\n      [H, J] = n(!1),\n      [K, X] = n(),\n      Y = a(null);\n    return p(() => {\n      m.isLoaded().then(J);\n    }, []), p(() => {\n      if (!H) return;\n      const e = Y.current;\n      if (!e) return;\n      const o = \"lat\" in k ? new kakao.maps.LatLng(k.lat, k.lng) : new kakao.maps.Coords(k.x, k.y),\n        t = new kakao.maps.Map(e, {\n          center: o,\n          disableDoubleClick: f,\n          disableDoubleClickZoom: C,\n          draggable: y,\n          keyboardShortcuts: I,\n          level: M,\n          mapTypeId: x,\n          projectionId: S,\n          scrollwheel: z,\n          tileAnimation: E\n        });\n      return X(t), () => {\n        e.innerHTML = \"\";\n      };\n    }, [H, f, C, x, E]), r(t, () => K, [K]), p(() => {\n      K && B && B(K);\n    }, [K, B]), p(() => {\n      if (!K) return;\n      let e = K.getCenter();\n      e instanceof kakao.maps.Coords && (e = e.toLatLng());\n      const o = \"lat\" in k ? new kakao.maps.LatLng(k.lat, k.lng) : new kakao.maps.Coords(k.x, k.y);\n      o instanceof kakao.maps.LatLng && o.equals(e) || o instanceof kakao.maps.Coords && o.toLatLng().equals(e) || (w ? K.panTo(o, v) : K.setCenter(o));\n    }, [K, k.lat, k.lng, k.x, k.y]), p(() => {\n      K && void 0 !== y && K.setDraggable(y);\n    }, [K, y]), p(() => {\n      K && void 0 !== b && K.setZoomable(b);\n    }, [K, b]), p(() => {\n      K && I && \"boolean\" == typeof I && K.setKeyboardShortcuts(I);\n    }, [K, I]), p(() => {\n      K && M && K.setLevel(M);\n    }, [K, M]), p(() => {\n      K && x && K.setMapTypeId(x);\n    }, [K, x]), p(() => {\n      K && S && K.setProjectionId(S);\n    }, [K, S]), p(() => {\n      K && L && K.setMaxLevel(L);\n    }, [K, L]), p(() => {\n      K && O && K.setMinLevel(O);\n    }, [K, O]), u(K, \"bounds_changed\", P), u(K, \"center_changed\", R), u(K, \"click\", A), u(K, \"dblclick\", D), u(K, \"drag\", T), u(K, \"dragstart\", W), u(K, \"dragend\", Z), u(K, \"idle\", N), u(K, \"maptypeid_changed\", j), u(K, \"mousemove\", _), u(K, \"rightclick\", F), u(K, \"tilesloaded\", G), u(K, \"zoom_changed\", U), u(K, \"zoom_start\", V), e.createElement(e.Fragment, null, e.createElement(q, d({\n      id: i || \"react-kakao-maps-sdk-map-container\"\n    }, $, {\n      ref: Y\n    })), K && e.createElement(h.Provider, {\n      value: K\n    }, l));\n  }),\n  v = e => {\n    const o = i(h);\n    if (!o) throw new Error((e ? e + \" Component\" : \"useMap\") + \" must exist inside Map Component!\");\n    return o;\n  },\n  f = e.forwardRef((_ref2, g) => {\n    let {\n      map: e,\n      position: t,\n      marker: n,\n      children: i,\n      altitude: d,\n      disableAutoPan: c,\n      range: p,\n      removable: u,\n      zIndex: k,\n      onCreate: m\n    } = _ref2;\n    const h = a(document.createElement(\"div\")),\n      w = s(() => {\n        const e = new kakao.maps.InfoWindow({\n          altitude: d,\n          disableAutoPan: c,\n          range: p,\n          removable: u,\n          zIndex: k,\n          content: h.current,\n          position: t\n        });\n        return h.current.style.display = \"none\", e;\n      }, [c, u]);\n    return r(g, () => w, [w]), o(() => (w.open(e, n), () => {\n      w.close();\n    }), [e, n]), o(() => {\n      m && m(w);\n    }, [w, m]), o(() => {\n      w && w.setPosition(t);\n    }, [w, t]), o(() => {\n      w && d && w.setAltitude(d);\n    }, [w, d]), o(() => {\n      w && p && w.setRange(p);\n    }, [w, p]), o(() => {\n      w && k && w.setZIndex(k);\n    }, [w, k]), h.current.parentElement && l.createPortal(i, h.current.parentElement);\n  }),\n  C = e.createContext(void 0),\n  y = e.forwardRef((_ref3, L) => {\n    let {\n      children: t,\n      averageCenter: n,\n      calculator: a,\n      clickable: i,\n      disableClickZoom: l,\n      gridSize: d,\n      hoverable: c,\n      minClusterSize: p,\n      minLevel: k,\n      styles: m,\n      texts: g,\n      onClusterclick: h,\n      onClusterdblclick: w,\n      onClustered: f,\n      onClusterout: y,\n      onClusterover: b,\n      onClusterrightclick: I,\n      onCreate: M\n    } = _ref3;\n    const O = v(\"MarkerClusterer\"),\n      x = s(() => {\n        if (window.kakao.maps.MarkerClusterer) return new kakao.maps.MarkerClusterer({\n          averageCenter: n,\n          calculator: a,\n          clickable: i,\n          disableClickZoom: l,\n          gridSize: d,\n          hoverable: c,\n          minClusterSize: p,\n          minLevel: k,\n          styles: m,\n          texts: g\n        });\n        console.warn(\"clusterer 라이브러리를 별도 로드 해야 사용 가능합니다. `https://apis.map.kakao.com/web/guide/#loadlibrary`\");\n      }, []);\n    return r(L, () => x, [x]), o(() => {\n      null == x || x.setMap(O);\n    }, [O, x]), o(() => {\n      x && M && M(x);\n    }, [x, M]), o(() => {\n      x && d && (x.setGridSize(d), x.redraw());\n    }, [x, d]), o(() => {\n      x && p && (x.setMinClusterSize(p), x.redraw());\n    }, [x, p]), o(() => {\n      x && void 0 !== n && (x.setAverageCenter(n), x.redraw());\n    }, [x, n]), o(() => {\n      x && k && (x.setMinLevel(k), x.redraw());\n    }, [x, k]), o(() => {\n      x && g && (x.setTexts(g), x.redraw());\n    }, [x, g]), o(() => {\n      x && a && (x.setCalculator(a), x.redraw());\n    }, [x, a]), o(() => {\n      x && m && (x.setStyles(m), x.redraw());\n    }, [x, m]), u(x, \"clusterclick\", h), u(x, \"clusterover\", b), u(x, \"clusterout\", y), u(x, \"clusterdblclick\", w), u(x, \"clusterrightclick\", I), u(x, \"clustered\", f), x ? e.createElement(C.Provider, {\n      value: x\n    }, t) : null;\n  }),\n  b = e.forwardRef((_ref4, O) => {\n    let {\n      map: t,\n      position: n,\n      children: a,\n      altitude: l,\n      clickable: d,\n      draggable: c,\n      image: p,\n      infoWindowOptions: k,\n      onCreate: m,\n      onClick: g,\n      onDragEnd: h,\n      onDragStart: w,\n      onMouseOut: v,\n      onMouseOver: y,\n      opacity: b,\n      range: I,\n      title: M,\n      zIndex: L\n    } = _ref4;\n    const x = i(C),\n      S = s(() => new kakao.maps.Marker({\n        altitude: l,\n        clickable: d,\n        draggable: c,\n        image: p,\n        opacity: b,\n        range: I,\n        title: M,\n        zIndex: L,\n        position: n\n      }), []);\n    return r(O, () => S, [S]), o(() => (x ? x.addMarker(S) : S.setMap(t), () => {\n      x ? x.removeMarker(S) : S.setMap(null);\n    }), [t, x, S]), o(() => {\n      m && m(S);\n    }, [S, m]), u(S, \"click\", g), u(S, \"dragstart\", w), u(S, \"dragend\", h), u(S, \"mouseout\", v), u(S, \"mouseover\", y), o(() => {\n      t && S && n && S.setPosition(n);\n    }, [t, S, n]), o(() => {\n      t && S && p && S.setImage(p);\n    }, [t, S, p]), o(() => {\n      t && S && l && S.setAltitude(l);\n    }, [t, S, l]), o(() => {\n      t && S && void 0 !== d && S.setClickable(d);\n    }, [t, S, d]), o(() => {\n      t && S && void 0 !== c && S.setDraggable(c);\n    }, [t, S, c]), o(() => {\n      t && S && b && S.setOpacity(b);\n    }, [t, S, b]), o(() => {\n      t && S && I && S.setRange(I);\n    }, [t, S, I]), o(() => {\n      t && S && M && S.setTitle(M);\n    }, [t, S, M]), o(() => {\n      t && S && L && S.setZIndex(L);\n    }, [t, S, L]), a ? e.createElement(f, {\n      position: n,\n      map: t,\n      marker: S,\n      altitude: null == k ? void 0 : k.altitude,\n      disableAutoPan: null == k ? void 0 : k.disableAutoPan,\n      range: null == k ? void 0 : k.range,\n      removable: null == k ? void 0 : k.removable,\n      zIndex: null == k ? void 0 : k.zIndex\n    }, a) : null;\n  }),\n  I = e.forwardRef((_ref5, w) => {\n    let {\n      image: o,\n      position: t,\n      children: n,\n      clickable: a,\n      draggable: r,\n      infoWindowOptions: i,\n      onClick: l,\n      onDragEnd: d,\n      onDragStart: c,\n      onMouseOut: p,\n      onMouseOver: u,\n      onCreate: k,\n      opacity: m,\n      title: g,\n      zIndex: h\n    } = _ref5;\n    const f = v(\"MapMarker\"),\n      C = s(() => {\n        var e, t, n, a, r, i, s, l, d, c, p, u;\n        return o && new kakao.maps.MarkerImage(o.src, new kakao.maps.Size(o.size.width, o.size.height), {\n          alt: null == (e = o.options) ? void 0 : e.alt,\n          coords: null == (t = o.options) ? void 0 : t.coords,\n          offset: (null == (n = o.options) ? void 0 : n.offset) && new kakao.maps.Point(null == (a = o.options) ? void 0 : a.offset.x, null == (r = o.options) ? void 0 : r.offset.y),\n          shape: null == (i = o.options) ? void 0 : i.shape,\n          spriteOrigin: (null == (s = o.options) ? void 0 : s.spriteOrigin) && new kakao.maps.Point(null == (l = o.options) ? void 0 : l.spriteOrigin.x, null == (d = o.options) ? void 0 : d.spriteOrigin.y),\n          spriteSize: (null == (c = o.options) ? void 0 : c.spriteSize) && new kakao.maps.Size(null == (p = o.options) ? void 0 : p.spriteSize.width, null == (u = o.options) ? void 0 : u.spriteSize.height)\n        });\n      }, [o]),\n      y = s(() => \"lat\" in t ? new kakao.maps.LatLng(t.lat, t.lng) : new kakao.maps.Coords(t.x, t.y).toLatLng(), [t.lat, t.lng, t.x, t.y]);\n    return e.createElement(b, {\n      map: f,\n      position: y,\n      image: C,\n      clickable: a,\n      draggable: r,\n      infoWindowOptions: i,\n      onClick: l,\n      onDragEnd: d,\n      onDragStart: c,\n      onMouseOut: p,\n      onMouseOver: u,\n      onCreate: k,\n      opacity: m,\n      title: g,\n      zIndex: h,\n      ref: w\n    }, n);\n  }),\n  M = e.forwardRef((_ref6, l) => {\n    let {\n      position: o,\n      children: t,\n      disableAutoPan: n,\n      removable: a,\n      zIndex: r,\n      onCreate: i\n    } = _ref6;\n    const d = v(\"MapInfoWindow\"),\n      c = s(() => new kakao.maps.LatLng(o.lat, o.lng), [o.lat, o.lng]);\n    return e.createElement(f, {\n      disableAutoPan: n,\n      removable: a,\n      zIndex: r,\n      map: d,\n      position: c,\n      onCreate: i,\n      ref: l\n    }, t);\n  }),\n  L = e.forwardRef((_ref7, k) => {\n    let {\n      position: e,\n      children: t,\n      clickable: n,\n      xAnchor: d,\n      yAnchor: c,\n      zIndex: p,\n      onCreate: u\n    } = _ref7;\n    const m = i(C),\n      g = v(\"CustomOverlayMap\"),\n      h = a(document.createElement(\"div\")),\n      w = s(() => new kakao.maps.LatLng(e.lat, e.lng), [e.lat, e.lng]),\n      f = s(() => {\n        const e = new kakao.maps.CustomOverlay({\n          clickable: n,\n          xAnchor: d,\n          yAnchor: c,\n          zIndex: p,\n          position: w,\n          content: h.current\n        });\n        return h.current.style.display = \"none\", e;\n      }, [n, d, c]);\n    return r(k, () => f, [f]), o(() => {\n      if (g) return m ? m.addMarker(f) : f.setMap(g), () => {\n        m ? m.removeMarker(f) : f.setMap(null);\n      };\n    }, [g, m, f]), o(() => {\n      u && u(f);\n    }, [f, u]), o(() => {\n      f.setPosition(w);\n    }, [f, w]), o(() => {\n      p && f.setZIndex(p);\n    }, [f, p]), h.current.parentElement && l.createPortal(t, h.current.parentElement);\n  }),\n  O = e.forwardRef((_ref8, t) => {\n    let {\n      position: e = kakao.maps.ControlPosition.TOPRIGHT\n    } = _ref8;\n    const n = v(\"MapTypeControl\"),\n      a = s(() => new kakao.maps.MapTypeControl(), []);\n    return r(t, () => a, [a]), o(() => (n.addControl(a, e), () => {\n      n.removeControl(a);\n    }), [n, a, e]), null;\n  }),\n  x = e.forwardRef((_ref9, o) => {\n    let {\n      position: e = kakao.maps.ControlPosition.RIGHT\n    } = _ref9;\n    const n = v(\"ZoomControl\"),\n      a = s(() => new kakao.maps.ZoomControl(), []);\n    return r(o, () => a, [a]), t(() => (n.addControl(a, e), () => {\n      n.removeControl(a);\n    }), [n, e]), null;\n  }),\n  S = _ref10 => {\n    let {\n      type: e\n    } = _ref10;\n    const o = v(\"MapTypeId\");\n    return t(() => (o.addOverlayMapTypeId(e), () => {\n      o.removeOverlayMapTypeId(e);\n    }), [o, e]), null;\n  },\n  z = e.forwardRef((_ref11, C) => {\n    let {\n      center: e,\n      radius: t,\n      fillColor: n,\n      fillOpacity: a,\n      strokeColor: i,\n      strokeOpacity: l,\n      strokeStyle: d,\n      strokeWeight: c,\n      zIndex: p,\n      onMouseover: k,\n      onMouseout: m,\n      onMousemove: g,\n      onMousedown: h,\n      onClick: w,\n      onCreate: f\n    } = _ref11;\n    const y = v(\"Circle\"),\n      b = s(() => new kakao.maps.LatLng(e.lat, e.lng), [e.lat, e.lng]),\n      I = s(() => new kakao.maps.Circle({\n        center: b,\n        radius: t,\n        fillColor: n,\n        fillOpacity: a,\n        strokeColor: i,\n        strokeOpacity: l,\n        strokeStyle: d,\n        strokeWeight: c,\n        zIndex: p\n      }), []);\n    return r(C, () => I, [I]), o(() => (I.setMap(y), () => {\n      I.setMap(null);\n    }), [y, I]), o(() => {\n      f && f(I);\n    }, [I, f]), o(() => {\n      I && I.setPosition(b);\n    }, [I, b]), o(() => {\n      I.setRadius(t);\n    }, [I, t]), o(() => {\n      p && I.setZIndex(p);\n    }, [I, p]), o(() => {\n      I.setOptions({\n        fillColor: n,\n        fillOpacity: a,\n        strokeColor: i,\n        strokeOpacity: l,\n        strokeStyle: d,\n        strokeWeight: c\n      });\n    }, [I, n, a, i, l, d, c]), u(I, \"mouseover\", k), u(I, \"mouseout\", m), u(I, \"mousemove\", g), u(I, \"mousedown\", h), u(I, \"click\", w), null;\n  }),\n  E = e.forwardRef((_ref12, w) => {\n    let {\n      path: e,\n      endArrow: t,\n      onClick: n,\n      onMousedown: a,\n      onMousemove: i,\n      onMouseout: l,\n      onMouseover: d,\n      onCreate: c,\n      strokeColor: p,\n      strokeOpacity: k,\n      strokeStyle: m,\n      strokeWeight: g,\n      zIndex: h\n    } = _ref12;\n    const f = v(\"Polyline\"),\n      C = s(() => e.every(e => e instanceof Array) ? e.map(e => e.map(e => new kakao.maps.LatLng(e.lat, e.lng))) : e.map(e => new kakao.maps.LatLng(e.lat, e.lng)), [e]),\n      y = s(() => new kakao.maps.Polyline({\n        path: C,\n        endArrow: t,\n        strokeColor: p,\n        strokeOpacity: k,\n        strokeStyle: m,\n        strokeWeight: g,\n        zIndex: h\n      }), []);\n    return r(w, () => y, [y]), o(() => (y.setMap(f), () => y.setMap(null)), [f, y]), o(() => {\n      c && c(y);\n    }, [y, c]), o(() => {\n      y.setOptions({\n        endArrow: t,\n        strokeColor: p,\n        strokeOpacity: k,\n        strokeStyle: m,\n        strokeWeight: g\n      });\n    }, [y, t, p, k, m, g]), o(() => {\n      y.setPath(C);\n    }, [y, C]), o(() => {\n      h && y.setZIndex(h);\n    }, [y, h]), u(y, \"mouseover\", d), u(y, \"mouseout\", l), u(y, \"mousemove\", i), u(y, \"mousedown\", a), u(y, \"click\", n), null;\n  }),\n  P = e.forwardRef((_ref13, f) => {\n    let {\n      path: e,\n      onClick: t,\n      onMousedown: n,\n      onMousemove: a,\n      onMouseout: i,\n      onMouseover: l,\n      onCreate: d,\n      strokeColor: c,\n      strokeOpacity: p,\n      strokeStyle: k,\n      strokeWeight: m,\n      fillColor: g,\n      fillOpacity: h,\n      zIndex: w\n    } = _ref13;\n    const C = v(\"Polygon\"),\n      y = s(() => e.every(e => e instanceof Array) ? e.map(e => e.map(e => new kakao.maps.LatLng(e.lat, e.lng))) : e.map(e => new kakao.maps.LatLng(e.lat, e.lng)), [e]),\n      b = s(() => new kakao.maps.Polygon({\n        path: y,\n        fillColor: g,\n        fillOpacity: h,\n        strokeColor: c,\n        strokeOpacity: p,\n        strokeStyle: k,\n        strokeWeight: m,\n        zIndex: w\n      }), []);\n    return r(f, () => b, [b]), o(() => (b.setMap(C), () => b.setMap(null)), [C, b]), o(() => {\n      d && d(b);\n    }, [b, d]), o(() => {\n      b.setOptions({\n        fillColor: g,\n        fillOpacity: h,\n        strokeColor: c,\n        strokeOpacity: p,\n        strokeStyle: k,\n        strokeWeight: m\n      });\n    }, [b, g, h, c, p, k, m]), o(() => {\n      b.setPath(y);\n    }, [b, y]), o(() => {\n      w && b.setZIndex(w);\n    }, [b, w]), u(b, \"mouseover\", l), u(b, \"mouseout\", i), u(b, \"mousemove\", a), u(b, \"mousedown\", n), u(b, \"click\", t), null;\n  }),\n  R = e.forwardRef((_ref14, f) => {\n    let {\n      bounds: e,\n      onClick: t,\n      onMousedown: n,\n      onMousemove: a,\n      onMouseout: i,\n      onMouseover: l,\n      onCreate: d,\n      strokeColor: c,\n      strokeOpacity: p,\n      strokeStyle: k,\n      strokeWeight: m,\n      fillColor: g,\n      fillOpacity: h,\n      zIndex: w\n    } = _ref14;\n    const C = v(\"Rectangle\"),\n      y = s(() => new kakao.maps.LatLngBounds(new kakao.maps.LatLng(e.sw.lat, e.sw.lng), new kakao.maps.LatLng(e.ne.lat, e.ne.lng)), [e]),\n      b = s(() => new kakao.maps.Rectangle({\n        bounds: y,\n        fillColor: g,\n        fillOpacity: h,\n        strokeColor: c,\n        strokeOpacity: p,\n        strokeStyle: k,\n        strokeWeight: m,\n        zIndex: w\n      }), []);\n    return r(f, () => b, [b]), o(() => (b.setMap(C), () => b.setMap(null)), [C, b]), o(() => {\n      d && d(b);\n    }, [b, d]), o(() => {\n      b.setOptions({\n        fillColor: g,\n        fillOpacity: h,\n        strokeColor: c,\n        strokeOpacity: p,\n        strokeStyle: k,\n        strokeWeight: m\n      });\n    }, [b, g, h, c, p, k, m]), o(() => {\n      b.setBounds(y);\n    }, [b, y]), o(() => {\n      w && b.setZIndex(w);\n    }, [b, w]), u(b, \"mouseover\", l), u(b, \"mouseout\", i), u(b, \"mousemove\", a), u(b, \"mousedown\", n), u(b, \"click\", t), null;\n  }),\n  A = e.forwardRef((_ref15, y) => {\n    let {\n      center: e,\n      rx: t,\n      ry: n,\n      fillColor: a,\n      fillOpacity: i,\n      strokeColor: l,\n      strokeOpacity: d,\n      strokeStyle: c,\n      strokeWeight: p,\n      zIndex: k,\n      onMouseover: m,\n      onMouseout: g,\n      onMousemove: h,\n      onMousedown: w,\n      onClick: f,\n      onCreate: C\n    } = _ref15;\n    const b = v(\"Ellipse\"),\n      I = s(() => new kakao.maps.LatLng(e.lat, e.lng), [e.lat, e.lng]),\n      M = s(() => new kakao.maps.Ellipse({\n        center: I,\n        rx: t,\n        ry: n,\n        fillColor: a,\n        fillOpacity: i,\n        strokeColor: l,\n        strokeOpacity: d,\n        strokeStyle: c,\n        strokeWeight: p,\n        zIndex: k\n      }), []);\n    return r(y, () => M, [M]), o(() => (M.setMap(b), () => {\n      M.setMap(null);\n    }), [b, M]), o(() => {\n      C && C(M);\n    }, [M, C]), o(() => {\n      M && M.setPosition(I);\n    }, [M, I]), o(() => {\n      M.setRadius(t, n);\n    }, [M, t, n]), o(() => {\n      k && M.setZIndex(k);\n    }, [M, k]), o(() => {\n      M.setOptions({\n        fillColor: a,\n        fillOpacity: i,\n        strokeColor: l,\n        strokeOpacity: d,\n        strokeStyle: c,\n        strokeWeight: p\n      });\n    }, [M, a, i, l, d, c, p]), u(M, \"mouseover\", m), u(M, \"mouseout\", g), u(M, \"mousemove\", h), u(M, \"mousedown\", w), u(M, \"click\", f), null;\n  }),\n  D = e.forwardRef((_ref16, i) => {\n    let {\n      draw: e,\n      onAdd: t,\n      onRemove: n,\n      onCreate: a\n    } = _ref16;\n    const l = v(),\n      d = s(() => {\n        class o extends kakao.maps.AbstractOverlay {\n          constructor(e, o, t) {\n            super(), this.draw = e, this.onAdd = o, this.onRemove = t;\n          }\n        }\n        return new o(e, t, n);\n      }, [e, t, n]);\n    return r(i, () => d, [d]), o(() => (d.setMap(l), () => {\n      d.setMap(null);\n    }), [l, d]), o(() => {\n      a && a(d);\n    }, [d, a]), null;\n  }),\n  T = [\"id\", \"as\", \"children\", \"position\", \"pan\", \"panoId\", \"panoX\", \"panoY\", \"tilt\", \"zoom\", \"onCreate\", \"onInit\", \"onPanoidChange\", \"onPositionChanged\", \"onViewpointChange\", \"onErrorGetNearestPanoId\"],\n  Z = e.createContext(void 0),\n  W = e.forwardRef((o, t) => {\n    let {\n        id: i,\n        as: s,\n        children: l,\n        position: k,\n        pan: g,\n        panoId: h,\n        panoX: w,\n        panoY: v,\n        tilt: f,\n        zoom: C,\n        onCreate: y,\n        onInit: b,\n        onPanoidChange: I,\n        onPositionChanged: M,\n        onViewpointChange: L,\n        onErrorGetNearestPanoId: O\n      } = o,\n      x = c(o, T);\n    const S = s || \"div\",\n      [z, E] = n(!1),\n      [P, R] = n(!0),\n      [A, D] = n(),\n      W = a(null);\n    return p(() => {\n      m.isLoaded().then(E);\n    }, []), p(() => {\n      if (!z) return;\n      const e = W.current;\n      if (!e) return;\n      const o = new kakao.maps.Roadview(e, {\n        pan: g,\n        panoId: h,\n        panoX: w,\n        panoY: v,\n        tilt: f,\n        zoom: C\n      });\n      return D(o), () => {\n        e.innerHTML = \"\";\n      };\n    }, [z, w, v, C]), r(t, () => A, [A]), p(() => {\n      A && y && y(A);\n    }, [A, y]), p(() => {\n      if (!A || h || A.getPosition().getLat() === k.lat && A.getPosition().getLng() === k.lng) return;\n      const e = new kakao.maps.LatLng(k.lat, k.lng);\n      new kakao.maps.RoadviewClient().getNearestPanoId(e, k.radius, o => {\n        null === o && O ? O(A) : A.setPanoId(o, e);\n      });\n    }, [A, h, k.lat, k.lng, k.radius, O]), p(() => {\n      if (!A || !h || h === A.getPanoId() || A.getPosition().getLat() === k.lat && A.getPosition().getLng() === k.lng) return;\n      const e = new kakao.maps.LatLng(k.lat, k.lng);\n      A.setPanoId(h, e);\n    }, [A, h, k.lat, k.lng]), p(() => {\n      if (!A) return;\n      const e = A.getViewpoint();\n      e.pan === g && e.tilt === f || (g && (e.pan = g), f && (e.tilt = f), A.setViewpoint(e));\n    }, [A, g, f]), u(A, \"init\", e => {\n      R(!1), b && b(e);\n    }), u(A, \"panoid_changed\", I), u(A, \"viewpoint_changed\", L), u(A, \"position_changed\", M), e.createElement(e.Fragment, null, e.createElement(S, d({\n      ref: W,\n      id: i || \"react-kakao-maps-sdk-roadview-container\"\n    }, x)), A && !P && e.createElement(Z.Provider, {\n      value: A\n    }, l));\n  }),\n  N = e => {\n    const o = i(Z);\n    if (!o) throw new Error((e ? e + \" Component\" : \"useRoadview\") + \" must exist inside Roadview Component!\");\n    return o;\n  },\n  j = e.forwardRef((_ref17, m) => {\n    let {\n      position: e,\n      children: t,\n      clickable: n,\n      xAnchor: i,\n      yAnchor: d,\n      zIndex: c,\n      altitude: p,\n      range: u,\n      onCreate: k\n    } = _ref17;\n    const g = N(\"CustomOverlayRoadview\"),\n      h = a(document.createElement(\"div\")),\n      w = s(() => \"lat\" in e ? new kakao.maps.LatLng(e.lat, e.lng) : new kakao.maps.Viewpoint(e.pan, e.tilt, e.zoom, e.panoId), [e.lat, e.lng, e.pan, e.tilt, e.zoom, e.panoId]),\n      v = s(() => {\n        const e = new kakao.maps.CustomOverlay({\n          clickable: n,\n          xAnchor: i,\n          yAnchor: d,\n          zIndex: c,\n          position: w,\n          content: h.current\n        });\n        return h.current.style.display = \"none\", e;\n      }, [n, i, d]);\n    return r(m, () => v, [v]), o(() => {\n      if (g) return v.setMap(g), () => {\n        v.setMap(null);\n      };\n    }, [v, g]), o(() => {\n      k && k(v);\n    }, [v, k]), o(() => {\n      v.setPosition(w);\n    }, [v, w]), o(() => {\n      c && v.setZIndex(c);\n    }, [v, c]), o(() => {\n      p && v.setAltitude(p);\n    }, [v, p]), o(() => {\n      u && v.setRange(u);\n    }, [v, u]), h.current.parentElement && l.createPortal(t, h.current.parentElement);\n  }),\n  _ = e.forwardRef((_ref18, v) => {\n    let {\n      image: o,\n      position: t,\n      children: n,\n      altitude: a,\n      clickable: r,\n      infoWindowOptions: i,\n      onClick: l,\n      onDragEnd: d,\n      onDragStart: c,\n      onMouseOut: p,\n      onMouseOver: u,\n      onCreate: k,\n      opacity: m,\n      range: g,\n      title: h,\n      zIndex: w\n    } = _ref18;\n    const f = N(\"RoadviewMarker\"),\n      C = s(() => {\n        var e, t, n, a, r, i, s, l, d, c, p, u;\n        return o && new kakao.maps.MarkerImage(o.src, new kakao.maps.Size(o.size.width, o.size.height), {\n          alt: null == (e = o.options) ? void 0 : e.alt,\n          coords: null == (t = o.options) ? void 0 : t.coords,\n          offset: (null == (n = o.options) ? void 0 : n.offset) && new kakao.maps.Point(null == (a = o.options) ? void 0 : a.offset.x, null == (r = o.options) ? void 0 : r.offset.y),\n          shape: null == (i = o.options) ? void 0 : i.shape,\n          spriteOrigin: (null == (s = o.options) ? void 0 : s.spriteOrigin) && new kakao.maps.Point(null == (l = o.options) ? void 0 : l.spriteOrigin.x, null == (d = o.options) ? void 0 : d.spriteOrigin.y),\n          spriteSize: (null == (c = o.options) ? void 0 : c.spriteSize) && new kakao.maps.Size(null == (p = o.options) ? void 0 : p.spriteSize.width, null == (u = o.options) ? void 0 : u.spriteSize.height)\n        });\n      }, [o]),\n      y = s(() => \"lat\" in t ? new kakao.maps.LatLng(t.lat, t.lng) : \"x\" in t ? new kakao.maps.Coords(t.x, t.y).toLatLng() : new kakao.maps.Viewpoint(t.pan, t.tilt, t.zoom, t.panoId), [t.lat, t.lng, t.x, t.y, t.pan, t.tilt, t.zoom, null == t ? void 0 : t.panoId]);\n    return e.createElement(b, {\n      map: f,\n      position: y,\n      image: C,\n      altitude: a,\n      clickable: r,\n      infoWindowOptions: i,\n      onClick: l,\n      onDragEnd: d,\n      onDragStart: c,\n      onMouseOut: p,\n      onMouseOver: u,\n      onCreate: k,\n      opacity: m,\n      range: g,\n      title: h,\n      zIndex: w,\n      ref: v\n    }, n);\n  }),\n  F = e.forwardRef((_ref19, c) => {\n    let {\n      position: o,\n      children: t,\n      altitude: n,\n      disableAutoPan: a,\n      range: r,\n      removable: i,\n      zIndex: l,\n      onCreate: d\n    } = _ref19;\n    const p = N(\"RoadviewInfoWindow\"),\n      u = s(() => \"lat\" in o ? new kakao.maps.LatLng(o.lat, o.lng) : new kakao.maps.Viewpoint(o.pan, o.tilt, o.zoom, o.panoId), [o.lat, o.lng, o.pan, o.tilt, o.zoom, o.panoId]);\n    return e.createElement(f, {\n      altitude: n,\n      disableAutoPan: a,\n      range: r,\n      removable: i,\n      zIndex: l,\n      map: p,\n      position: u,\n      onCreate: d,\n      ref: c\n    }, t);\n  }),\n  G = e.createContext(void 0);\nfunction U(e, t, n) {\n  o(() => {\n    e && n && e.addListener(t, function () {\n      for (var _len2 = arguments.length, o = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        o[_key2] = arguments[_key2];\n      }\n      return void 0 === o ? n(e) : n(e, ...o);\n    });\n  }, [n, e, t]);\n}\nconst V = e.forwardRef(function (_ref20, M) {\n    let {\n      arrowOptions: t,\n      circleOptions: n,\n      ellipseOptions: a,\n      markerOptions: i,\n      polygonOptions: l,\n      polylineOptions: d,\n      rectangleOptions: c,\n      drawingMode: p,\n      guideTooltip: u,\n      onSelect: k,\n      onDrawstart: m,\n      onDraw: g,\n      onDrawend: h,\n      onDrawnext: w,\n      onCancle: f,\n      onRemove: C,\n      onStateChanged: y,\n      onCreate: b,\n      children: I\n    } = _ref20;\n    const L = v(\"Toolbox\"),\n      O = s(() => {\n        if (window.kakao.maps.drawing) return new kakao.maps.drawing.DrawingManager({\n          map: L,\n          drawingMode: p,\n          guideTooltip: u,\n          arrowOptions: t,\n          circleOptions: n,\n          ellipseOptions: a,\n          markerOptions: i,\n          polygonOptions: l,\n          polylineOptions: d,\n          rectangleOptions: c\n        });\n        console.warn(\"drawing 라이브러리를 별도 로드 해야 사용 가능합니다. `https://apis.map.kakao.com/web/guide/#loadlibrary`\");\n      }, []);\n    return r(M, () => O, [O]), o(() => {\n      O && b && b(O);\n    }, [O, b]), U(O, \"select\", k), U(O, \"drawstart\", m), U(O, \"draw\", g), U(O, \"drawend\", h), U(O, \"drawnext\", w), U(O, \"cancel\", f), U(O, \"remove\", C), U(O, \"state_changed\", y), O ? e.createElement(G.Provider, {\n      value: O\n    }, I) : null;\n  }),\n  B = e.forwardRef(function (_ref21, t) {\n    let {\n      position: e\n    } = _ref21;\n    e = e || kakao.maps.ControlPosition.TOP;\n    const n = v(\"Toolbox\"),\n      a = i(G);\n    if (!a) throw new Error(\"Toolbox must exist inside DrawingManager Component!`\");\n    const l = s(() => new kakao.maps.drawing.Toolbox({\n      drawingManager: a\n    }), [a]);\n    return r(t, () => l, [l]), o(() => {\n      const o = l.getElement();\n      return n.addControl(o, e), () => {\n        n.removeControl(o);\n      };\n    }, [n, l, e]), null;\n  }),\n  $ = e.forwardRef((_ref22, m) => {\n    let {\n      id: o = \"react-kakao-maps-sdk-staticmap-container\",\n      style: t,\n      className: i,\n      center: s,\n      marker: l,\n      level: c,\n      mapTypeId: u,\n      onCreate: k\n    } = _ref22;\n    const [g, h] = n(),\n      w = a(null);\n    return p(() => {\n      if (!window.kakao) return void console.warn(\"kakao map javascript api를 먼저 불러와야 합니다. `https://apis.map.kakao.com/web/guide`\");\n      const e = w.current;\n      e && kakao.maps.load(() => {\n        const o = Array.isArray(l) ? l.map(e => d({}, e, {\n            position: new kakao.maps.LatLng(e.position.lat, e.position.lng)\n          })) : \"object\" == typeof l && l.position ? d({}, l, {\n            position: new kakao.maps.LatLng(l.position.lat, l.position.lng)\n          }) : l,\n          t = new kakao.maps.StaticMap(e, {\n            center: new kakao.maps.LatLng(s.lat, s.lng),\n            level: c,\n            mapTypeId: u,\n            marker: o\n          });\n        h(t);\n      });\n    }, [JSON.stringify(l)]), r(m, () => g, [g]), p(() => {\n      g && g.setCenter(new kakao.maps.LatLng(s.lat, s.lng));\n    }, [g, s.lat, s.lng]), p(() => {\n      g && c && g.setLevel(c);\n    }, [g, c]), p(() => {\n      g && u && g.setMapTypeId(u);\n    }, [g, u]), p(() => {\n      g && k && k(g);\n    }, [g, k]), e.createElement(\"div\", {\n      id: o,\n      style: t,\n      className: i,\n      ref: w\n    });\n  }),\n  q = e => {\n    const [o, a] = n({\n        loading: !0,\n        error: void 0\n      }),\n      r = s(() => new m(e), [JSON.stringify(e)]);\n    return t(() => {\n      r.load().then(() => a({\n        loading: !1,\n        error: void 0\n      })).catch(e => a({\n        loading: !1,\n        error: e\n      }));\n    }, [r]), o;\n  };\nexport { D as AbstractOverlay, z as Circle, L as CustomOverlayMap, j as CustomOverlayRoadview, V as DrawingManager, A as Ellipse, m as Loader, w as Map, M as MapInfoWindow, I as MapMarker, O as MapTypeControl, S as MapTypeId, y as MarkerClusterer, P as Polygon, E as Polyline, R as Rectangle, W as Roadview, F as RoadviewInfoWindow, _ as RoadviewMarker, $ as StaticMap, B as Toolbox, x as ZoomControl, q as useInjectKakaoMapApi, v as useMap, N as useRoadview };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;AAEA,MAAMA,IACc,sBAAXC,UAA8C,sBAAbC,WACpCC,IACAC;ECHAC,IAAgB,CAIpBC,GAIAC,GAIAC;IAEAR,EAA0B;MACxB,KAAKM,MAAWE,GAAU;MAE1B,MAAMC,IAAe;QAAA,kCAAIC;UAAAA;QAAAA;QAAAA,YACXC,MAARD,IAA0BF,EAASF,KAC3BE,EAASF,MAAWI;MAAAA;MAKlC,OAFAE,MAAMC,KAAKC,MAAMC,YAAYT,GAAQC,GAAME,IAEpC;QACLG,MAAMC,KAAKC,MAAME,eAAeV,GAAQC,GAAME,EAA9C;MAAA,CACD;IAAA,GACA,CAACH,GAAQC,GAAMC,GAbO;EAAA;AC0BfS;AAAAA,CAAZ,UAAYA;EACVA,sCACAA,8BACAA,8BACAA,4BAJF;AAAA,EAAYA,UAKX;AAAA,MAWYC;EAiBXC,kBAMQ;IAAA,IANRA;MAAYC,QACVA;MADUC,IAEVA,IA5Be;MA0BLC,WAGVA,IAAY;MAHFC,OAIVA;MAJUC,SAKVA,IAAU;MALAC,KAMVA,IAAM;IAAA;IASN,IARcC,KApBAL,UAoBA,QAnBAD,cAmBA,QAlBAK,WAkBA,QAjBAH,iBAiBA,QAhBAC,aAgBA,QAfAC,eAeA,QAbRG,YAA0C,IAC1CC,aAAO,GACPC,gBAAU,QACVC,SAAuB,IAUfJ,KATRK,oBASQ,GACdL,KAAKL,KAAKA,GACVK,KAAKN,SAASA,GACdM,KAAKJ,YAAYA,GACjBI,KAAKH,QAAQA,GACbG,KAAKF,UAAUA,GACfE,KAAKD,MAAMA,GAEPP,EAAOc,UAAU;MACnB,KAAKd,EAAOe,aAAaP,KAAKQ,SAAShB,EAAOc,SAASE,UACrD,MAAUC,UACmD,gEAAKC,UAC9DV,KAAKQ,gBACEG,KAAKD,UAAUlB,EAAOc,SAASE;MAI5C,OAAOhB,EAAOc,QACf;IAAA;IACDd,EAAOc,WAAWN,IACnB;EAAA;EAEUQ;IACT,OAAO;MACLd,QAAQM,KAAKN;MACbC,IAAIK,KAAKL;MACTC,WAAWI,KAAKJ;MAChBC,OAAOG,KAAKH;MACZC,SAASE,KAAKF;MACdC,KAAKC,KAAKD;IAAAA,CAEb;EAAA;EAEqBa;IACpB,OAAWC,YAASC,KACbtB,EAAOc,WAYVd,EAAOc,SAASS,WAAWxB,EAAayB,WACxCxB,EAAOc,SAASS,WAAWxB,EAAa0B,cAEjCH,GAAQ,MAGbtB,EAAOc,SAASS,WAAWxB,EAAa2B,WAC1C1B,EAAO2B,mBAAmBC,KAAMC,KAAMP,GAASO,KAG1CP,GAAQ,MArBTvC,OAAOW,SAASX,OAAOW,MAAMC,OACxBZ,OAAOW,MAAMC,KAAKmC,KAAK;MAC5BR,GAAQ,EACT;IAAA,KAEItB,EAAO2B,mBAAmBC,KAAMC;MACrCP,GAASO,EAAF;IAAA,GAiBd;EAAA;EAEMC;IACL,WAAWT,QAAQ,CAACC,GAASS;MAC3BvB,KAAKwB,aAAcC;QACZA,IAGHF,EAAOE,EAAIC,SAFXZ,EAAQvC,OAAOW,MAGhB;MAAA,EALH;IAAA,EAQH;EAAA;EAEU6B;IACT,OAAIf,KAAKK,eACAd,EAAayB,UAElBhB,KAAKE,OACAX,EAAaoC,UAElB3B,KAAKG,UACAZ,EAAa2B,UAEf3B,EAAa0B,WACrB;EAAA;EAEWW;IACV,OAAO5B,KAAKE,SAASF,KAAKG,WAAWH,KAAKI,OAAOyB,UAAU7B,KAAKF,UAAU,CAC3E;EAAA;EAEO0B,aAAaM;IACnB9B,KAAKC,UAAUmB,KAAKU,IACpB9B,KAAK+B,SACN;EAAA;EAEOC;IACFhC,KAAK4B,UACP5B,KAAKiC,OAER;EAAA;EAEOA;IACNjC,KAAKkC,gBACLlC,KAAKE,QAAO,GACZF,KAAKG,WAAU,GACfH,KAAKI,SAAS,IACdJ,KAAKK,oBAAepB,CACrB;EAAA;EAEO8C;IAGN,IAFA/B,KAAKgC,yBAEDhC,KAAKE,MACPF,KAAKlB,gBACA;MACL,IAAIP,OAAOW,SAASX,OAAOW,MAAMC,MAM/B,OALAgD,QAAQC,KACN,8FAGFpC,KAAKlB;MAIFkB,KAAKG,YACRH,KAAKG,WAAU,GACfH,KAAKqC,YAER;IAAA;EACF;EAEOA;IACF7D,SAAS8D,eAAetC,KAAKL,OAC/BK,KAAKlB;IAGP,MAAMiB,IAAMC,KAAKuC;MACXC,IAAShE,SAASiE,cAAc;IAEtCD,EAAO7C,KAAKK,KAAKL,IACjB6C,EAAO3D,OAAO,mBACd2D,EAAOE,MAAM3C,GACbyC,EAAOG,UAAU3C,KAAK4C,kBAAkBC,KAAK7C,OAC7CwC,EAAOM,SAAS9C,KAAKlB,SAAS+D,KAAK7C,OACnCwC,EAAOO,SAAQ,GACfP,EAAOQ,SAAQ,GAEXhD,KAAKH,UACP2C,EAAO3C,QAAQG,KAAKH,QAGtBrB,SAASyE,KAAKC,YAAYV,EAC3B;EAAA;EAEOI,kBACNxD,GACA+D,GACAC,GACAC,GACA3B;IAYA,IAVA1B,KAAKI,OAAOgB,KAAK;MACfhC;MACA+D;MAEAC;MAEAC;MACA3B;IAAAA,IAGE1B,KAAKI,OAAOyB,UAAU7B,KAAKF,SAAS;MACtC,MAAMwD,IAAQtD,KAAKI,OAAOyB,SAAS,KAAK7B,KAAKI,OAAOyB;MAEpDM,QAAQoB,qDAAqDD,UAE7DE,WAAW;QACTxD,KAAKkC,gBACLlC,KAAKqC,WACN;MAAA,GAAEiB,EACJ;IAAA,OACCtD,KAAKK,eAAeL,KAAKI,OAAOJ,KAAKI,OAAOyB,SAAS,IACrD7B,KAAKlB,UAER;EAAA;EAEMyD;IACL,IAAIxC,IAAMC,KAAKD;IASf,OARAA,KAAkB,gBAAKL,UAEnBM,KAAKJ,UAAUiC,WACjB9B,KAAqB,mBAAKH,UAAU6D,KAAK,SAG3C1D,wBAEOA,CACR;EAAA;EAEOmC;IACN,MAAMM,IAAShE,SAAS8D,eAAetC,KAAKL;IACxC6C,KACFA,EAAOkB,QAEV;EAAA;EAEO5E;IACNI,MAAMC,KAAKmC,KAAK;MACdtB,KAAKE,QAAO,GACZF,KAAKG,WAAU,GAEfH,KAAKC,UAAU0D,QAASC;QACtBA,EAAG5D,KAAKK,aAAN;MAAA,IAEJL,KAAKC,YAAY,IAEjBT,EAAO2B,mBAAmBwC,QAASC;QACjCA,EAAG5D,KAAKK,aACT;MAAA,IACDb,EAAO2B,qBAAqB,EAC7B;IAAA,EACF;EAAA;EAE0BP,oBACzBiD,GACAC;IAEA,IAAID,EAAEnE,WAAWoE,EAAEpE,QAAQ,QAAO;IAClC,IAAImE,EAAElE,OAAOmE,EAAEnE,IAAI;IAEnB,IAAIkE,EAAEjE,UAAUiC,WAAWiC,EAAElE,UAAUiC,QAAQ,QAAO;IACtD,KAAK,IAAIkC,IAAI,GAAGA,IAAIF,EAAEjE,UAAUiC,UAAUkC,GACxC,IAAIF,EAAEjE,UAAUmE,OAAOD,EAAElE,UAAUmE,IAAI,QACxC;IACD,OAAIF,EAAEhE,UAAUiE,EAAEjE,SACdgE,EAAE/D,YAAYgE,EAAEhE,WAChB+D,EAAE9D,QAAQ+D,EAAE/D,GAEjB;EAAA;AAAA;AAtQUP,EACIc,gBADJd,KAEI2B,qBAAmD;AAAA;ECtDvD6C,IAAkBC,EAAMC,mBACnCjF;EAqNIkF,IAAoBF,EAAMG,WAC9B,CAqCEC;IACE;QArCF1E,IACEA;QADF2E,IAEEA;QAFFC,UAGEA;QAHFC,QAIEA;QAJFC,SAKEA,KAAU;QALZC,SAMEA,IAAU;QANZC,oBAOEA;QAPFC,wBAQEA;QARFC,WASEA;QATFC,UAUEA;QAVFC,mBAWEA;QAXFC,OAYEA;QAZFC,UAaEA;QAbFC,UAcEA;QAdFC,WAeEA;QAfFC,cAgBEA;QAhBFC,aAiBEA;QAjBFC,eAkBEA;QAlBFC,iBAmBEA;QAnBFC,iBAoBEA;QApBFC,SAqBEA;QArBFC,eAsBEA;QAtBFC,QAuBEA;QAvBFC,WAwBEA;QAxBFC,aAyBEA;QAzBFC,QA0BEA;QA1BFC,oBA2BEA;QA3BFC,aA4BEA;QA5BFC,cA6BEA;QA7BFC,cA8BEA;QA9BFC,eA+BEA;QA/BFC,aAgCEA;QAhCFC,UAiCEA;MAAAA,IACGC;MAAAA,IAILC;IAAA,MAAMC,IAAYlC,KAAM;MAAA,CACjBmC,GAAUC,KAAeC,GAAS;MAAA,CAClCC,GAAKC,KAAUF;MAChBG,IAAYC,EAAuB;IA4IzC,OA1IAzI,EAA0B;MACxBkB,EAAOiH,WAAWO,KAAKN,EAAvB;IAAA,GACC,KAEHpI,EAA0B;MACxB,KAAKmI,GAAU;MAEf,MAAMQ,IAAeH,EAAUI;MAE/B,KAAKD,GACH;MAGF,MAAME,IACJ,SAAS3C,IACL,IAAItF,MAAMC,KAAKiI,OAAO5C,EAAO6C,KAAK7C,EAAO8C,OACzC,IAAIpI,MAAMC,KAAKoI,OAAO/C,EAAOgD,GAAGhD,EAAOiD;QAEvCC,IAAW,IAAIxI,MAAMC,KAAKgF,IAAI8C,GAAc;UAChDzC,QAAQ2C;UACRxC,oBAAoBA;UACpBC,wBAAwBA;UACxBC,WAAWA;UACXE,mBAAmBA;UACnBC,OAAOA;UACPG,WAAWA;UACXC,cAAcA;UACdC,aAAaA;UACbC,eAAeA;QAAAA;MAKjB,OAFAuB,EAAOa,IAEA;QACLT,EAAaU,YAAY,EAC1B;MAAA;IAAA,GACA,CACDlB,GACA9B,GACAC,GACAO,GACAG,KAGFsC,EAAoBvD,GAAK,MAAMuC,GAAM,CAACA,KAEtCtI,EAA0B;MACnBsI,KAAQP,KACbA,EAASO,EAAD;IAAA,GACP,CAACA,GAAKP,KAGT/H,EAA0B;MACxB,KAAKsI,GAAK;MAEV,IAAIiB,IAAajB,EAAIkB;MACjBD,aAAsB3I,MAAMC,KAAKoI,WACnCM,IAAaA,EAAWE;MAG1B,MAAMC,IACJ,SAASxD,IACL,IAAItF,MAAMC,KAAKiI,OAAO5C,EAAO6C,KAAK7C,EAAO8C,OACzC,IAAIpI,MAAMC,KAAKoI,OAAO/C,EAAOgD,GAAGhD,EAAOiD;MAG1CO,aAA0B9I,MAAMC,KAAKiI,UACpCY,EAAeC,OAAOJ,MACvBG,aAA0B9I,MAAMC,KAAKoI,UACpCS,EAAeD,WAAWE,OAAOJ,OAKjCpD,IACFmC,EAAIsB,MAAMF,GAAgBtD,KAE1BkC,EAAIuB,UAAUH,GACf;IAAA,GAEA,CAACpB,GAAKpC,EAAO6C,KAAK7C,EAAO8C,KAAK9C,EAAOgD,GAAGhD,EAAOiD,KAElDnJ,EAA0B;MACnBsI,UAA4B,MAAd/B,KACnB+B,EAAIwB,aAAavD,EAAjB;IAAA,GACC,CAAC+B,GAAK/B,KAETvG,EAA0B;MACnBsI,UAA2B,MAAb9B,KACnB8B,EAAIyB,YAAYvD,EAAhB;IAAA,GACC,CAAC8B,GAAK9B,KAETxG,EAA0B;MACnBsI,KAAQ7B,KAAkD,oBAAtBA,KAEzC6B,EAAI0B,qBAAqBvD,EAAzB;IAAA,GACC,CAAC6B,GAAK7B,KAETzG,EAA0B;MACnBsI,KAAQ5B,KACb4B,EAAI2B,SAASvD,EAAb;IAAA,GACC,CAAC4B,GAAK5B,KAET1G,EAA0B;MACnBsI,KAAQzB,KACbyB,EAAI4B,aAAarD,EAAjB;IAAA,GACC,CAACyB,GAAKzB,KAET7G,EAA0B;MACnBsI,KAAQxB,KACbwB,EAAI6B,gBAAgBrD,EACrB;IAAA,GAAE,CAACwB,GAAKxB,KAET9G,EAA0B;MACnBsI,KAAQ3B,KACb2B,EAAI8B,YAAYzD,EAAhB;IAAA,GACC,CAAC2B,GAAK3B,KAET3G,EAA0B;MACnBsI,KAAQ1B,KACb0B,EAAI+B,YAAYzD,EAAhB;IAAA,GACC,CAAC0B,GAAK1B,KAETvG,EAAciI,GAAK,kBAAkBrB,IACrC5G,EAAciI,GAAK,kBAAkBpB,IACrC7G,EAAciI,GAAK,SAASnB,IAC5B9G,EAAciI,GAAK,YAAYlB,IAC/B/G,EAAciI,GAAK,QAAQjB,IAC3BhH,EAAciI,GAAK,aAAaf,IAChClH,EAAciI,GAAK,WAAWhB,IAC9BjH,EAAciI,GAAK,QAAQd,IAC3BnH,EAAciI,GAAK,qBAAqBb,IACxCpH,EAAciI,GAAK,aAAaZ,IAChCrH,EAAciI,GAAK,cAAcX,IACjCtH,EAAciI,GAAK,eAAeV,IAClCvH,EAAciI,GAAK,gBAAgBT,IACnCxH,EAAciI,GAAK,cAAcR,IAG/BnC,kCACEA,gBAACuC,GACC7G;MAAAA,IAAIA,KAAM;IAAA,GACN2G,GACJjC;MAAAA,KAAKyC;IAAAA,KAENF,KACC3C,gBAACD,EAAgB4E,UAAS;MAAAC,OAAOjC;IAAAA,GAC9BrC,GARP;EAAA;EC7YAuE,IAAUC;IACd,MAAMrB,IAAWsB,EAAWhF;IAC5B,KAAK0D,GACH,MAAUjH,WAENsI,IAAgBA,IAAgB,eAAe,YAA/C;IAKN,OAAOrB;EAAAA;EC2BHuB,IAAahF,EAAMG,WAIvB,QAaEC;IAAAA,IAbF;MAEIuC;MACAsC;MACAC;MACA5E;MACA6E;MACAC;MACAC;MACAC;MACAC;MACAnD;IAAAA;IAIF,MAAMS,IAAYC,EAAOvI,SAASiE,cAAc;MAE1CgH,IAAaC,EAAQ;QACzB,MAAMC,IAAkB,IAAIzK,MAAMC,KAAK8J,WAAW;UAChDG,UAAUA;UACVC,gBAAgBA;UAChBC,OAAOA;UACPC,WAAWA;UACXC,QAAQA;UACRI,SAAS9C,EAAUI;UACnBgC,UAAUA;QAAAA;QAGZ,OADApC,EAAUI,QAAQ2C,MAAMC,UAAU,QAC3BH;MAAAA,GAEN,CAACN,GAAgBE;IAoCpB,OAlCA3B,EAAoBvD,GAAK,MAAMoF,GAAY,CAACA,KAE5ChL,EAAgB,OACdgL,EAAWM,KAAKnD,GAAKuC,IACd;MACLM,EAAWO,OAAX;IAAA,IAGD,CAACpD,GAAKuC,KAET1K,EAAgB;MACV4H,KAAUA,EAASoD,EACxB;IAAA,GAAE,CAACA,GAAYpD,KAEhB5H,EAAgB;MACTgL,KACLA,EAAWQ,YAAYf,EAAvB;IAAA,GACC,CAACO,GAAYP,KAEhBzK,EAAgB;MACTgL,KAAeL,KACpBK,EAAWS,YAAYd,EAAvB;IAAA,GACC,CAACK,GAAYL,KAEhB3K,EAAgB;MACTgL,KAAeH,KACpBG,EAAWU,SAASb,EAApB;IAAA,GACC,CAACG,GAAYH,KAEhB7K,EAAgB;MACTgL,KAAeD,KACpBC,EAAWW,UAAUZ,EACtB;IAAA,GAAE,CAACC,GAAYD,KAGd1C,EAAUI,QAAQmD,iBAClBC,EAASC,aAAahG,GAAUuC,EAAUI,QAAQmD,cAAlD;EAAA;EChHOG,IACXvG,EAAMC,mBACJjF;EAgHEwL,IAAkBxG,EAAMG,WAI5B,QAqBEC;IAAAA,IArBF;MAEIE;MACAmG;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACA9F;MACA+F;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAnF;IAAAA;IAIF,MAAMO,IAAMkC,EAAO;MACb2C,IAAgB/B,EAAQ;QAC5B,IAAKnL,OAAOW,MAAMC,KAAKsL,iBAMvB,OAAWvL,UAAMC,KAAKsL,gBAAgB;UACpCC;UACAC;UACAC;UACAC;UACAC;UACAC;UACAC;UACA9F;UACA+F;UACAC;QAAAA;QAfA/I,QAAQC,KACN,0FAIG;MAAA,GAaN;IAoEH,OAlEAwF,EAAoBvD,GAAK,MAAMoH,GAAgB,CAACA,KAEhDhN,EAAgB;MACD,QAAbgN,OAAe5E,OAAOD,EACvB;IAAA,GAAE,CAACA,GAAK6E,KAEThN,EAAgB;MACVgN,KAAiBpF,KAAUA,EAASoF,EACzC;IAAA,GAAE,CAACA,GAAepF,KAEnB5H,EAAgB;MACVgN,KAAiBX,MACnBW,EAAcC,YAAYZ,IAC1BW,EAAcE,SACf;IAAA,GACA,CAACF,GAAeX,KAEnBrM,EAAgB;MACVgN,KAAiBT,MACnBS,EAAcG,kBAAkBZ,IAChCS,EAAcE,SACf;IAAA,GACA,CAACF,GAAeT,KAEnBvM,EAAgB;MACVgN,UAA0C,MAAlBf,MAC1Be,EAAcI,iBAAiBnB,IAC/Be,EAAcE,SACf;IAAA,GACA,CAACF,GAAef,KAEnBjM,EAAgB;MACVgN,KAAiBvG,MACnBuG,EAAc9C,YAAYzD,IAC1BuG,EAAcE,SACf;IAAA,GACA,CAACF,GAAevG,KAEnBzG,EAAgB;MACVgN,KAAiBP,MACnBO,EAAcK,SAASZ,IACvBO,EAAcE,SACf;IAAA,GACA,CAACF,GAAeP,KAEnBzM,EAAgB;MACVgN,KAAiBd,MACnBc,EAAcM,cAAcpB,IAC5Bc,EAAcE,SACf;IAAA,GACA,CAACF,GAAed,KAEnBlM,EAAgB;MACVgN,KAAiBR,MACnBQ,EAAcO,UAAUf,IACxBQ,EAAcE,SACf;IAAA,GACA,CAACF,GAAeR,KAEnBtM,EAAc8M,GAAe,gBAAgBN,IAC7CxM,EAAc8M,GAAe,eAAeF,IAC5C5M,EAAc8M,GAAe,cAAcH,IAC3C3M,EAAc8M,GAAe,mBAAmBL,IAChDzM,EAAc8M,GAAe,qBAAqBD,IAClD7M,EAAc8M,GAAe,aAAaJ,IAErCI,IAKHxH,gBAACuG,EAA+B5B,UAAQ;MAACC,OAAO4C;IAAAA,GAC7ClH,KAJJ,IAGC;EAAA;EC5HA0H,IAAShI,EAAMG,WAInB,QAqBEC;IAAAA,IArBF;MAEIuC;MACAsC;MACA3E;MACA6E;MACAwB;MACA/F;MACAqH;MACAC;MACA9F;MACAZ;MACAG;MACAC;MACAuG;MACAC;MACAC;MACAhD;MACAiD;MACA/C;IAAAA;IAIF,MAAMiC,IAAgBzC,EAAWwB;MAG3BrB,IAASO,EAAQ,MACD,IAAIxK,MAAMC,KAAK8M,OAAO;QACxC7C;QACAwB;QACA/F;QACAqH;QACAI;QACAhD;QACAiD;QACA/C;QACAN;MAAAA,IAKD;IA6FH,OA3FAtB,EAAoBvD,GAAK,MAAM8E,GAAQ,CAACA,KAExC1K,EAAgB,OACVgN,IACFA,EAAce,UAAUrD,KAExBA,EAAOtC,OAAOD,IAGT;MACD6E,IACFA,EAAcgB,aAAatD,KAE3BA,EAAOtC,OAAO,KACf;IAAA,IAEF,CAACD,GAAK6E,GAAetC,KAExB1K,EAAgB;MACV4H,KAAUA,EAAS8C,EACxB;IAAA,GAAE,CAACA,GAAQ9C,KAEZ1H,EAAcwK,GAAQ,SAAS1D,IAC/B9G,EAAcwK,GAAQ,aAAatD,IACnClH,EAAcwK,GAAQ,WAAWvD,IACjCjH,EAAcwK,GAAQ,YAAYiD,IAClCzN,EAAcwK,GAAQ,aAAakD,IAGnC5N,EAAgB;MACTmI,KAAQuC,KAAWD,KAExBC,EAAOc,YAAYf,EACpB;IAAA,GAAE,CAACtC,GAAKuC,GAAQD,KAGjBzK,EAAgB;MACTmI,KAAQuC,KAAW+C,KAExB/C,EAAOuD,SAASR;IAAAA,GACf,CAACtF,GAAKuC,GAAQ+C,KAGjBzN,EAAgB;MACTmI,KAAQuC,KAAWC,KAExBD,EAAOe,YAAYd,EACpB;IAAA,GAAE,CAACxC,GAAKuC,GAAQC,KAGjB3K,EAAgB;MACTmI,KAAQuC,UAA+B,MAAdyB,KAE9BzB,EAAOwD,aAAa/B,EACrB;IAAA,GAAE,CAAChE,GAAKuC,GAAQyB,KAGjBnM,EAAgB;MACTmI,KAAQuC,UAA+B,MAAdtE,KAE9BsE,EAAOf,aAAavD,EAApB;IAAA,GACC,CAAC+B,GAAKuC,GAAQtE,KAGjBpG,EAAgB;MACTmI,KAAQuC,KAAWmD,KAExBnD,EAAOyD,WAAWN;IAAAA,GACjB,CAAC1F,GAAKuC,GAAQmD,KAGjB7N,EAAgB;MACTmI,KAAQuC,KAAWG,KAExBH,EAAOgB,SAASb,EAAhB;IAAA,GACC,CAAC1C,GAAKuC,GAAQG,KAGjB7K,EAAgB;MACTmI,KAAQuC,KAAWoD,KAExBpD,EAAO0D,SAASN;IAAAA,GACf,CAAC3F,GAAKuC,GAAQoD,KAGjB9N,EAAgB;MACTmI,KAAQuC,KAAWK,KAExBL,EAAOiB,UAAUZ,EAClB;IAAA,GAAE,CAAC5C,GAAKuC,GAAQK,KAEbjF,IAEAN,gBAACgF,GAAU;MACTC,UAAUA;MACVtC,KAAKA;MACLuC,QAAQA;MACRC,UAAQ,QAAE+C,SAAF,IAAEA,EAAmB/C;MAC7BC,gBAAc,QAAE8C,SAAF,IAAEA,EAAmB9C;MACnCC,eAAO6C,eAAmB7C;MAC1BC,WAAW4C,uBAAmB5C;MAC9BC,QAAQ2C,uBAAmB3C;IAAAA,GAE1BjF,KAKR;EAAA;EC7HGuI,IAAY7I,EAAMG,WAItB,QAkBEC;IAAAA,IAlBF;MAEI6H;MACAhD;MACA3E;MACAqG;MACA/F;MACAsH;MACA1G;MACAG;MACAC;MACAuG;MACAC;MACAhG;MACAiG;MACAC;MACA/C;IAAAA;IAIF,MAAM5C,IAAMkC,EAAO;MAEbiE,IAAcrD,EAAQ;QAAA;QAC1B,OACEwC,KACA,IAAIhN,MAAMC,KAAK6N,YACbd,EAAMxJ,KACN,IAAIxD,MAAMC,KAAK8N,KAAKf,EAAMgB,KAAKC,OAAOjB,EAAMgB,KAAKE,SACjD;UACEC,KAAG,SAAEnB,MAAM1L,gBAAR,IAAE8M,EAAeD;UACpBE,QAAQ,eAAM/M,gBAAN,MAAe+M;UACvBC,SACiBA,SAAfC,MAAMjN,gBAASgN,iBACf,IAAItO,MAAMC,KAAKuO,MAAf,SACExB,MAAM1L,gBADR,IACEmN,EAAeH,OAAOhG,GACtB,eAAMhH,gBAAN,MAAegN,OAAO/F;UAE1BmG,OAAK,aAAE1B,EAAM1L,gBAAR,IAAEqN,EAAeD;UACtBE,eACiBA,aAAf5B,EAAM1L,gBAASsN,uBACf,IAAI5O,MAAMC,KAAKuO,MACb,SADFK,IACE7B,EAAM1L,gBAAN,MAAesN,aAAatG,YAD9BwG,IAEE9B,EAAM1L,oBAANwN,EAAeF,aAAarG;UAEhCwG,sBACEC,MAAM1N,sBAASyN,eACf,IAAI/O,MAAMC,KAAK8N,KACb,eAAMzM,gBAAN,MAAeyN,WAAWd,gBAC1BjB,MAAM1L,oBAAN2N,EAAeF,WAAWb;QAAAA,EAvBlC;MAAA,GA4BD,CAAClB;MAEEkC,IAAiB1E,EAAQ,MACzB,SAASR,IACAhK,UAAMC,KAAKiI,OAAO8B,EAAS7B,KAAK6B,EAAS5B,OAE3CpI,UAAMC,KAAKoI,OAAO2B,EAAS1B,GAAG0B,EAASzB,GAAGM,YAIpD,CAACmB,EAAS7B,KAAK6B,EAAS5B,KAAK4B,EAAS1B,GAAG0B,EAASzB;IAErD,OACExD,gBAACgI,GAAM;MACLrF,KAAKA;MACLsC,UAAUkF;MACVlC,OAAOa;MACPnC,WAAWA;MACX/F,WAAWA;MACXsH,mBAAmBA;MACnB1G,SAASA;MACTG,WAAWA;MACXC,aAAaA;MACbuG,YAAYA;MACZC,aAAaA;MACbhG,UAAUA;MACViG,SAASA;MACTC,OAAOA;MACP/C,QAAQA;MACRnF,KAAKA;IAAAA,GAEJE,EAlBH;EAAA;ECnKA8J,IAAgBpK,EAAMG,WAI1B,QAEEC;IAAAA,IAFF;MACI6E;MAAU3E;MAAU8E;MAAgBE;MAAWC;MAAQnD;IAAAA;IAGzD,MAAMO,IAAMkC,EAAO;MACbwF,IAAe5E,EAAQ,MAChBxK,UAAMC,KAAKiI,OAAO8B,EAAS7B,KAAK6B,EAAS5B,MACnD,CAAC4B,EAAS7B,KAAK6B,EAAS5B;IAE3B,OACErD,gBAACgF,GAAU;MACTI,gBAAgBA;MAChBE,WAAWA;MACXC,QAAQA;MACR5C,KAAKA;MACLsC,UAAUoF;MACVjI,UAAUA;MACVhC,KAAKA;IAAAA,GAEJE,EATH;EAAA;ECjBAgK,IAAmBtK,EAAMG,WAI7B,QAEEC;IAAAA,IAFF;MACI6E;MAAU3E;MAAUqG;MAAW4D;MAASC;MAASjF;MAAQnD;IAAAA;IAG3D,MAAMoF,IAAgBzC,EAAWwB;MAE3B5D,IAAMkC,EAAO;MACbhC,IAAYC,EAAOvI,SAASiE,cAAc;MAE1CiM,IAAkBhF,EAAQ,UACnBxK,MAAMC,KAAKiI,OAAO8B,EAAS7B,KAAK6B,EAAS5B,MACnD,CAAC4B,EAAS7B,KAAK6B,EAAS5B;MAErBqH,IAAUjF,EAAQ;QACtB,MAAMkF,IAAqB,IAAI1P,MAAMC,KAAK0P,cAAc;UACtDjE,WAAWA;UACX4D,SAASA;UACTC,SAASA;UACTjF,QAAQA;UACRN,UAAUwF;UACV9E,SAAS9C,EAAUI;QAAAA;QAIrB,OAFAJ,EAAUI,QAAQ2C,MAAMC,UAAU,QAE3B8E;MAAAA,GAEN,CAAChE,GAAW4D,GAASC;IAmCxB,OAjCA7G,EAAoBvD,GAAK,MAAMsK,GAAS,CAACA,KAEzClQ,EAAgB;MACd,IAAKmI,GAQL,OANI6E,IACFA,EAAce,UAAUmC,KAExBA,EAAQ9H,OAAOD,IAGV;QACD6E,IACFA,EAAcgB,aAAakC,KAE3BA,EAAQ9H,OAAO,KAChB;MAAA,CACF;IAAA,GACA,CAACD,GAAK6E,GAAekD,KAExBlQ,EAAgB;MACV4H,KAAUA,EAASsI;IAAAA,GACtB,CAACA,GAAStI,KAEb5H,EAAgB;MACdkQ,EAAQ1E,YAAYyE,EAApB;IAAA,GACC,CAACC,GAASD,KAEbjQ,EAAgB;MACT+K,KACLmF,EAAQvE,UAAUZ,EACnB;IAAA,GAAE,CAACmF,GAASnF,KAGX1C,EAAUI,QAAQmD,iBAClByE,EAASvE,aAAahG,GAAUuC,EAAUI,QAAQmD,cAAlD;EAAA;ECtGA0E,IAAiB9K,EAAMG,WAG3B,QAAqDC;IAAAA,IAArD;MAAG6E,cAAWhK,MAAMC,KAAK6P,gBAAgBC;IAAAA;IACzC,MAAMrI,IAAMkC,EAAO;MAEboG,IAAiBxF,EAAQ,MACtB,IAAIxK,MAAMC,KAAK4P,kBACrB;IAYH,OAVAnH,EAAoBvD,GAAK,MAAM6K,GAAgB,CAACA,KAEhDzQ,EAAgB,OACdmI,EAAIuI,WAAWD,GAAgBhG,IAExB;MACLtC,EAAIwI,cAAcF,EAAlB;IAAA,IAED,CAACtI,GAAKsI,GAAgBhG,KAElB;EAAA;ECrBHmG,IAAcpL,EAAMG,WACxB,QAAkDC;IAAAA,IAAlD;MAAG6E,cAAWhK,MAAMC,KAAK6P,gBAAgBM;IAAAA;IACvC,MAAM1I,IAAMkC,EAAO;MAEbuG,IAAc3F,EAAQ,MACfxK,UAAMC,KAAKkQ,eACrB;IAcH,OAZAzH,EAAoBvD,GAAK,MAAMgL,GAAa,CAACA,KAE7C3Q,EAAU,OACRkI,EAAIuI,WAAWE,GAAanG,IAErB;MACLtC,EAAIwI,cAAcC,EACnB;IAAA,IAGA,CAACzI,GAAKsC,KAGV;EAAA;ECrBGqG,IAAsC,UAAG1Q;IAAAA,IAAH;MAAGA;IAAAA;IAC7C,MAAM+H,IAAMkC,EAAO;IAUnB,OARApK,EAAU,OACRkI,EAAI4I,oBAAoB3Q,IAEjB;MACL+H,EAAI6I,uBAAuB5Q;IAAAA,IAE5B,CAAC+H,GAAK/H,KAGV;EAAA;ECkEK6Q,IAASzL,EAAMG,WACnB,SAkBEC;IAAAA,IAlBF;MAEIG;MACAmL;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAzG;MACA0G;MACAC;MACAC;MACAC;MACA5K;MACAY;IAAAA;IAIF,MAAMO,IAAMkC,EAAO;MAEbwH,IAAe5G,EAAQ,MAChBxK,UAAMC,KAAKiI,OAAO5C,EAAO6C,KAAK7C,EAAO8C,MAC/C,CAAC9C,EAAO6C,KAAK7C,EAAO8C;MAEjBiJ,IAAS7G,EAAQ,MACVxK,UAAMC,KAAKuQ,OAAO;QAC3BlL,QAAQ8L;QACRX;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAzG;MAAAA,IAGD;IAqDH,OAnDA5B,EAAoBvD,GAAK,MAAMkM,GAAQ,CAACA,KAExC9R,EAAgB,OACd8R,EAAO1J,OAAOD,IACP;MACL2J,EAAO1J,OAAO,KACf;IAAA,IACA,CAACD,GAAK2J,KAET9R,EAAgB;MACV4H,KAAUA,EAASkK,EACxB;IAAA,GAAE,CAACA,GAAQlK,KAEZ5H,EAAgB;MACV8R,KAAQA,EAAOtG,YAAYqG,EAChC;IAAA,GAAE,CAACC,GAAQD,KAEZ7R,EAAgB;MACd8R,EAAOC,UAAUb;IAAAA,GAChB,CAACY,GAAQZ,KAEZlR,EAAgB;MACT+K,KACL+G,EAAOnG,UAAUZ,EAAjB;IAAA,GACC,CAAC+G,GAAQ/G,KAEZ/K,EAAgB;MACd8R,EAAOE,WAAW;QAChBb;QACAC;QACAC;QACAC;QACAC;QACAC;MAAAA;IAAAA,GAED,CACDM,GACAX,GACAC,GACAC,GACAC,GACAC,GACAC,KAGFtR,EAAc4R,GAAQ,aAAaL,IACnCvR,EAAc4R,GAAQ,YAAYJ,IAClCxR,EAAc4R,GAAQ,aAAaH,IACnCzR,EAAc4R,GAAQ,aAAaF,IACnC1R,EAAc4R,GAAQ,SAAS9K,IAGhC;EAAA;ECzGGiL,IAAWzM,EAAMG,WACrB,SAgBEC;IAAAA,IAhBF;MAEIsM;MACAC;MACAnL;MACA4K;MACAD;MACAD;MACAD;MACA7J;MACAyJ;MACAC;MACAC;MACAC;MACAzG;IAAAA;IAIF,MAAM5C,IAAMkC,EAAO;MAEb+H,IAAenH,EAAQ,MACtBiH,EAAkBG,MAAOC,KAAMA,aAAaC,SACvCL,EAAoB/J,IAAKmK,KACxBA,EAAEnK,IAAKqK,KAAM,IAAI/R,MAAMC,KAAKiI,OAAO6J,EAAE5J,KAAK4J,EAAE3J,SAG/CqJ,EAAkB/J,IAAKmK,KAClB7R,UAAMC,KAAKiI,OAAO2J,EAAE1J,KAAK0J,EAAEzJ,OAEvC,CAACqJ;MAEEO,IAAWxH,EAAQ,UACZxK,MAAMC,KAAKuR,SAAS;QAC7BC,MAAME;QACND;QACAd;QACAC;QACAC;QACAC;QACAzG;MAAAA,IAGD;IA4CH,OA1CA5B,EAAoBvD,GAAK,MAAM6M,GAAU,CAACA,KAE1CzS,EAAgB,OACdyS,EAASrK,OAAOD,IACT,MAAMsK,EAASrK,OAAO,QAC5B,CAACD,GAAKsK,KAETzS,EAAgB;MACV4H,KAAUA,EAAS6K,EAAD;IAAA,GACrB,CAACA,GAAU7K,KAEd5H,EAAgB;MACdyS,EAAST,WAAW;QAClBG;QACAd;QACAC;QACAC;QACAC;MAAAA,EAEH;IAAA,GAAE,CACDiB,GACAN,GACAd,GACAC,GACAC,GACAC,KAGFxR,EAAgB;MACdyS,EAASC,QAAQN,EAAjB;IAAA,GACC,CAACK,GAAUL,KAEdpS,EAAgB;MACV+K,KAAQ0H,EAAS9G,UAAUZ,EAAnB;IAAA,GACX,CAAC0H,GAAU1H,KAEd7K,EAAcuS,GAAU,aAAahB,IACrCvR,EAAcuS,GAAU,YAAYf,IACpCxR,EAAcuS,GAAU,aAAad,IACrCzR,EAAcuS,GAAU,aAAab,IACrC1R,EAAcuS,GAAU,SAASzL,IAE1B;EAAA;ECnFL2L,IAAUnN,EAAMG,WACpB,SAiBEC;IAAAA,IAjBF;MAEIsM;MACAlL;MACA4K;MACAD;MACAD;MACAD;MACA7J;MACAyJ;MACAC;MACAC;MACAC;MACAL;MACAC;MACArG;IAAAA;IAIF,MAAM5C,IAAMkC,EAAO;MAEbuI,IAAc3H,EAAQ,MACrBiH,EAAkBG,MAAOC,KAAMA,aAAaC,SACvCL,EAAoB/J,IAAKmK,KACxBA,EAAEnK,IAAKqK,KAAM,IAAI/R,MAAMC,KAAKiI,OAAO6J,EAAE5J,KAAK4J,EAAE3J,SAG/CqJ,EAAkB/J,IAAKmK,SAClB7R,MAAMC,KAAKiI,OAAO2J,EAAE1J,KAAK0J,EAAEzJ,OAEvC,CAACqJ;MAEEW,IAAU5H,EAAQ,MACf,IAAIxK,MAAMC,KAAKiS,QAAQ;QAC5BT,MAAMU;QACNzB;QACAC;QACAC;QACAC;QACAC;QACAC;QACAzG;MAAAA,IAGD;IA8CH,OA5CA5B,EAAoBvD,GAAK,MAAMiN,GAAS,CAACA,KAEzC7S,EAAgB,OACd6S,EAAQzK,OAAOD,IACR,MAAM0K,EAAQzK,OAAO,QAC3B,CAACD,GAAK0K,KAET7S,EAAgB;MACV4H,KAAUA,EAASiL,EACxB;IAAA,GAAE,CAACA,GAASjL,KAEb5H,EAAgB;MACd6S,EAAQb,WAAW;QACjBb;QACAC;QACAC;QACAC;QACAC;QACAC;MAAAA,EAEH;IAAA,GAAE,CACDqB,GACA1B,GACAC,GACAC,GACAC,GACAC,GACAC,KAGFxR,EAAgB;MACd6S,EAAQH,QAAQE,EACjB;IAAA,GAAE,CAACC,GAASD,KAEb5S,EAAgB;MACV+K,KAAQ8H,EAAQlH,UAAUZ;IAAAA,GAC7B,CAAC8H,GAAS9H,KAEb7K,EAAc2S,GAAS,aAAapB,IACpCvR,EAAc2S,GAAS,YAAYnB,IACnCxR,EAAc2S,GAAS,aAAalB,IACpCzR,EAAc2S,GAAS,aAAajB,IACpC1R,EAAc2S,GAAS,SAAS7L,IAEzB;EAAA;ECxFL8L,IAAYtN,EAAMG,WACtB,SAiBEC;IAAAA,IAjBF;MAEImN;MACA/L;MACA4K;MACAD;MACAD;MACAD;MACA7J;MACAyJ;MACAC;MACAC;MACAC;MACAL;MACAC;MACArG;IAAAA;IAIF,MAAM5C,IAAMkC,EAAO;MAEb2I,IAAkB/H,EAAQ,UACnBxK,MAAMC,KAAKuS,aACpB,IAAIxS,MAAMC,KAAKiI,OAAOoK,EAAOG,GAAGtK,KAAKmK,EAAOG,GAAGrK,MAC/C,IAAIpI,MAAMC,KAAKiI,OAAOoK,EAAOI,GAAGvK,KAAKmK,EAAOI,GAAGtK,OAEhD,CAACkK;MAEEK,IAAYnI,EAAQ,MACbxK,UAAMC,KAAKoS,UAAU;QAC9BC,QAAQC;QACR7B;QACAC;QACAC;QACAC;QACAC;QACAC;QACAzG;MAAAA,IAGD;IA8CH,OA5CA5B,EAAoBvD,GAAK,MAAMwN,GAAW,CAACA,KAE3CpT,EAAgB,OACdoT,EAAUhL,OAAOD,IACV,MAAMiL,EAAUhL,OAAO,QAC7B,CAACD,GAAKiL,KAETpT,EAAgB;MACV4H,KAAUA,EAASwL,EACxB;IAAA,GAAE,CAACA,GAAWxL,KAEf5H,EAAgB;MACdoT,EAAUpB,WAAW;QACnBb;QACAC;QACAC;QACAC;QACAC;QACAC;MAAAA,EANF;IAAA,GAQC,CACD4B,GACAjC,GACAC,GACAC,GACAC,GACAC,GACAC,KAGFxR,EAAgB;MACdoT,EAAUC,UAAUL,EAApB;IAAA,GACC,CAACI,GAAWJ,KAEfhT,EAAgB;MACV+K,KAAQqI,EAAUzH,UAAUZ,EAApB;IAAA,GACX,CAACqI,GAAWrI,KAEf7K,EAAckT,GAAW,aAAa3B,IACtCvR,EAAckT,GAAW,YAAY1B,IACrCxR,EAAckT,GAAW,aAAazB,IACtCzR,EAAckT,GAAW,aAAaxB,IACtC1R,EAAckT,GAAW,SAASpM,IAGnC;EAAA;ECzEGsM,IAAU9N,EAAMG,WACpB,SAmBEC;IAAAA,IAnBF;MAEIG;MACAwN;MACAC;MACArC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAzG;MACA0G;MACAC;MACAC;MACAC;MACA5K;MACAY;IAAAA;IAIF,MAAMO,IAAMkC,EAAO;MAEboJ,IAAgBxI,EAAQ,MACrB,IAAIxK,MAAMC,KAAKiI,OAAO5C,EAAO6C,KAAK7C,EAAO8C,MAC/C,CAAC9C,EAAO6C,KAAK7C,EAAO8C;MAEjB6K,IAAUzI,EAAQ,UACXxK,MAAMC,KAAK4S,QAAQ;QAC5BvN,QAAQ0N;QACRF;QACAC;QACArC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAzG;MAAAA,IAGD;IAsDH,OApDA5B,EAAoBvD,GAAK,MAAM8N,GAAS,CAACA,KAEzC1T,EAAgB,OACd0T,EAAQtL,OAAOD,IAER;MACLuL,EAAQtL,OAAO,KAChB;IAAA,IACA,CAACD,GAAKuL,KAET1T,EAAgB;MACV4H,KAAUA,EAAS8L,EAAD;IAAA,GACrB,CAACA,GAAS9L,KAEb5H,EAAgB;MACV0T,KAASA,EAAQlI,YAAYiI,EAApB;IAAA,GACZ,CAACC,GAASD,KAEbzT,EAAgB;MACd0T,EAAQ3B,UAAUwB,GAAIC,EACvB;IAAA,GAAE,CAACE,GAASH,GAAIC,KAEjBxT,EAAgB;MACT+K,KACL2I,EAAQ/H,UAAUZ,EAAlB;IAAA,GACC,CAAC2I,GAAS3I,KAEb/K,EAAgB;MACd0T,EAAQ1B,WAAW;QACjBb;QACAC;QACAC;QACAC;QACAC;QACAC;MAAAA,EANF;IAAA,GAQC,CACDkC,GACAvC,GACAC,GACAC,GACAC,GACAC,GACAC,KAGFtR,EAAcwT,GAAS,aAAajC,IACpCvR,EAAcwT,GAAS,YAAYhC,IACnCxR,EAAcwT,GAAS,aAAa/B,IACpCzR,EAAcwT,GAAS,aAAa9B,IACpC1R,EAAcwT,GAAS,SAAS1M,IAEzB;EAAA;ECjDL2M,IAAkBnO,EAAMG,WAG5B,SAAsCC;IAAAA,IAAtC;MAAGgO;MAAMC;MAAOC;MAAUlM;IAAAA;IAC1B,MAAMO,IAAMkC;MAEN0J,IAAuB9I,EAAQ;QACnC,MAAM+I,UAA6BvT,MAAMC,KAAKiT;UAC5C3S,YAAY4S,GAAkBC,GAAmBC;YAC/CG,SACA1S,KAAKqS,OAAOA,GACZrS,KAAKsS,QAAQA,GACbtS,KAAKuS,WAAWA,CACjB;UAAA;QAAA;QAGH,OADgB,IAAIE,EAAqBJ,GAAMC,GAAOC,EAC/C5D;MAAAA,GACN,CAAC0D,GAAMC,GAAOC;IAgBjB,OAdA3K,EAAoBvD,GAAK,MAAMmO,GAAsB,CAACA,KAEtD/T,EAAgB,OACd+T,EAAqB3L,OAAOD,IAErB;MACL4L,EAAqB3L,OAAO;IAAA,IAE7B,CAACD,GAAK4L,KAET/T,EAAgB;MACV4H,KAAUA,EAASmM;IAAAA,GACtB,CAACA,GAAsBnM,KAG3B;EAAA;ECvLDsM;EASaC,IAAuB3O,EAAMC,mBACxCjF;EAoFI4T,IAA8B5O,EAAMG,WACxC,IAoBEC;IAAAA;QAnBA1E,IACEA;QADF2E,IAEEA;QAFFC,UAGEA;QAHF2E,UAIEA;QAJF4J,KAKEA;QALFC,QAMEA;QANFC,OAOEA;QAPFC,OAQEA;QARFC,MASEA;QATFC,MAUEA;QAVF9M,UAWEA;QAXF+M,QAYEA;QAZFC,gBAaEA;QAbFC,mBAcEA;QAdFC,mBAeEA;QAfFC,yBAgBEA;MAAAA,IAIAC;MAHGnN,IAGHC;IACF,MAAMC,IAAYlC,KAAM;MAAA,CACjBmC,GAAUC,KAAeC,GAAS;MAAA,CAClC+M,GAAWC,KAAgBhN,GAAS;MAAA,CACpCiN,GAAUC,KAAelN;MAC1BG,IAAYC,EAAuB;IAsGzC,OApGAzI,EAA0B;MACxBkB,EAAOiH,WAAWO,KAAKN,EACxB;IAAA,GAAE,KAEHpI,EAA0B;MACxB,KAAKmI,GAAU;MAEf,MAAMqN,IAAoBhN,EAAUI;MAEpC,KAAK4M,GAAmB;MAExB,MAAMC,IAAgB,IAAI7U,MAAMC,KAAK0T,SAASiB,GAAmB;QAC/DhB,KAAKA;QACLC,QAAQA;QACRC,OAAOA;QACPC,OAAOA;QACPC,MAAMA;QACNC,MAAMA;MAAAA;MAKR,OAFAU,EAAYE,IAEL;QACLD,EAAkBnM,YAAY;MAAA,CAC/B;IAAA,GAEA,CAAClB,GAAUuM,GAAOC,GAAOE,KAE5BvL,EAAoBvD,GAAK,MAAMuP,GAAW,CAACA,KAE3CtV,EAA0B;MACnBsV,KAAavN,KAClBA,EAASuN,EAAD;IAAA,GACP,CAACA,GAAUvN,KAEd/H,EAA0B;MACxB,KACGsV,KACDb,KACCa,EAASI,cAAcC,aAAa/K,EAAS7B,OAC5CuM,EAASI,cAAcE,aAAahL,EAAS5B,KAE/C;MAEF,MAAM6M,IAAa,IAAIjV,MAAMC,KAAKiI,OAAO8B,EAAS7B,KAAK6B,EAAS5B;MAEhE,IAAIpI,MAAMC,KAAKiV,iBAAiBC,iBAC9BF,GACAjL,EAASyG,QACRoD;QACgB,SAAXA,KAAmBS,IACrBA,EAAwBI,KAExBA,EAASU,UAAUvB,GAAQoB,EAC5B;MAAA,EAGN;IAAA,GAAE,CACDP,GACAb,GACA7J,EAAS7B,KACT6B,EAAS5B,KACT4B,EAASyG,QACT6D,KAGFlV,EAA0B;MACxB,KACGsV,MACAb,KACDA,MAAWa,EAASW,eACnBX,EAASI,cAAcC,aAAa/K,EAAS7B,OAC5CuM,EAASI,cAAcE,aAAahL,EAAS5B,KAE/C;MAEF,MAAM6M,IAAa,IAAIjV,MAAMC,KAAKiI,OAAO8B,EAAS7B,KAAK6B,EAAS5B;MAChEsM,EAASU,UAAUvB,GAAQoB,EAA3B;IAAA,GACC,CAACP,GAAUb,GAAQ7J,EAAS7B,KAAK6B,EAAS5B,OAE7ChJ,EAA0B;MACxB,KAAKsV,GAAU;MAEf,MAAMY,IAAgBZ,EAASa;MAE3BD,EAAc1B,QAAQA,KAAO0B,EAActB,SAASA,MAEpDJ,MAAK0B,EAAc1B,MAAMA,IACzBI,MAAMsB,EAActB,OAAOA,IAC/BU,EAASc,aAAaF;IAAAA,GACrB,CAACZ,GAAUd,GAAKI,KAEnBvU,EAAciV,GAAU,QAAShV;MAC/B+U,GAAa,IACTP,KAAQA,EAAOxU,EAAD;IAAA,IAEpBD,EAAciV,GAAU,kBAAkBP,IAC1C1U,EAAciV,GAAU,qBAAqBL,IAC7C5U,EAAciV,GAAU,oBAAoBN,IAG1CrP,kCACEA,gBAACuC,GAADmO;MACEtQ,KAAKyC;MACLnH,IAAIA,KAAM;IAAA,GACN2G,KAELsN,MAAaF,KACZzP,gBAAC2O,EAAqBhK;MAASC,OAAO+K;IAAAA,GACnCrP,GARP;EAAA;ECzNAqQ,IAAe7L;IACnB,MAAMgL,IAAgB/K,EAAW4J;IACjC,KAAKmB,GACH,MAAUtT,WAENsI,IAAgBA,IAAgB,eAAe,iBAA/C;IAKN,OAAOgL;EAAAA;EC8DHc,IAAwB5Q,EAAMG,WAIlC,SAYEC;IAAAA,IAZF;MAEI6E;MACA3E;MACAqG;MACA4D;MACAC;MACAjF;MACAJ;MACAE;MACAjD;IAAAA;IAIF,MAAMuN,IAAWgB,EAAY;MACvB9N,IAAYC,EAAOvI,SAASiE,cAAc;MAE1CiM,IAAkBhF,EAAQ,MAC1B,SAASR,IACAhK,UAAMC,KAAKiI,OAAO8B,EAAS7B,KAAK6B,EAAS5B,OAE3CpI,UAAMC,KAAK2V,UACpB5L,EAAS4J,KACT5J,EAASgK,MACThK,EAASiK,MACTjK,EAAS6J,SAGV,CAED7J,EAAS7B,KAET6B,EAAS5B,KAET4B,EAAS4J,KAET5J,EAASgK,MAEThK,EAASiK,MAETjK,EAAS6J;MAILpE,IAAUjF,EAAQ;QACtB,MAAMkF,IAAqB,IAAI1P,MAAMC,KAAK0P,cAAc;UACtDjE,WAAWA;UACX4D,SAASA;UACTC,SAASA;UACTjF,QAAQA;UACRN,UAAUwF;UACV9E,SAAS9C,EAAUI;QAAAA;QAGrB,OADAJ,EAAUI,QAAQ2C,MAAMC,UAAU,QAC3B8E;MAAAA,GAEN,CAAChE,GAAW4D,GAASC;IAsCxB,OApCA7G,EAAoBvD,GAAK,MAAMsK,GAAS,CAACA,KAEzClQ,EAAgB;MACd,IAAKmV,GAIL,OAFAjF,EAAQ9H,OAAO+M,IAER;QACLjF,EAAQ9H,OAAO,KAAf;MAAA,CACD;IAAA,GAEA,CAAC8H,GAASiF,KAEbnV,EAAgB;MACV4H,KAAUA,EAASsI,EAAD;IAAA,GACrB,CAACA,GAAStI,KAEb5H,EAAgB;MACdkQ,EAAQ1E,YAAYyE;IAAAA,GACnB,CAACC,GAASD,KAEbjQ,EAAgB;MACT+K,KACLmF,EAAQvE,UAAUZ;IAAAA,GACjB,CAACmF,GAASnF,KAEb/K,EAAgB;MACT2K,KACLuF,EAAQzE,YAAYd;IAAAA,GACnB,CAACuF,GAASvF,KAEb3K,EAAgB;MACT6K,KACLqF,EAAQxE,SAASb;IAAAA,GAChB,CAACqF,GAASrF,KAGXxC,EAAUI,QAAQmD,iBAClByE,EAASvE,aAAahG,GAAUuC,EAAUI,QAAQmD,cAAlD;EAAA;ECXA0K,IAAiB9Q,EAAMG,WAI3B,SAmBEC;IAAAA,IAnBF;MAEI6H;MACAhD;MACA3E;MACA6E;MACAwB;MACAuB;MACA1G;MACAG;MACAC;MACAuG;MACAC;MACAhG;MACAiG;MACAhD;MACAiD;MACA/C;IAAAA;IAIF,MAAMoK,IAAWgB,EAAY;MAEvB7H,IAAcrD,EAAQ;QAAK;QAC/B,OACEwC,KACA,IAAIhN,MAAMC,KAAK6N,YACbd,EAAMxJ,KACN,IAAIxD,MAAMC,KAAK8N,KAAKf,EAAMgB,KAAKC,OAAOjB,EAAMgB,KAAKE,SACjD;UACEC,KAAG,SAAEnB,MAAM1L,gBAAR,IAAE8M,EAAeD;UACpBE,QAAM,aAAErB,EAAM1L,gBAAR,IAAEwU,EAAezH;UACvBC,SACE,eAAMhN,gBAAN,MAAegN,WACf,IAAItO,MAAMC,KAAKuO,MACb,eAAMlN,gBAAN,MAAegN,OAAOhG,GACtB,eAAMhH,gBAAN,MAAegN,OAAO/F;UAE1BmG,OAAK,aAAE1B,EAAM1L,gBAAR,IAAEqN,EAAeD;UACtBE,eACE,eAAMtN,gBAAN,MAAesN,iBACf,IAAI5O,MAAMC,KAAKuO,MACb,eAAMlN,gBAAN,MAAesN,aAAatG,GAC5B,eAAMhH,gBAAN,MAAesN,aAAarG;UAEhCwG,aACiBA,SAAf/B,MAAM1L,gBAASyN,qBACf,IAAI/O,MAAMC,KAAK8N,KAAf,aACEf,EAAM1L,gBADR,IACEyU,EAAehH,WAAWd,OAD5B,aAEEjB,EAAM1L,gBAFR,IAEE2N,EAAeF,WAAWb;QAAAA,EAvBlC;MAAA,GA4BD,CAAClB;MAEEkC,IAAiB1E,EAAQ,MACzB,SAASR,IACJ,IAAIhK,MAAMC,KAAKiI,OAAO8B,EAAS7B,KAAK6B,EAAS5B,OAElD,OAAO4B,IACEhK,UAAMC,KAAKoI,OAAO2B,EAAS1B,GAAG0B,EAASzB,GAAGM,aAEhD,IAAI7I,MAAMC,KAAK2V,UACpB5L,EAAS4J,KACT5J,EAASgK,MACThK,EAASiK,MACTjK,EAAS6J,SAIV,CAED7J,EAAS7B,KAET6B,EAAS5B,KAET4B,EAAS1B,GAET0B,EAASzB,GAETyB,EAAS4J,KAET5J,EAASgK,MAEThK,EAASiK,MAETjK,uBAAU6J;IAIZ,OACE9O,gBAACgI,GAAM;MACLrF,KAAKgN;MACL1K,UAAUkF;MACVlC,OAAOa;MACP3D,UAAUA;MACVwB,WAAWA;MACXuB,mBAAmBA;MACnB1G,SAASA;MACTG,WAAWA;MACXC,aAAaA;MACbuG,YAAYA;MACZC,aAAaA;MACbhG,UAAUA;MACViG,SAASA;MACThD,OAAOA;MACPiD,OAAOA;MACP/C,QAAQA;MACRnF,KAAKA;IAAAA,GAEJE,EAnBH;EAAA;ECrMA2Q,IAAqBjR,EAAMG,WAI/B,SAWEC;IAAAA,IAXF;MAEI6E;MACA3E;MACA6E;MACAC;MACAC;MACAC;MACAC;MACAnD;IAAAA;IAIF,MAAMuN,IAAWgB,EAAY;MACvBtG,IAAe5E,EAAQ,MACvB,SAASR,QACAhK,MAAMC,KAAKiI,OAAO8B,EAAS7B,KAAK6B,EAAS5B,WAE3CpI,MAAMC,KAAK2V,UACpB5L,EAAS4J,KACT5J,EAASgK,MACThK,EAASiK,MACTjK,EAAS6J,SAGV,CAED7J,EAAS7B,KAET6B,EAAS5B,KAET4B,EAAS4J,KAET5J,EAASgK,MAEThK,EAASiK,MAETjK,EAAS6J;IAIX,OACE9O,EAACxB;MACC2G,UAAUA;MACVC,gBAAgBA;MAChBC,OAAOA;MACPC,WAAWA;MACXC,QAAQA;MACR5C,KAAKgN;MACL1K,UAAUoF;MACVjI,UAAUA;MACVhC,KAAKA;IAAAA,GAEJE,EAXH;EAAA;ECxGO4Q,IACXlR,EAAMC,mBACJjF;AA4FJ,SAASmW,EACPxW,GACAC,GASAC;EAIAL,EAAgB;IACTG,KAAWE,KAQhBF,EAAOS,YAAYR,GANE;MAAA,mCAAIG;QAAAA;MAAAA;MAAAA,YACXC,MAARD,IAA0BF,EAASF,KAC3BE,EAASF,MAAWI;IAAAA;EAAAA,GAKjC,CAACF,GAAUF,GAAQC,GACvB;AAAA;AA8GKwW,UAAiBpR,EAAMG,WAAW,kBAwBtCC;IAAAA,IAxBsC;MAGtCiR,cACEA;MADFC,eAEEA;MAFFC,gBAGEA;MAHFC,eAIEA;MAJFC,gBAKEA;MALFC,iBAMEA;MANFC,kBAOEA;MAPFC,aAQEA;MARFC,cASEA;MATFC,UAUEA;MAVFC,aAWEA;MAXFC,QAYEA;MAZFC,WAaEA;MAbFC,YAcEA;MAdFC,UAeEA;MAfF7D,UAgBEA;MAhBF8D,gBAiBEA;MAjBFhQ,UAkBEA;MAlBF9B,UAmBEA;IAAAA;IAIF,MAAMqC,IAAMkC,EAAO;MAEbwN,IAAiB5M,EACrB;QACE,IAAKnL,OAAOW,MAAMC,KAAKoX,SAOvB,WAAWrX,MAAMC,KAAKoX,QAAQlB,eAAe;UAE3CzO;UACAiP;UACAC;UACAR;UACAC;UACAC;UACAC;UACAC;UACAC;UACAC;QAAAA;QAjBAzT,QAAQC,KACN,wFAKG;MAAA,GAeT;IAiBF,OAfAwF,EAAoBvD,GAAK,MAAMiS,GAAiB,CAACA,KAEjD7X,EAAgB;MACd6X,KAAkBjQ,KAAYA,EAASiQ;IAAAA,GACtC,CAACA,GAAgBjQ,KAEpB+O,EAAuBkB,GAAgB,UAAUP,IACjDX,EAAuBkB,GAAgB,aAAaN,IACpDZ,EAAuBkB,GAAgB,QAAQL,IAC/Cb,EAAuBkB,GAAgB,WAAWJ,IAClDd,EAAuBkB,GAAgB,YAAYH,IACnDf,EAAuBkB,GAAgB,UAAUF,IACjDhB,EAAuBkB,GAAgB,UAAU/D,IACjD6C,EAAuBkB,GAAgB,iBAAiBD,IAEnDC,IAGHrS,gBAACkR,EAAsBvM,UAAQ;MAACC,OAAOyN;IAAAA,GACpC/R,SAGN;EAAA;ECrSKiS,IAAUvS,EAAMG,WAAW,kBAE/BC;IAAAA,IAF+B;MAC/B6E,UAAEA;IAAAA;IAGFA,IAAWA,KAAYhK,MAAMC,KAAK6P,gBAAgByH;IAElD,MAAM7P,IAAMkC,EAAO;MACb4N,IAAiB1N,EAAWmM;IAElC,KAAKuB,GACH,MAAM,IAAIjW,MAAM;IAGlB,MAAMkW,IAAUjN,EACd,MACE,IAAIxK,MAAMC,KAAKoX,QAAQC,QAAQ;MAC7BF,gBAAgBI;IAAAA,IAEpB,CAACA;IAYH,OAVA9O,EAAoBvD,GAAK,MAAMsS,GAAS,CAACA,KAEzClY,EAAgB;MACd,MAAMmY,IAAUD,EAAQE;MAExB,OADAjQ,EAAIuI,WAAWyH,GAAS1N,IACjB;QACLtC,EAAIwI,cAAcwH,EAAlB;MAAA,CACD;IAAA,GACA,CAAChQ,GAAK+P,GAASzN,KAGnB;EAAA;ECsBK4N,IAAY7S,EAAMG,WACtB,SAWEC;IAAAA,IAXF;MAEI1E,QAAK;MACLkK;MACAkN;MACAvS;MACA2E;MACAnE;MACAG;MACAkB;IAAAA;IAIF,OAAOO,GAAKC,KAAUF;MAChBG,IAAYC,EAAuB;IAqEzC,OAnEAzI,EAA0B;MACxB,KAAKC,OAAOW,OAIV,YAHAiD,QAAQC,KACN;MAKJ,MAAM4U,IAAelQ,EAAUI;MAC1B8P,KAEL9X,MAAMC,KAAKmC,KAAK;QACd,MAAM2V,IACAjG,MAAMkG,QAAQ/N,KACTA,EAAOvC,IAAKuQ,WAEZA,GADL;YAEEjO,UAAU,IAAIhK,MAAMC,KAAKiI,OACvB+P,EAAGjO,SAAS7B,KACZ8P,EAAGjO,SAAS5B;UAAAA,MAKE,mBAAX6B,KACHA,EAAOD,WACXyL,MACKxL,GADL;YAEED,UAAU,IAAIhK,MAAMC,KAAKiI,OACvB+B,EAAOD,SAAS7B,KAChB8B,EAAOD,SAAS5B;UAAAA,KAMjB6B;UAEHiO,IAAiB,IAAIlY,MAAMC,KAAK2X,UAAUE,GAAc;YAC5DxS,QAAQ,IAAItF,MAAMC,KAAKiI,OAAO5C,EAAO6C,KAAK7C,EAAO8C;YACjDtC;YACAG;YACAgE,QAAQ8N;UAAAA;QAGVpQ,EAAOuQ;MAAAA,EAlCT;IAAA,GAoCC,CAACzW,KAAKD,UAAUyI,MAEnBvB,EAAoBvD,GAAK,MAAMuC,GAAM,CAACA,KAEtCtI,EAA0B;MACpBsI,KAAKA,EAAIuB,UAAU,IAAIjJ,MAAMC,KAAKiI,OAAO5C,EAAO6C,KAAK7C,EAAO8C,KACjE;IAAA,GAAE,CAACV,GAAKpC,EAAO6C,KAAK7C,EAAO8C,OAE5BhJ,EAA0B;MACpBsI,KAAO5B,KAAO4B,EAAI2B,SAASvD,EAAb;IAAA,GACjB,CAAC4B,GAAK5B,KAET1G,EAA0B;MACpBsI,KAAOzB,KAAWyB,EAAI4B,aAAarD;IAAAA,GACtC,CAACyB,GAAKzB,KAET7G,EAA0B;MACpBsI,KAAOP,KAAUA,EAASO,EAAD;IAAA,GAC5B,CAACA,GAAKP,KAGPpC,EAAKxB;MAAA9C,IAAIA;MAAIkK,OAAOA;MAAOkN,WAAWA;MAAW1S,KAAKyC;IAAAA,EAAtD;EAAA;ECxJAuQ,IAAwB7W;IAC5B,OAAO8W,GAAOC,KAAY5Q,EAGvB;QACDxG,UAAS;QACTuB,YAAOzC;MAAAA;MAGHuY,IAAS9N,EACb,MAAM,IAAIlK,EAAOgB,IAEjB,CAACG,KAAKD,UAAUF;IAoBlB,OAjBA9B,EAAU;MACR8Y,EACGlW,OACA0F,KAAK,MACJuQ,EAAS;QACPpX,UAAS;QACTuB,YAAOzC;MAAAA,IAGVwY,MAAO/V,KACN6V,EAAS;QACPpX,UAAS;QACTuB,OAAOA;MAAAA,GAXb;IAAA,GAcC,CAAC8V,KAEGF;EAAAA;AAAAA","names":["useIsomorphicLayoutEffect","window","document","useLayoutEffect","useEffect","useKakaoEvent","target","type","callback","wrapCallback","arg","undefined","kakao","maps","event","addListener","removeListener","LoaderStatus","Loader","constructor","appkey","id","libraries","nonce","retries","url","this","callbacks","done","loading","errors","onerrorEvent","instance","equalOptions","options","Error","stringify","JSON","static","Promise","resolve","status","FAILURE","INITIALIZED","LOADING","loadcheckcallbacks","push","e","load","reject","loadCallback","err","error","SUCCESS","failed","length","fn","execute","resetIfRetryingFailed","reset","deleteScript","console","warn","setScript","getElementById","createUrl","script","createElement","src","onerror","loadErrorCallback","bind","onload","defer","async","head","appendChild","source","lineno","colno","delay","log","setTimeout","join","remove","forEach","cb","a","b","i","KakaoMapContext","React","createContext","Map","forwardRef","ref","as","children","center","isPanto","padding","disableDoubleClick","disableDoubleClickZoom","draggable","zoomable","keyboardShortcuts","level","maxLevel","minLevel","mapTypeId","projectionId","scrollwheel","tileAnimation","onBoundsChanged","onCenterChanged","onClick","onDoubleClick","onDrag","onDragEnd","onDragStart","onIdle","onMaptypeidChanged","onMouseMove","onRightClick","onTileLoaded","onZoomChanged","onZoomStart","onCreate","props","_objectWithoutPropertiesLoose","Container","isLoaded","setIsLoaded","useState","map","setMap","container","useRef","then","MapContainer","current","initalMapCenter","LatLng","lat","lng","Coords","x","y","kakaoMap","innerHTML","useImperativeHandle","prevCenter","getCenter","toLatLng","centerPosition","equals","panTo","setCenter","setDraggable","setZoomable","setKeyboardShortcuts","setLevel","setMapTypeId","setProjectionId","setMaxLevel","setMinLevel","Provider","value","useMap","componentName","useContext","InfoWindow","position","marker","altitude","disableAutoPan","range","removable","zIndex","infoWindow","useMemo","kakaoInfoWindow","content","style","display","open","close","setPosition","setAltitude","setRange","setZIndex","parentElement","ReactDom","createPortal","KakaoMapMarkerClustererContext","MarkerClusterer","averageCenter","calculator","clickable","disableClickZoom","gridSize","hoverable","minClusterSize","styles","texts","onClusterclick","onClusterdblclick","onClustered","onClusterout","onClusterover","onClusterrightclick","markerCluster","setGridSize","redraw","setMinClusterSize","setAverageCenter","setTexts","setCalculator","setStyles","Marker","image","infoWindowOptions","onMouseOut","onMouseOver","opacity","title","addMarker","removeMarker","setImage","setClickable","setOpacity","setTitle","MapMarker","markerImage","MarkerImage","Size","size","width","height","alt","_image$options","coords","offset","_image$options3","Point","_image$options4","shape","_image$options6","spriteOrigin","_image$options8","_image$options9","spriteSize","_image$options10","_image$options12","markerPosition","MapInfoWindow","infoPosition","CustomOverlayMap","xAnchor","yAnchor","overlayPosition","overlay","KakaoCustomOverlay","CustomOverlay","ReactDOM","MapTypeControl","ControlPosition","TOPRIGHT","mapTypeControl","addControl","removeControl","ZoomControl","RIGHT","MapTypeId","addOverlayMapTypeId","removeOverlayMapTypeId","Circle","radius","fillColor","fillOpacity","strokeColor","strokeOpacity","strokeStyle","strokeWeight","onMouseover","onMouseout","onMousemove","onMousedown","circleCenter","circle","setRadius","setOptions","Polyline","path","endArrow","polyLinePath","every","v","Array","p","polyline","setPath","Polygon","polygonPath","polygon","Rectangle","bounds","rectangleBounds","LatLngBounds","sw","ne","rectangle","setBounds","Ellipse","rx","ry","ellipseCenter","ellipse","AbstractOverlay","draw","onAdd","onRemove","reactAbstractOverlay","ReactAbstractOveraly","super","_excluded","KakaoRoadviewContext","Roadview","pan","panoId","panoX","panoY","tilt","zoom","onInit","onPanoidChange","onPositionChanged","onViewpointChange","onErrorGetNearestPanoId","_ref","isLoading","setIsLoading","roadview","setRoadview","RoadviewContainer","kakaoRoadview","getPosition","getLat","getLng","newPostion","RoadviewClient","getNearestPanoId","setPanoId","getPanoId","prevViewpoint","getViewpoint","setViewpoint","_extends","useRoadview","CustomOverlayRoadview","Viewpoint","RoadviewMarker","_image$options2","_image$options11","RoadviewInfoWindow","DrawingManagerContext","useDrawingManagerEvent","DrawingManager","arrowOptions","circleOptions","ellipseOptions","markerOptions","polygonOptions","polylineOptions","rectangleOptions","drawingMode","guideTooltip","onSelect","onDrawstart","onDraw","onDrawend","onDrawnext","onCancle","onStateChanged","drawingManager","drawing","Toolbox","TOP","drawingmanager","toolbox","element","getElement","StaticMap","className","mapContainer","_marker","isArray","mk","kakaoStaticMap","useInjectKakaoMapApi","state","setState","loader","catch"],"sources":["/Users/sonyl/Documents/GitHub/nokidszone/node_modules/react-kakao-maps-sdk/src/hooks/useIsomorphicLayoutEffect.tsx","/Users/sonyl/Documents/GitHub/nokidszone/node_modules/react-kakao-maps-sdk/src/hooks/useKakaoEvent.tsx","/Users/sonyl/Documents/GitHub/nokidszone/node_modules/react-kakao-maps-sdk/src/util/kakaoMapApiLoader.ts","/Users/sonyl/Documents/GitHub/nokidszone/node_modules/react-kakao-maps-sdk/src/components/Map.tsx","/Users/sonyl/Documents/GitHub/nokidszone/node_modules/react-kakao-maps-sdk/src/hooks/useMap.tsx","/Users/sonyl/Documents/GitHub/nokidszone/node_modules/react-kakao-maps-sdk/src/components/InfoWindow.tsx","/Users/sonyl/Documents/GitHub/nokidszone/node_modules/react-kakao-maps-sdk/src/components/MarkerClusterer.tsx","/Users/sonyl/Documents/GitHub/nokidszone/node_modules/react-kakao-maps-sdk/src/components/Marker.tsx","/Users/sonyl/Documents/GitHub/nokidszone/node_modules/react-kakao-maps-sdk/src/components/MapMarker.tsx","/Users/sonyl/Documents/GitHub/nokidszone/node_modules/react-kakao-maps-sdk/src/components/MapInfoWindow.tsx","/Users/sonyl/Documents/GitHub/nokidszone/node_modules/react-kakao-maps-sdk/src/components/CustomOverlayMap.tsx","/Users/sonyl/Documents/GitHub/nokidszone/node_modules/react-kakao-maps-sdk/src/components/MapTypeControl.tsx","/Users/sonyl/Documents/GitHub/nokidszone/node_modules/react-kakao-maps-sdk/src/components/ZoomControl.tsx","/Users/sonyl/Documents/GitHub/nokidszone/node_modules/react-kakao-maps-sdk/src/components/MapTypeId.tsx","/Users/sonyl/Documents/GitHub/nokidszone/node_modules/react-kakao-maps-sdk/src/components/Circle.tsx","/Users/sonyl/Documents/GitHub/nokidszone/node_modules/react-kakao-maps-sdk/src/components/Polyline.tsx","/Users/sonyl/Documents/GitHub/nokidszone/node_modules/react-kakao-maps-sdk/src/components/Polygon.tsx","/Users/sonyl/Documents/GitHub/nokidszone/node_modules/react-kakao-maps-sdk/src/components/Rectangle.tsx","/Users/sonyl/Documents/GitHub/nokidszone/node_modules/react-kakao-maps-sdk/src/components/Ellipse.tsx","/Users/sonyl/Documents/GitHub/nokidszone/node_modules/react-kakao-maps-sdk/src/components/AbstractOverlay.tsx","/Users/sonyl/Documents/GitHub/nokidszone/node_modules/react-kakao-maps-sdk/src/components/Roadview.tsx","/Users/sonyl/Documents/GitHub/nokidszone/node_modules/react-kakao-maps-sdk/src/hooks/useRoadview.tsx","/Users/sonyl/Documents/GitHub/nokidszone/node_modules/react-kakao-maps-sdk/src/components/CustomOverlayRoadview.tsx","/Users/sonyl/Documents/GitHub/nokidszone/node_modules/react-kakao-maps-sdk/src/components/RoadviewMarker.tsx","/Users/sonyl/Documents/GitHub/nokidszone/node_modules/react-kakao-maps-sdk/src/components/RoadviewInfoWindow.tsx","/Users/sonyl/Documents/GitHub/nokidszone/node_modules/react-kakao-maps-sdk/src/components/DrawingManager.tsx","/Users/sonyl/Documents/GitHub/nokidszone/node_modules/react-kakao-maps-sdk/src/components/Toolbox.tsx","/Users/sonyl/Documents/GitHub/nokidszone/node_modules/react-kakao-maps-sdk/src/components/StaticMap.tsx","/Users/sonyl/Documents/GitHub/nokidszone/node_modules/react-kakao-maps-sdk/src/hooks/useInjectKakaoMapApi.tsx"],"sourcesContent":["import { useEffect, useLayoutEffect } from \"react\"\n\nconst useIsomorphicLayoutEffect =\n  typeof window !== \"undefined\" && typeof document !== \"undefined\"\n    ? useLayoutEffect\n    : useEffect\n\nexport default useIsomorphicLayoutEffect\n","import useIsomorphicLayoutEffect from \"./useIsomorphicLayoutEffect\"\n\nconst useKakaoEvent = <T extends kakao.maps.event.EventTarget>(\n  /**\n   * 이벤트 타겟\n   */\n  target: T | undefined,\n  /**\n   * event 타입\n   */\n  type: string,\n  /**\n   * 호출될 callback\n   */\n  callback: ((target: T, ...args: any[]) => void) | undefined\n) => {\n  useIsomorphicLayoutEffect(() => {\n    if (!target || !callback) return\n\n    const wrapCallback = (...arg: any[]) => {\n      if (arg === undefined) return callback(target)\n      else return callback(target, ...arg)\n    }\n\n    kakao.maps.event.addListener(target, type, wrapCallback)\n\n    return () => {\n      kakao.maps.event.removeListener(target, type, wrapCallback)\n    }\n  }, [target, type, callback])\n}\n\nexport default useKakaoEvent\n","export type Libraries = (\"services\" | \"clusterer\" | \"drawing\")[]\n\nexport interface LoaderOptions {\n  /**\n   * script 객체 생성시 사용자 정의 id\n   */\n  id?: string\n  /**\n   * 발급 받은 Kakao 지도 Javscript API 키.\n   *\n   * @see [준비하기](https://apis.map.kakao.com/web/guide/#ready)\n   */\n  appkey: string\n  /**\n   * 사용하는 라이브러리 목록\n   *\n   * Kakao 지도 Javascript API 는 지도와 함께 사용할 수 있는 라이브러리 를 지원하고 있습니다.\n   * 라이브러리는 javascript API와 관련되어 있지만 조금 특화된 기능을 묶어둔 것을 말합니다. 이 기능은 추가로 불러와서 사용할 수 있도록 되어있습니다.\n   * 현재 사용할 수 있는 라이브러리는 다음과 같습니다.\n   *\n   * clusterer: 마커를 클러스터링 할 수 있는 클러스터러 라이브러리 입니다.\n   * services: 장소 검색 과 주소-좌표 변환 을 할 수 있는 services 라이브러리 입니다.\n   * drawing: 지도 위에 마커와 그래픽스 객체를 쉽게 그릴 수 있게 그리기 모드를 지원하는 drawing 라이브러리 입니다.\n   * 라이브러리는 계속해서 추가될 예정입니다.\n   */\n  libraries?: Libraries\n  /**\n   * 사용자 정의 Kakao 지도 javascript 경로 지정\n   *\n   * @default \"//dapi.kakao.com/v2/maps/sdk.js\"\n   */\n  url?: string\n  /**\n   * 보안을 위한 nonce 값 설정\n   */\n  nonce?: string\n  /**\n   * 스크립트 로드 재시도 횟수\n   */\n  retries?: number\n}\n\nexport enum LoaderStatus {\n  INITIALIZED,\n  LOADING,\n  SUCCESS,\n  FAILURE,\n}\n\nconst DEFAULT_ID = \"__reactKakaoMapsSdkloaderId\"\n\n/**\n * Kakao Map Api Loader\n *\n * `new Loader(options).load()` 함수를 이용하여 Api를 비동기적으로 삽입할 수 있습니다.\n *\n * 해당 Loader를 이용시 `react-kakao-maps-sdk` 내부에서 injection 되는 이벤트를 감지하여 kakao map api 로딩 이후에 렌더링을 진행합니다.\n */\nexport class Loader {\n  private static instance: Loader\n  private static loadcheckcallbacks: ((e?: ErrorEvent) => void)[] = []\n\n  public readonly id: string\n  public readonly appkey: string\n  public readonly url: string\n  public readonly libraries: Libraries\n  public readonly nonce: string | undefined\n  public readonly retries: number\n\n  private callbacks: ((e?: ErrorEvent) => void)[] = []\n  private done = false\n  private loading = false\n  private errors: ErrorEvent[] = []\n  private onerrorEvent: ErrorEvent | undefined\n\n  constructor({\n    appkey,\n    id = DEFAULT_ID,\n    libraries = [],\n    nonce,\n    retries = 3,\n    url = \"//dapi.kakao.com/v2/maps/sdk.js\",\n  }: LoaderOptions) {\n    this.id = id\n    this.appkey = appkey\n    this.libraries = libraries\n    this.nonce = nonce\n    this.retries = retries\n    this.url = url\n\n    if (Loader.instance) {\n      if (!Loader.equalOptions(this.options, Loader.instance.options)) {\n        throw new Error(\n          `Loader must not be called again with different options. ${JSON.stringify(\n            this.options\n          )} !== ${JSON.stringify(Loader.instance.options)}`\n        )\n      }\n\n      return Loader.instance\n    }\n    Loader.instance = this\n  }\n\n  public get options() {\n    return {\n      appkey: this.appkey,\n      id: this.id,\n      libraries: this.libraries,\n      nonce: this.nonce,\n      retries: this.retries,\n      url: this.url,\n    }\n  }\n\n  public static isLoaded(): Promise<boolean> {\n    return new Promise((resolve) => {\n      if (!Loader.instance) {\n        if (window.kakao && window.kakao.maps) {\n          return window.kakao.maps.load(() => {\n            resolve(true)\n          })\n        }\n        return Loader.loadcheckcallbacks.push((e) => {\n          resolve(!e)\n        })\n      }\n\n      if (\n        Loader.instance.status === LoaderStatus.FAILURE ||\n        Loader.instance.status === LoaderStatus.INITIALIZED\n      ) {\n        return resolve(false)\n      }\n\n      if (Loader.instance.status === LoaderStatus.LOADING) {\n        Loader.loadcheckcallbacks.push((e) => resolve(!e))\n      }\n\n      return resolve(true)\n    })\n  }\n\n  public load(): Promise<typeof kakao> {\n    return new Promise((resolve, reject) => {\n      this.loadCallback((err?: ErrorEvent) => {\n        if (!err) {\n          resolve(window.kakao)\n        } else {\n          reject(err.error)\n        }\n      })\n    })\n  }\n\n  public get status(): LoaderStatus {\n    if (this.onerrorEvent) {\n      return LoaderStatus.FAILURE\n    }\n    if (this.done) {\n      return LoaderStatus.SUCCESS\n    }\n    if (this.loading) {\n      return LoaderStatus.LOADING\n    }\n    return LoaderStatus.INITIALIZED\n  }\n\n  private get failed(): boolean {\n    return this.done && !this.loading && this.errors.length >= this.retries + 1\n  }\n\n  private loadCallback(fn: (e?: ErrorEvent) => void): void {\n    this.callbacks.push(fn)\n    this.execute()\n  }\n\n  private resetIfRetryingFailed(): void {\n    if (this.failed) {\n      this.reset()\n    }\n  }\n\n  private reset(): void {\n    this.deleteScript()\n    this.done = false\n    this.loading = false\n    this.errors = []\n    this.onerrorEvent = undefined\n  }\n\n  private execute() {\n    this.resetIfRetryingFailed()\n\n    if (this.done) {\n      this.callback()\n    } else {\n      if (window.kakao && window.kakao.maps) {\n        console.warn(\n          \"Kakao Maps이 이미 외부 요소에 의해 로딩되어 있습니다.\" +\n            \"설정한 옵션과 일치 하지 않을 수 있으며, 이에 따른 예상치 동작이 발생할 수 있습니다.\"\n        )\n        this.callback()\n        return\n      }\n\n      if (!this.loading) {\n        this.loading = true\n        this.setScript()\n      }\n    }\n  }\n\n  private setScript() {\n    if (document.getElementById(this.id)) {\n      this.callback()\n    }\n\n    const url = this.createUrl()\n    const script = document.createElement(\"script\")\n\n    script.id = this.id\n    script.type = \"text/javascript\"\n    script.src = url\n    script.onerror = this.loadErrorCallback.bind(this)\n    script.onload = this.callback.bind(this)\n    script.defer = true\n    script.async = true\n\n    if (this.nonce) {\n      script.nonce = this.nonce\n    }\n\n    document.head.appendChild(script)\n  }\n\n  private loadErrorCallback(\n    event: Event | string,\n    source?: string,\n    lineno?: number,\n    colno?: number,\n    error?: Error\n  ): void {\n    this.errors.push({\n      event,\n      source,\n      // @ts-ignore\n      lineno,\n      // @ts-ignore\n      colno,\n      error,\n    })\n\n    if (this.errors.length <= this.retries) {\n      const delay = this.errors.length * 2 ** this.errors.length\n\n      console.log(`Failed to load Kakao Maps script, retrying in ${delay} ms.`)\n\n      setTimeout(() => {\n        this.deleteScript()\n        this.setScript()\n      }, delay)\n    } else {\n      this.onerrorEvent = this.errors[this.errors.length - 1]\n      this.callback()\n    }\n  }\n\n  public createUrl(): string {\n    let url = this.url\n    url += `?appkey=${this.appkey}`\n\n    if (this.libraries.length) {\n      url += `&libraries=${this.libraries.join(\",\")}`\n    }\n\n    url += `&autoload=false`\n\n    return url\n  }\n\n  private deleteScript() {\n    const script = document.getElementById(this.id)\n    if (script) {\n      script.remove()\n    }\n  }\n\n  private callback() {\n    kakao.maps.load(() => {\n      this.done = true\n      this.loading = false\n\n      this.callbacks.forEach((cb) => {\n        cb(this.onerrorEvent)\n      })\n      this.callbacks = []\n\n      Loader.loadcheckcallbacks.forEach((cb) => {\n        cb(this.onerrorEvent)\n      })\n      Loader.loadcheckcallbacks = []\n    })\n  }\n\n  private static equalOptions(\n    a: typeof Loader.prototype.options,\n    b: typeof Loader.prototype.options\n  ): boolean {\n    if (a.appkey !== b.appkey) return false\n    if (a.id !== b.id) return false\n\n    if (a.libraries.length !== b.libraries.length) return false\n    for (let i = 0; i < a.libraries.length; ++i) {\n      if (a.libraries[i] !== b.libraries[i]) return false\n    }\n    if (a.nonce !== b.nonce) return false\n    if (a.retries !== b.retries) return false\n    if (a.url !== b.url) return false\n    return true\n  }\n}\n","import React, { useRef, useState, useImperativeHandle } from \"react\"\nimport useIsomorphicLayoutEffect from \"../hooks/useIsomorphicLayoutEffect\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport { PolymorphicComponentPropsWithOutRef } from \"../types\"\nimport { Loader } from \"../util/kakaoMapApiLoader\"\n\nexport const KakaoMapContext = React.createContext<kakao.maps.Map>(\n  undefined as unknown as kakao.maps.Map\n)\n\nexport type MapProps = {\n  /**\n   * 중심으로 설정할 위치 입니다.\n   */\n  center:\n    | {\n        lat: number\n        lng: number\n      }\n    | {\n        x: number\n        y: number\n      }\n\n  /**\n   * 중심을 이동시킬때 Panto를 사용할지 정합니다.\n   * @default false\n   */\n  isPanto?: boolean\n\n  /**\n   * 중심 좌표를 지정한 좌표 또는 영역으로 부드럽게 이동한다. 필요하면 확대 또는 축소도 수행한다.\n   * 만약 이동할 거리가 지도 화면의 크기보다 클 경우 애니메이션 없이 이동한다.\n   * padding 만큼 제외하고 영역을 계산하며, padding 을 지정하지 않으면 기본값으로 32가 사용된다.\n   */\n  padding?: number\n\n  /**\n   * 확대 수준 (기본값: 3)\n   */\n  level?: number\n\n  /**\n   * 최대 확대 수준\n   */\n  maxLevel?: number\n\n  /**\n   * 최소 확대 수준\n   */\n  minLevel?: number\n\n  /**\n   * 지도 종류 (기본값: 일반 지도)\n   */\n  mapTypeId?: kakao.maps.MapTypeId\n\n  /**\n   * 마우스 드래그, 휠, 모바일 터치를 이용한 시점 변경(이동, 확대, 축소) 가능 여부\n   */\n  draggable?: boolean\n\n  /**\n   * 마우스 휠이나 멀티터치로 지도 확대, 축소 기능을 막습니다. 상황에 따라 지도 확대, 축소 기능을 제어할 수 있습니다.\n   */\n  zoomable?: boolean\n\n  /**\n   * 마우스 휠, 모바일 터치를 이용한 확대 및 축소 가능 여부\n   */\n  scrollwheel?: boolean\n\n  /**\n   * 더블클릭 이벤트 및 더블클릭 확대 가능 여부\n   */\n  disableDoubleClick?: boolean\n\n  /**\n   * 더블클릭 확대 가능 여부\n   */\n  disableDoubleClickZoom?: boolean\n\n  /**\n   * 투영법 지정 (기본값: kakao.maps.ProjectionId.WCONG)\n   */\n  projectionId?: string\n\n  /**\n   * 지도 타일 애니메이션 설정 여부 (기본값: true)\n   */\n  tileAnimation?: boolean\n\n  /**\n   * 키보드의 방향키와 +, – 키로 지도 이동,확대,축소 가능 여부 (기본값: false)\n   */\n  keyboardShortcuts?:\n    | boolean\n    | {\n        /**\n         * 지도 이동 속도\n         */\n        speed: number\n      }\n\n  /**\n   * map 생성 후 해당 객체를 전달하는 함수\n   */\n  onCreate?: (map: kakao.maps.Map) => void\n\n  /**\n   * 중심 좌표가 변경되면 발생한다.\n   */\n  onCenterChanged?: (target: kakao.maps.Map) => void\n\n  /**\n   * 확대 수준이 변경되기 직전 발생한다.\n   */\n  onZoomStart?: (target: kakao.maps.Map) => void\n\n  /**\n   * 확대 수준이 변경되면 발생한다.\n   */\n  onZoomChanged?: (target: kakao.maps.Map) => void\n\n  /**\n   * 지도 영역이 변경되면 발생한다.\n   */\n  onBoundsChanged?: (target: kakao.maps.Map) => void\n\n  /**\n   * 지도를 클릭하면 발생한다.\n   */\n  onClick?: (\n    target: kakao.maps.Map,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 지도를 더블클릭하면 발생한다.\n   */\n  onDoubleClick?: (\n    target: kakao.maps.Map,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 지도를 마우스 오른쪽 버튼으로 클릭하면 발생한다.\n   */\n  onRightClick?: (\n    target: kakao.maps.Map,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 지도에서 마우스 커서를 이동하면 발생한다.\n   */\n  onMouseMove?: (\n    target: kakao.maps.Map,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 드래그를 시작할 때 발생한다.\n   */\n  onDragStart?: (\n    target: kakao.maps.Map,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 드래그를 하는 동안 발생한다.\n   */\n  onDrag?: (\n    target: kakao.maps.Map,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 드래그가 끝날 때 발생한다.\n   */\n  onDragEnd?: (\n    target: kakao.maps.Map,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 중심 좌표나 확대 수준이 변경되면 발생한다.\n   * 단, 애니메이션 도중에는 발생하지 않는다.\n   */\n  onIdle?: (target: kakao.maps.Map) => void\n\n  /**\n   * 확대수준이 변경되거나 지도가 이동했을때 타일 이미지 로드가 모두 완료되면 발생한다.\n   * 지도이동이 미세하기 일어나 타일 이미지 로드가 일어나지 않은경우 발생하지 않는다.\n   */\n  onTileLoaded?: (target: kakao.maps.Map) => void\n\n  /**\n   * 지도 기본 타일(일반지도, 스카이뷰, 하이브리드)이 변경되면 발생한다.\n   */\n  onMaptypeidChanged?: (target: kakao.maps.Map) => void\n\n  children?: React.ReactNode | undefined\n}\n\ntype MapComponent = <T extends React.ElementType = \"div\">(\n  props: PolymorphicComponentPropsWithOutRef<T, MapProps>\n) => React.ReactElement | null\n\n/**\n * 기본적인 Map 객체를 생성하는 Comeponent 입니다.\n * props로 받는 `on*` 이벤트는 해당 `kakao.maps.Map` 객체를 함께 인자로 전달 합니다.\n *\n * `ref`를 통해 `map` 객체에 직접 접근하여 사용 또는 onCreate 이벤트를 이용하여 접근이 가능합니다.\n *\n * > *주의 사항* `Map`, `RoadView` 컴포넌트에 한하여, ref 객체가 컴포넌트 마운트 시점에 바로 초기화가 안될 수 있습니다.\n * >\n * > 컴포넌트 마운트 시점에 `useEffect` 를 활용하여, 특정 로직을 수행하고 싶은 경우 `ref` 객체를 사용하는 것보다\n * > `onCreate` 이벤트와 `useState`를 함께 활용하여 제어하는 것을 추천 드립니다.\n */\nconst Map: MapComponent = React.forwardRef(\n  <T extends React.ElementType = \"div\">(\n    {\n      id,\n      as,\n      children,\n      center,\n      isPanto = false,\n      padding = 32,\n      disableDoubleClick,\n      disableDoubleClickZoom,\n      draggable,\n      zoomable,\n      keyboardShortcuts,\n      level,\n      maxLevel,\n      minLevel,\n      mapTypeId,\n      projectionId,\n      scrollwheel,\n      tileAnimation,\n      onBoundsChanged,\n      onCenterChanged,\n      onClick,\n      onDoubleClick,\n      onDrag,\n      onDragEnd,\n      onDragStart,\n      onIdle,\n      onMaptypeidChanged,\n      onMouseMove,\n      onRightClick,\n      onTileLoaded,\n      onZoomChanged,\n      onZoomStart,\n      onCreate,\n      ...props\n    }: PolymorphicComponentPropsWithOutRef<T, MapProps>,\n    ref: React.ForwardedRef<kakao.maps.Map>\n  ) => {\n    const Container = as || \"div\"\n    const [isLoaded, setIsLoaded] = useState(false)\n    const [map, setMap] = useState<kakao.maps.Map>()\n    const container = useRef<HTMLDivElement>(null)\n\n    useIsomorphicLayoutEffect(() => {\n      Loader.isLoaded().then(setIsLoaded)\n    }, [])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!isLoaded) return\n\n      const MapContainer = container.current\n\n      if (!MapContainer) {\n        return\n      }\n\n      const initalMapCenter =\n        \"lat\" in center\n          ? new kakao.maps.LatLng(center.lat, center.lng)\n          : new kakao.maps.Coords(center.x, center.y)\n\n      const kakaoMap = new kakao.maps.Map(MapContainer, {\n        center: initalMapCenter,\n        disableDoubleClick: disableDoubleClick,\n        disableDoubleClickZoom: disableDoubleClickZoom,\n        draggable: draggable,\n        keyboardShortcuts: keyboardShortcuts,\n        level: level,\n        mapTypeId: mapTypeId,\n        projectionId: projectionId,\n        scrollwheel: scrollwheel,\n        tileAnimation: tileAnimation,\n      })\n\n      setMap(kakaoMap)\n\n      return () => {\n        MapContainer.innerHTML = \"\"\n      }\n    }, [\n      isLoaded,\n      disableDoubleClick,\n      disableDoubleClickZoom,\n      mapTypeId,\n      tileAnimation,\n    ])\n\n    useImperativeHandle(ref, () => map!, [map])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!map || !onCreate) return\n      onCreate(map)\n    }, [map, onCreate])\n\n    // center position 변경시 map center 변경\n    useIsomorphicLayoutEffect(() => {\n      if (!map) return\n\n      let prevCenter = map.getCenter()\n      if (prevCenter instanceof kakao.maps.Coords) {\n        prevCenter = prevCenter.toLatLng()\n      }\n\n      const centerPosition =\n        \"lat\" in center\n          ? new kakao.maps.LatLng(center.lat, center.lng)\n          : new kakao.maps.Coords(center.x, center.y)\n\n      if (\n        (centerPosition instanceof kakao.maps.LatLng &&\n          centerPosition.equals(prevCenter)) ||\n        (centerPosition instanceof kakao.maps.Coords &&\n          centerPosition.toLatLng().equals(prevCenter))\n      ) {\n        return\n      }\n\n      if (isPanto) {\n        map.panTo(centerPosition, padding)\n      } else {\n        map.setCenter(centerPosition)\n      }\n      // @ts-ignore\n    }, [map, center.lat, center.lng, center.x, center.y])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!map || typeof draggable === \"undefined\") return\n      map.setDraggable(draggable)\n    }, [map, draggable])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!map || typeof zoomable === \"undefined\") return\n      map.setZoomable(zoomable)\n    }, [map, zoomable])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!map || !keyboardShortcuts || typeof keyboardShortcuts !== \"boolean\")\n        return\n      map.setKeyboardShortcuts(keyboardShortcuts)\n    }, [map, keyboardShortcuts])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!map || !level) return\n      map.setLevel(level)\n    }, [map, level])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!map || !mapTypeId) return\n      map.setMapTypeId(mapTypeId)\n    }, [map, mapTypeId])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!map || !projectionId) return\n      map.setProjectionId(projectionId)\n    }, [map, projectionId])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!map || !maxLevel) return\n      map.setMaxLevel(maxLevel)\n    }, [map, maxLevel])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!map || !minLevel) return\n      map.setMinLevel(minLevel)\n    }, [map, minLevel])\n\n    useKakaoEvent(map, \"bounds_changed\", onBoundsChanged)\n    useKakaoEvent(map, \"center_changed\", onCenterChanged)\n    useKakaoEvent(map, \"click\", onClick)\n    useKakaoEvent(map, \"dblclick\", onDoubleClick)\n    useKakaoEvent(map, \"drag\", onDrag)\n    useKakaoEvent(map, \"dragstart\", onDragStart)\n    useKakaoEvent(map, \"dragend\", onDragEnd)\n    useKakaoEvent(map, \"idle\", onIdle)\n    useKakaoEvent(map, \"maptypeid_changed\", onMaptypeidChanged)\n    useKakaoEvent(map, \"mousemove\", onMouseMove)\n    useKakaoEvent(map, \"rightclick\", onRightClick)\n    useKakaoEvent(map, \"tilesloaded\", onTileLoaded)\n    useKakaoEvent(map, \"zoom_changed\", onZoomChanged)\n    useKakaoEvent(map, \"zoom_start\", onZoomStart)\n\n    return (\n      <>\n        <Container\n          id={id || \"react-kakao-maps-sdk-map-container\"}\n          {...props}\n          ref={container}\n        />\n        {map && (\n          <KakaoMapContext.Provider value={map}>\n            {children}\n          </KakaoMapContext.Provider>\n        )}\n      </>\n    )\n  }\n)\n\nexport default Map\n","import { useContext } from \"react\"\nimport { KakaoMapContext } from \"../components/Map\"\n\n/**\n * kakao map 객체를 가져오는 hook 입니다.\n * Map 객체 내부가 아니라면 Error를 발생 시킵니다.\n */\nconst useMap = (componentName?: string) => {\n  const kakaoMap = useContext(KakaoMapContext)\n  if (!kakaoMap) {\n    throw new Error(\n      `${\n        componentName ? componentName + \" Component\" : \"useMap\"\n      } must exist inside Map Component!`\n    )\n  }\n\n  return kakaoMap\n}\n\nexport default useMap\n","import React, {\n  useLayoutEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n} from \"react\"\nimport ReactDom from \"react-dom\"\n\ninterface InfoWindowProps {\n  map: kakao.maps.Map | kakao.maps.Roadview\n  position: kakao.maps.LatLng | kakao.maps.Viewpoint\n  marker?: kakao.maps.Marker\n  /**\n   * 인포윈도우를 열 때 지도가 자동으로 패닝하지 않을지의 여부\n   * @default false\n   */\n  disableAutoPan?: boolean\n\n  /**\n   * 삭제 가능한 인포윈도우\n   */\n  removable?: boolean\n\n  /**\n   * 인포윈도우 엘리먼트의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 로드뷰에 올라있는 인포윈도우의 높이 값(m 단위)\n   */\n  altitude?: number\n\n  /**\n   * 로드뷰 상에서 인포윈도우의 가시반경(m 단위), 두 지점 사이의 거리가 지정한 값보다 멀어지면 인포윈도우는 보이지 않게 된다\n   */\n  range?: number\n\n  /**\n   * 인포윈도우 객체 생성후 해당 객체를 반환하는 함수\n   */\n  onCreate?: (infoWindow: kakao.maps.InfoWindow) => void\n}\n\nconst InfoWindow = React.forwardRef<\n  kakao.maps.InfoWindow,\n  React.PropsWithChildren<InfoWindowProps>\n>(\n  (\n    {\n      map,\n      position,\n      marker,\n      children,\n      altitude,\n      disableAutoPan,\n      range,\n      removable,\n      zIndex,\n      onCreate,\n    },\n    ref\n  ) => {\n    const container = useRef(document.createElement(\"div\"))\n\n    const infoWindow = useMemo(() => {\n      const kakaoInfoWindow = new kakao.maps.InfoWindow({\n        altitude: altitude,\n        disableAutoPan: disableAutoPan,\n        range: range,\n        removable: removable,\n        zIndex: zIndex,\n        content: container.current,\n        position: position,\n      })\n      container.current.style.display = \"none\"\n      return kakaoInfoWindow\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [disableAutoPan, removable])\n\n    useImperativeHandle(ref, () => infoWindow, [infoWindow])\n\n    useLayoutEffect(() => {\n      infoWindow.open(map, marker)\n      return () => {\n        infoWindow.close()\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [map, marker])\n\n    useLayoutEffect(() => {\n      if (onCreate) onCreate(infoWindow)\n    }, [infoWindow, onCreate])\n\n    useLayoutEffect(() => {\n      if (!infoWindow) return\n      infoWindow.setPosition(position)\n    }, [infoWindow, position])\n\n    useLayoutEffect(() => {\n      if (!infoWindow || !altitude) return\n      infoWindow.setAltitude(altitude)\n    }, [infoWindow, altitude])\n\n    useLayoutEffect(() => {\n      if (!infoWindow || !range) return\n      infoWindow.setRange(range)\n    }, [infoWindow, range])\n\n    useLayoutEffect(() => {\n      if (!infoWindow || !zIndex) return\n      infoWindow.setZIndex(zIndex)\n    }, [infoWindow, zIndex])\n\n    return (\n      container.current.parentElement &&\n      ReactDom.createPortal(children, container.current.parentElement)\n    )\n  }\n)\n\nexport default InfoWindow\n","import React, { useLayoutEffect, useImperativeHandle, useMemo } from \"react\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport useMap from \"../hooks/useMap\"\n\nexport const KakaoMapMarkerClustererContext =\n  React.createContext<kakao.maps.MarkerClusterer>(\n    undefined as unknown as kakao.maps.MarkerClusterer\n  )\n\nexport interface MarkerClustererProps {\n  /**\n   * 클러스터의 격자 크기. 화면 픽셀 단위이며 해당 격자 영역 안에 마커가 포함되면 클러스터에 포함시킨다\n   * @default 60\n   */\n  gridSize?: number\n  /**\n   * 마커들의 좌표 평균을 클러스터 좌표 설정 여부\n   * @default false\n   */\n  averageCenter?: boolean\n  /**\n   * 클러스터링 할 지도의 최소 레벨 값. 지정한 숫자에 해당하는 레벨 미만에서는 클러스터링 하지 않는다\n   * @default 0\n   */\n  minLevel?: number\n  /**\n   * 클러스터링 할 최소 마커 수\n   * @default 2\n   */\n  minClusterSize?: number\n  /**\n   * 클러스터의 스타일. 여러개를 선언하면 calculator 로 구분된 사이즈 구간마다 서로 다른 스타일을 적용시킬 수 있다\n   */\n  styles?: React.CSSProperties[] | object[]\n  /**\n   * 클러스터에 표시할 문자열 또는 문자열 생성 함수.\n   * @default \"클러스터에 포함된 숫자\"\n   */\n  texts?: string[] | ((size: number) => string)\n  /**\n   * 클러스터 크기를 구분하는 값을 가진 배열 또는 구분값 생성함수\n   * @default [10, 100, 1000, 10000]\n   */\n  calculator?: number[] | ((size: number) => number[])\n  /**\n   * 클러스터 클릭 시 지도 확대 여부. true로 설정하면 클러스터 클릭 시 확대 되지 않는다\n   * @default false\n   */\n  disableClickZoom?: boolean\n  /**\n   * 클러스터 클릭 가능 여부 지정 옵션. false일 경우 클러스터의 clusterclick, clusterdblclick, clusterrightclick 이벤트가 발생하지 않으며, 커서가 변경되지 않는다.\n   * @default true\n   */\n  clickable?: boolean\n  /**\n   * 클러스터에 마우스 over/out 가능 여부 지정 옵션. false일 경우 클러스터의 clusterover, clusterout 이벤트가 발생하지 않는다.\n   * @default true\n   */\n  hoverable?: boolean\n\n  /**\n   * 클러스터 마커를 클릭 했을 때 발생한다.\n   * 이벤트 핸들러 함수 인자로는 Cluster 객체가 넘어온다.\n   * 클러스터 마커 클릭 시 지도가 줌인 되는 경우 원하는 Cluster 객체를 얻지 못할 수도 있다.\n   * 때문에 MarkerClusterer 를 생성할 때 disableClickZoom 옵션을 true로 설정하여\n   * 클러스터 마커를 클릭했을 때 지도가 줌인되지 않도록 설정 후 사용한다.\n   */\n  onClusterclick?: (\n    target: kakao.maps.MarkerClusterer,\n    cluster: kakao.maps.Cluster\n  ) => void\n  /**\n   * 클러스터 마커를 마우스 오버 했을 때 발생한다\n   * 이벤트 핸들러 함수 인자로는 마우스 오버한 Cluster 객체가 넘어온다.\n   */\n  onClusterover?: (\n    target: kakao.maps.MarkerClusterer,\n    cluster: kakao.maps.Cluster\n  ) => void\n  /**\n   * 클러스터 마커를 마우스 아웃 했을 때 발생한다\n   * 이벤트 핸들러 함수 인자로는 마우스 아웃된 Cluster 객체가 넘어온다.\n   */\n  onClusterout?: (\n    target: kakao.maps.MarkerClusterer,\n    cluster: kakao.maps.Cluster\n  ) => void\n  /**\n   * 클러스터 마커를 더블클릭 했을 때 발생한다\n   * 이벤트 핸들러 함수 인자로는 더블클릭한 Cluster 객체가 넘어온다.\n   * MarkerClusterer 를 생성할 때 disableClickZoom 옵션을 true로 설정해야만 이벤트가 발생한다.\n   */\n  onClusterdblclick?: (\n    target: kakao.maps.MarkerClusterer,\n    cluster: kakao.maps.Cluster\n  ) => void\n  /**\n   * 클러스터 마커를 오른쪽 클릭 했을 때 발생한다\n   * 이벤트 핸들러 함수 인자로는 오른쪽 클릭한 Cluster 객체가 넘어온다.\n   */\n  onClusterrightclick?: (\n    target: kakao.maps.MarkerClusterer,\n    cluster: kakao.maps.Cluster\n  ) => void\n  /**\n   * 클러스터링이 완료됐을 때 발생한다.\n   * 이벤트 핸들러 함수 인자로는 생성된 Cluster 객체 전체가 배열로 넘어온다.\n   */\n  onClustered?: (\n    target: kakao.maps.MarkerClusterer,\n    clusters: kakao.maps.Cluster[]\n  ) => void\n  /**\n   * MarkerClusterer 생성 후 해당 객체를 전달하는 함수\n   */\n  onCreate?: (target: kakao.maps.MarkerClusterer) => void\n}\n\nconst MarkerClusterer = React.forwardRef<\n  kakao.maps.MarkerClusterer,\n  React.PropsWithChildren<MarkerClustererProps>\n>(\n  (\n    {\n      children,\n      averageCenter,\n      calculator,\n      clickable,\n      disableClickZoom,\n      gridSize,\n      hoverable,\n      minClusterSize,\n      minLevel,\n      styles,\n      texts,\n      onClusterclick,\n      onClusterdblclick,\n      onClustered,\n      onClusterout,\n      onClusterover,\n      onClusterrightclick,\n      onCreate,\n    },\n    ref\n  ) => {\n    const map = useMap(`MarkerClusterer`)\n    const markerCluster = useMemo(() => {\n      if (!window.kakao.maps.MarkerClusterer) {\n        console.warn(\n          \"clusterer 라이브러리를 별도 로드 해야 사용 가능합니다. `https://apis.map.kakao.com/web/guide/#loadlibrary`\"\n        )\n        return\n      }\n      return new kakao.maps.MarkerClusterer({\n        averageCenter,\n        calculator,\n        clickable,\n        disableClickZoom,\n        gridSize,\n        hoverable,\n        minClusterSize,\n        minLevel,\n        styles,\n        texts,\n      })\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useImperativeHandle(ref, () => markerCluster!, [markerCluster])\n\n    useLayoutEffect(() => {\n      markerCluster?.setMap(map)\n    }, [map, markerCluster])\n\n    useLayoutEffect(() => {\n      if (markerCluster && onCreate) onCreate(markerCluster)\n    }, [markerCluster, onCreate])\n\n    useLayoutEffect(() => {\n      if (markerCluster && gridSize) {\n        markerCluster.setGridSize(gridSize)\n        markerCluster.redraw()\n      }\n    }, [markerCluster, gridSize])\n\n    useLayoutEffect(() => {\n      if (markerCluster && minClusterSize) {\n        markerCluster.setMinClusterSize(minClusterSize)\n        markerCluster.redraw()\n      }\n    }, [markerCluster, minClusterSize])\n\n    useLayoutEffect(() => {\n      if (markerCluster && typeof averageCenter !== \"undefined\") {\n        markerCluster.setAverageCenter(averageCenter)\n        markerCluster.redraw()\n      }\n    }, [markerCluster, averageCenter])\n\n    useLayoutEffect(() => {\n      if (markerCluster && minLevel) {\n        markerCluster.setMinLevel(minLevel)\n        markerCluster.redraw()\n      }\n    }, [markerCluster, minLevel])\n\n    useLayoutEffect(() => {\n      if (markerCluster && texts) {\n        markerCluster.setTexts(texts)\n        markerCluster.redraw()\n      }\n    }, [markerCluster, texts])\n\n    useLayoutEffect(() => {\n      if (markerCluster && calculator) {\n        markerCluster.setCalculator(calculator)\n        markerCluster.redraw()\n      }\n    }, [markerCluster, calculator])\n\n    useLayoutEffect(() => {\n      if (markerCluster && styles) {\n        markerCluster.setStyles(styles)\n        markerCluster.redraw()\n      }\n    }, [markerCluster, styles])\n\n    useKakaoEvent(markerCluster, \"clusterclick\", onClusterclick)\n    useKakaoEvent(markerCluster, \"clusterover\", onClusterover)\n    useKakaoEvent(markerCluster, \"clusterout\", onClusterout)\n    useKakaoEvent(markerCluster, \"clusterdblclick\", onClusterdblclick)\n    useKakaoEvent(markerCluster, \"clusterrightclick\", onClusterrightclick)\n    useKakaoEvent(markerCluster, \"clustered\", onClustered)\n\n    if (!markerCluster) {\n      return null\n    }\n\n    return (\n      <KakaoMapMarkerClustererContext.Provider value={markerCluster}>\n        {children}\n      </KakaoMapMarkerClustererContext.Provider>\n    )\n  }\n)\n\nexport default MarkerClusterer\n","import React, {\n  useContext,\n  useImperativeHandle,\n  useLayoutEffect,\n  useMemo,\n} from \"react\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport InfoWindow from \"./InfoWindow\"\nimport { KakaoMapMarkerClustererContext } from \"./MarkerClusterer\"\n\ninterface MarkerProps {\n  map: kakao.maps.Map | kakao.maps.Roadview\n  position: kakao.maps.LatLng | kakao.maps.Viewpoint\n\n  /**\n   * marker 생성 후 marker 객체를 전달하는 callback\n   */\n  onCreate?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * click 이벤트 핸들러\n   */\n  onClick?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * mouseover 이벤트 핸들러\n   */\n  onMouseOver?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * mouseout 이벤트 핸들러\n   */\n  onMouseOut?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * dragstart 이벤트 핸들러\n   */\n  onDragStart?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * dragend 이벤트 핸들러\n   */\n  onDragEnd?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * 마커의 이미지\n   */\n  image?: kakao.maps.MarkerImage\n\n  /**\n   * 마커 엘리먼트의 타이틀 속성 값 (툴팁)\n   */\n  title?: string\n\n  /**\n   * 드래그 가능한 마커, 로드뷰에 올릴 경우에는 유효하지 않다.\n   */\n  draggable?: boolean\n\n  /**\n   * 클릭 가능한 마커\n   */\n  clickable?: boolean\n\n  /**\n   * 마커 엘리먼트의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 마커 투명도 (0-1)\n   */\n  opacity?: number\n\n  /**\n   * 로드뷰에 올라있는 마커의 높이 값(m 단위)\n   */\n  altitude?: number\n\n  /**\n   * 로드뷰 상에서 마커의 가시반경(m 단위), 두 지점 사이의 거리가 지정한 값보다 멀어지면 마커는 로드뷰에서 보이지 않게 된다.\n   */\n  range?: number\n\n  /**\n   * InfoWindow 옵션\n   */\n  infoWindowOptions?: {\n    /**\n     * 인포윈도우를 열 때 지도가 자동으로 패닝하지 않을지의 여부 (기본값: false)\n     */\n    disableAutoPan?: boolean\n\n    /**\n     * 삭제 가능한 인포윈도우\n     */\n    removable?: boolean\n\n    /**\n     * 인포윈도우 엘리먼트의 z-index 속성 값\n     */\n    zIndex?: number\n\n    /**\n     * 로드뷰에 올라있는 인포윈도우의 높이 값(m 단위)\n     */\n    altitude?: number\n\n    /**\n     * 로드뷰 상에서 인포윈도우의 가시반경(m 단위), 두 지점 사이의 거리가 지정한 값보다 멀어지면 인포윈도우는 보이지 않게 된다\n     */\n    range?: number\n  }\n}\n\nconst Marker = React.forwardRef<\n  kakao.maps.Marker,\n  React.PropsWithChildren<MarkerProps>\n>(\n  (\n    {\n      map,\n      position,\n      children,\n      altitude,\n      clickable,\n      draggable,\n      image,\n      infoWindowOptions,\n      onCreate,\n      onClick,\n      onDragEnd,\n      onDragStart,\n      onMouseOut,\n      onMouseOver,\n      opacity,\n      range,\n      title,\n      zIndex,\n    },\n    ref\n  ) => {\n    const markerCluster = useContext(KakaoMapMarkerClustererContext)\n\n    // Marker 객체는 단 한번만 생성 되도록 함\n    const marker = useMemo(() => {\n      const kakaoMarker = new kakao.maps.Marker({\n        altitude,\n        clickable,\n        draggable,\n        image,\n        opacity,\n        range,\n        title,\n        zIndex,\n        position,\n      })\n\n      return kakaoMarker\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useImperativeHandle(ref, () => marker, [marker])\n\n    useLayoutEffect(() => {\n      if (markerCluster) {\n        markerCluster.addMarker(marker)\n      } else {\n        marker.setMap(map)\n      }\n\n      return () => {\n        if (markerCluster) {\n          markerCluster.removeMarker(marker)\n        } else {\n          marker.setMap(null)\n        }\n      }\n    }, [map, markerCluster, marker])\n\n    useLayoutEffect(() => {\n      if (onCreate) onCreate(marker)\n    }, [marker, onCreate])\n\n    useKakaoEvent(marker, \"click\", onClick)\n    useKakaoEvent(marker, \"dragstart\", onDragStart)\n    useKakaoEvent(marker, \"dragend\", onDragEnd)\n    useKakaoEvent(marker, \"mouseout\", onMouseOut)\n    useKakaoEvent(marker, \"mouseover\", onMouseOver)\n\n    // position이 변경되면 객체를 갱신한다.\n    useLayoutEffect(() => {\n      if (!map || !marker || !position) return\n\n      marker.setPosition(position)\n    }, [map, marker, position])\n\n    // image 객체가 존재하면 이미지를 로드한다\n    useLayoutEffect(() => {\n      if (!map || !marker || !image) return\n\n      marker.setImage(image)\n    }, [map, marker, image])\n\n    // altitude 값이 있으면 높이를 조정한다\n    useLayoutEffect(() => {\n      if (!map || !marker || !altitude) return\n\n      marker.setAltitude(altitude)\n    }, [map, marker, altitude])\n\n    // clickable 값이 있으면 클릭이 가능하도록 한다.\n    useLayoutEffect(() => {\n      if (!map || !marker || typeof clickable === \"undefined\") return\n\n      marker.setClickable(clickable)\n    }, [map, marker, clickable])\n\n    // draggable 값이 있으면 드래그가 가능하도록 한다.\n    useLayoutEffect(() => {\n      if (!map || !marker || typeof draggable === \"undefined\") return\n\n      marker.setDraggable(draggable)\n    }, [map, marker, draggable])\n\n    // opacity 값이 있으면 투명도를 조절한다.\n    useLayoutEffect(() => {\n      if (!map || !marker || !opacity) return\n\n      marker.setOpacity(opacity)\n    }, [map, marker, opacity])\n\n    // range 값이 있으면 마커의 가시반경을 조절한다.\n    useLayoutEffect(() => {\n      if (!map || !marker || !range) return\n\n      marker.setRange(range)\n    }, [map, marker, range])\n\n    // title 값이 있으면 마커의 제목을 조절한다.\n    useLayoutEffect(() => {\n      if (!map || !marker || !title) return\n\n      marker.setTitle(title)\n    }, [map, marker, title])\n\n    // zIndex 값이 있으면 마커의 zindex를 조절한다.\n    useLayoutEffect(() => {\n      if (!map || !marker || !zIndex) return\n\n      marker.setZIndex(zIndex)\n    }, [map, marker, zIndex])\n\n    if (children)\n      return (\n        <InfoWindow\n          position={position}\n          map={map}\n          marker={marker}\n          altitude={infoWindowOptions?.altitude}\n          disableAutoPan={infoWindowOptions?.disableAutoPan}\n          range={infoWindowOptions?.range}\n          removable={infoWindowOptions?.removable}\n          zIndex={infoWindowOptions?.zIndex}\n        >\n          {children}\n        </InfoWindow>\n      )\n\n    return null\n  }\n)\n\nexport default Marker\n","import React, { useMemo } from \"react\"\nimport useMap from \"../hooks/useMap\"\nimport Marker from \"./Marker\"\n\nexport interface MapMarkerProps {\n  /**\n   * 표시 위치\n   */\n  position:\n    | {\n        lat: number\n        lng: number\n      }\n    | {\n        x: number\n        y: number\n      }\n\n  image?: {\n    /**\n     * 표시 이미지 src\n     */\n    src: string\n\n    /**\n     * 표시 이미지 크기\n     */\n    size: {\n      width: number\n      height: number\n    }\n\n    options?: {\n      /**\n       * 마커 이미지의 alt 속성값을 정의한다.\n       */\n      alt?: string\n\n      /**\n       * 마커의 클릭 또는 마우스오버 가능한 영역을 표현하는 좌표값\n       */\n      coords?: string\n\n      /**\n       * 마커의 좌표에 일치시킬 이미지 안의 좌표 (기본값: 이미지의 가운데 아래)\n       */\n      offset?: { x: number; y: number }\n\n      /**\n       * 마커의 클릭 또는 마우스오버 가능한 영역의 모양\n       */\n      shape?: \"default\" | \"rect\" | \"circle\" | \"poly\"\n\n      /**\n       * 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\n       */\n      spriteOrigin?: { x: number; y: number }\n\n      /**\n       * 스프라이트 이미지의 전체 크기\n       */\n      spriteSize?: { width: number; height: number }\n    }\n  }\n\n  /**\n   * click 이벤트 핸들러\n   */\n  onClick?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * mouseover 이벤트 핸들러\n   */\n  onMouseOver?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * mouseout 이벤트 핸들러\n   */\n  onMouseOut?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * dragstart 이벤트 핸들러\n   */\n  onDragStart?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * dragend 이벤트 핸들러\n   */\n  onDragEnd?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * Maker 생성 이벤트 핸들러\n   */\n  onCreate?: (maker: kakao.maps.Marker) => void\n\n  /**\n   * 마커 엘리먼트의 타이틀 속성 값 (툴팁)\n   */\n  title?: string\n\n  /**\n   * 드래그 가능한 마커, 로드뷰에 올릴 경우에는 유효하지 않다.\n   */\n  draggable?: boolean\n\n  /**\n   * 클릭 가능한 마커\n   */\n  clickable?: boolean\n\n  /**\n   * 마커 엘리먼트의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 마커 투명도 (0-1)\n   */\n  opacity?: number\n\n  /**\n   * InfoWindow 옵션\n   */\n  infoWindowOptions?: {\n    /**\n     * 인포윈도우를 열 때 지도가 자동으로 패닝하지 않을지의 여부 (기본값: false)\n     */\n    disableAutoPan?: boolean\n\n    /**\n     * 삭제 가능한 인포윈도우\n     */\n    removable?: boolean\n\n    /**\n     * 인포윈도우 엘리먼트의 z-index 속성 값\n     */\n    zIndex?: number\n  }\n}\n\n/**\n * Map에서 Marker를 생성할 때 사용 합니다.\n * `onCreate` 이벤트를 통해 생성 후 `maker` 객체에 직접 접근하여 초기 설정이 가능합니다.\n */\nconst MapMarker = React.forwardRef<\n  kakao.maps.Marker,\n  React.PropsWithChildren<MapMarkerProps>\n>(\n  (\n    {\n      image,\n      position,\n      children,\n      clickable,\n      draggable,\n      infoWindowOptions,\n      onClick,\n      onDragEnd,\n      onDragStart,\n      onMouseOut,\n      onMouseOver,\n      onCreate,\n      opacity,\n      title,\n      zIndex,\n    },\n    ref\n  ) => {\n    const map = useMap(`MapMarker`)\n\n    const markerImage = useMemo(() => {\n      return (\n        image &&\n        new kakao.maps.MarkerImage(\n          image.src,\n          new kakao.maps.Size(image.size.width, image.size.height),\n          {\n            alt: image.options?.alt,\n            coords: image.options?.coords,\n            offset:\n              image.options?.offset &&\n              new kakao.maps.Point(\n                image.options?.offset.x,\n                image.options?.offset.y\n              ),\n            shape: image.options?.shape,\n            spriteOrigin:\n              image.options?.spriteOrigin &&\n              new kakao.maps.Point(\n                image.options?.spriteOrigin.x,\n                image.options?.spriteOrigin.y\n              ),\n            spriteSize:\n              image.options?.spriteSize &&\n              new kakao.maps.Size(\n                image.options?.spriteSize.width,\n                image.options?.spriteSize.height\n              ),\n          }\n        )\n      )\n    }, [image])\n\n    const markerPosition = useMemo(() => {\n      if (\"lat\" in position) {\n        return new kakao.maps.LatLng(position.lat, position.lng)\n      }\n      return new kakao.maps.Coords(position.x, position.y).toLatLng()\n\n      // @ts-ignore\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [position.lat, position.lng, position.x, position.y])\n\n    return (\n      <Marker\n        map={map}\n        position={markerPosition}\n        image={markerImage}\n        clickable={clickable}\n        draggable={draggable}\n        infoWindowOptions={infoWindowOptions}\n        onClick={onClick}\n        onDragEnd={onDragEnd}\n        onDragStart={onDragStart}\n        onMouseOut={onMouseOut}\n        onMouseOver={onMouseOver}\n        onCreate={onCreate}\n        opacity={opacity}\n        title={title}\n        zIndex={zIndex}\n        ref={ref}\n      >\n        {children}\n      </Marker>\n    )\n  }\n)\n\nexport default MapMarker\n","import React, { useMemo } from \"react\"\nimport InfoWindow from \"./InfoWindow\"\nimport useMap from \"../hooks/useMap\"\n\nexport interface MapInfoWindowProps {\n  /**\n   * Contianer id에 대해서 지정합니다.\n   */\n  id?: string\n\n  /**\n   * Contianer className에 대해서 지정합니다.\n   */\n  className?: string\n\n  /**\n   * Contianer style에 대해서 지정합니다.\n   */\n  style?: React.CSSProperties\n\n  /**\n   * 인포윈도가 표시될 위치\n   */\n  position: {\n    lat: number\n    lng: number\n  }\n  /**\n   * 인포윈도우를 열 때 지도가 자동으로 패닝하지 않을지의 여부 (기본값: false)\n   */\n  disableAutoPan?: boolean\n\n  /**\n   * 삭제 가능한 인포윈도우\n   */\n  removable?: boolean\n\n  /**\n   * 인포윈도우 엘리먼트의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 인포윈도우 객체 생성후 해당 객체를 반환하는 함수\n   */\n  onCreate?: (infoWindow: kakao.maps.InfoWindow) => void\n}\n\n/**\n * Map 컴포넌트에서 InfoWindow를 그릴 때 사용됩니다.\n * `onCreate` 이벤트를 통해 생성 후 `infoWindow` 객체에 직접 접근하여 초기 설정이 가능합니다.\n */\nconst MapInfoWindow = React.forwardRef<\n  kakao.maps.InfoWindow,\n  React.PropsWithChildren<MapInfoWindowProps>\n>(\n  (\n    { position, children, disableAutoPan, removable, zIndex, onCreate },\n    ref\n  ) => {\n    const map = useMap(`MapInfoWindow`)\n    const infoPosition = useMemo(() => {\n      return new kakao.maps.LatLng(position.lat, position.lng)\n    }, [position.lat, position.lng])\n\n    return (\n      <InfoWindow\n        disableAutoPan={disableAutoPan}\n        removable={removable}\n        zIndex={zIndex}\n        map={map}\n        position={infoPosition}\n        onCreate={onCreate}\n        ref={ref}\n      >\n        {children}\n      </InfoWindow>\n    )\n  }\n)\n\nexport default MapInfoWindow\n","import React, {\n  useContext,\n  useImperativeHandle,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from \"react\"\nimport ReactDOM from \"react-dom\"\nimport useMap from \"../hooks/useMap\"\nimport { KakaoMapMarkerClustererContext } from \"./MarkerClusterer\"\n\nexport interface CustomOverlayMapProps {\n  /**\n   * 커스텀 오버레이의 좌표\n   */\n  position: {\n    lat: number\n    lng: number\n  }\n  /**\n   * true 로 설정하면 컨텐츠 영역을 클릭했을 경우 지도 이벤트를 막아준다.\n   */\n  clickable?: boolean\n\n  /**\n   * 컨텐츠의 x축 위치. 0_1 사이의 값을 가진다. 기본값은 0.5\n   */\n  xAnchor?: number\n\n  /**\n   * 컨텐츠의 y축 위치. 0_1 사이의 값을 가진다. 기본값은 0.5\n   */\n  yAnchor?: number\n\n  /**\n   * 커스텀 오버레이의 z-index\n   */\n  zIndex?: number\n\n  /**\n   * 커스텀 오버레이를 생성 후 해당 객체를 가지고 callback 함수를 실행 시켜줌\n   */\n  onCreate?: (customOverlay: kakao.maps.CustomOverlay) => void\n}\n\n/**\n * Map에 CustomOverlay를 올릴 때 사용하는 컴포넌트 입니다.\n * `onCreate` 이벤트 또는 `ref` 객체를 통해서 `CustomOverlay` 객체에 직접 접근 및 초기 설정 작업을 지정할 수 있습니다.\n */\nconst CustomOverlayMap = React.forwardRef<\n  kakao.maps.CustomOverlay,\n  React.PropsWithChildren<CustomOverlayMapProps>\n>(\n  (\n    { position, children, clickable, xAnchor, yAnchor, zIndex, onCreate },\n    ref\n  ) => {\n    const markerCluster = useContext(KakaoMapMarkerClustererContext)\n\n    const map = useMap(`CustomOverlayMap`)\n    const container = useRef(document.createElement(\"div\"))\n\n    const overlayPosition = useMemo(() => {\n      return new kakao.maps.LatLng(position.lat, position.lng)\n    }, [position.lat, position.lng])\n\n    const overlay = useMemo(() => {\n      const KakaoCustomOverlay = new kakao.maps.CustomOverlay({\n        clickable: clickable,\n        xAnchor: xAnchor,\n        yAnchor: yAnchor,\n        zIndex: zIndex,\n        position: overlayPosition,\n        content: container.current,\n      })\n      container.current.style.display = \"none\"\n\n      return KakaoCustomOverlay\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [clickable, xAnchor, yAnchor])\n\n    useImperativeHandle(ref, () => overlay, [overlay])\n\n    useLayoutEffect(() => {\n      if (!map) return\n\n      if (markerCluster) {\n        markerCluster.addMarker(overlay)\n      } else {\n        overlay.setMap(map)\n      }\n\n      return () => {\n        if (markerCluster) {\n          markerCluster.removeMarker(overlay)\n        } else {\n          overlay.setMap(null)\n        }\n      }\n    }, [map, markerCluster, overlay])\n\n    useLayoutEffect(() => {\n      if (onCreate) onCreate(overlay)\n    }, [overlay, onCreate])\n\n    useLayoutEffect(() => {\n      overlay.setPosition(overlayPosition)\n    }, [overlay, overlayPosition])\n\n    useLayoutEffect(() => {\n      if (!zIndex) return\n      overlay.setZIndex(zIndex)\n    }, [overlay, zIndex])\n\n    return (\n      container.current.parentElement &&\n      ReactDOM.createPortal(children, container.current.parentElement)\n    )\n  }\n)\n\nexport default CustomOverlayMap\n","import React, { useImperativeHandle, useLayoutEffect, useMemo } from \"react\"\nimport useMap from \"../hooks/useMap\"\n\nexport interface MapTypeControlProps {\n  /**\n   * MapTypeControl의 Position를 정의 한다.\n   */\n  position?: kakao.maps.ControlPosition\n}\n\n/**\n * 일반 지도/하이브리드 간 지도 타입 전환 컨트롤을 생성한다.\n * 현재는 일반 지도/하이브리드 간 전환 컨트롤만 지원되며 다른 지도 타입을 제어하는 컨트롤이 필요할 경우에는 직접 구현해야 한다.\n */\nconst MapTypeControl = React.forwardRef<\n  kakao.maps.MapTypeControl,\n  MapTypeControlProps\n>(({ position = kakao.maps.ControlPosition.TOPRIGHT }, ref) => {\n  const map = useMap(`MapTypeControl`)\n\n  const mapTypeControl = useMemo(() => {\n    return new kakao.maps.MapTypeControl()\n  }, [])\n\n  useImperativeHandle(ref, () => mapTypeControl, [mapTypeControl])\n\n  useLayoutEffect(() => {\n    map.addControl(mapTypeControl, position)\n\n    return () => {\n      map.removeControl(mapTypeControl)\n    }\n  }, [map, mapTypeControl, position])\n\n  return null\n})\n\nexport default MapTypeControl\n","import React, { useEffect, useImperativeHandle, useMemo } from \"react\"\nimport useMap from \"../hooks/useMap\"\n\nexport interface ZoomControlProps {\n  /**\n   * ZoomControl의 Position를 정의 한다.\n   */\n  position?: kakao.maps.ControlPosition\n}\n\n/**\n * 확대·축소 컨트롤을 생성한다.\n */\nconst ZoomControl = React.forwardRef<kakao.maps.ZoomControl, ZoomControlProps>(\n  ({ position = kakao.maps.ControlPosition.RIGHT }, ref) => {\n    const map = useMap(`ZoomControl`)\n\n    const ZoomControl = useMemo(() => {\n      return new kakao.maps.ZoomControl()\n    }, [])\n\n    useImperativeHandle(ref, () => ZoomControl, [ZoomControl])\n\n    useEffect(() => {\n      map.addControl(ZoomControl, position)\n\n      return () => {\n        map.removeControl(ZoomControl)\n      }\n\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [map, position])\n\n    return null\n  }\n)\n\nexport default ZoomControl\n","import React, { useEffect } from \"react\"\nimport useMap from \"../hooks/useMap\"\n\nexport interface MapTypeIdProps {\n  /**\n   * MapTypeId를 정의 한다.\n   */\n  type: kakao.maps.MapTypeId\n}\n\n/**\n * 추가적으로 보이고 싶은 지도 타입을 추가 할 때 사용한다.\n */\nconst MapTypeId: React.FC<MapTypeIdProps> = ({ type }) => {\n  const map = useMap(`MapTypeId`)\n\n  useEffect(() => {\n    map.addOverlayMapTypeId(type)\n\n    return () => {\n      map.removeOverlayMapTypeId(type)\n    }\n  }, [map, type])\n\n  return null\n}\n\nexport default MapTypeId\n","import React, { useImperativeHandle, useLayoutEffect, useMemo } from \"react\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport useMap from \"../hooks/useMap\"\n\nexport interface CircleProps {\n  /**\n   * 중심 좌표를 지정합니다.\n   */\n  center: {\n    lat: number\n    lng: number\n  }\n  /**\n   * 원의 반지름 크기를 지정합니다 (미터 단위).\n   */\n  radius: number\n\n  /**\n   * #xxxxxx 형태의 채움 색 (기본값: ‘#F10000’)\n   */\n  fillColor?: string\n  /**\n   * 채움 불투명도 (0-1) (기본값: 0)\n   */\n  fillOpacity?: number\n  /**\n   * 픽셀 단위의 선 두께 (기본값: 3)\n   */\n  strokeWeight?: number\n  /**\n   * #xxxxxx 형태의 선 색 (기본값: ‘#F10000’)\n   */\n  strokeColor?: string\n  /**\n   * 선 불투명도 (0-1) (기본값: 0.6)\n   */\n  strokeOpacity?: number\n  /**\n   * 선 스타일 (기본값: ‘solid’)\n   */\n  strokeStyle?: kakao.maps.StrokeStyles\n  /**\n   * 원의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 원에 마우스 커서를 올리면 발생한다.\n   */\n  onMouseover?: (\n    target: kakao.maps.Circle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스 커서가 원에서 벗어나면 발생한다.\n   */\n  onMouseout?: (\n    target: kakao.maps.Circle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 원에서 마우스를 움직이면 발생한다.\n   */\n  onMousemove?: (\n    target: kakao.maps.Circle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 원에서 마우스 버튼을 누르면 발생한다.\n   */\n  onMousedown?: (\n    target: kakao.maps.Circle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 원을 클릭하면 발생한다.\n   */\n  onClick?: (\n    target: kakao.maps.Circle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 객체 생성시 호출 됩니다.\n   */\n  onCreate?: (target: kakao.maps.Circle) => void\n}\n\n/**\n * Map 상에 원을 그립니다.\n */\nconst Circle = React.forwardRef<kakao.maps.Circle, CircleProps>(\n  (\n    {\n      center,\n      radius,\n      fillColor,\n      fillOpacity,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n      zIndex,\n      onMouseover,\n      onMouseout,\n      onMousemove,\n      onMousedown,\n      onClick,\n      onCreate,\n    },\n    ref\n  ) => {\n    const map = useMap(`Circle`)\n\n    const circleCenter = useMemo(() => {\n      return new kakao.maps.LatLng(center.lat, center.lng)\n    }, [center.lat, center.lng])\n\n    const circle = useMemo(() => {\n      return new kakao.maps.Circle({\n        center: circleCenter,\n        radius,\n        fillColor,\n        fillOpacity,\n        strokeColor,\n        strokeOpacity,\n        strokeStyle,\n        strokeWeight,\n        zIndex,\n      })\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useImperativeHandle(ref, () => circle, [circle])\n\n    useLayoutEffect(() => {\n      circle.setMap(map)\n      return () => {\n        circle.setMap(null)\n      }\n    }, [map, circle])\n\n    useLayoutEffect(() => {\n      if (onCreate) onCreate(circle)\n    }, [circle, onCreate])\n\n    useLayoutEffect(() => {\n      if (circle) circle.setPosition(circleCenter)\n    }, [circle, circleCenter])\n\n    useLayoutEffect(() => {\n      circle.setRadius(radius)\n    }, [circle, radius])\n\n    useLayoutEffect(() => {\n      if (!zIndex) return\n      circle.setZIndex(zIndex)\n    }, [circle, zIndex])\n\n    useLayoutEffect(() => {\n      circle.setOptions({\n        fillColor,\n        fillOpacity,\n        strokeColor,\n        strokeOpacity,\n        strokeStyle,\n        strokeWeight,\n      })\n    }, [\n      circle,\n      fillColor,\n      fillOpacity,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n    ])\n\n    useKakaoEvent(circle, \"mouseover\", onMouseover)\n    useKakaoEvent(circle, \"mouseout\", onMouseout)\n    useKakaoEvent(circle, \"mousemove\", onMousemove)\n    useKakaoEvent(circle, \"mousedown\", onMousedown)\n    useKakaoEvent(circle, \"click\", onClick)\n\n    return null\n  }\n)\n\nexport default Circle\n","import React, { useImperativeHandle, useLayoutEffect, useMemo } from \"react\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport useMap from \"../hooks/useMap\"\n\ninterface LatLng {\n  lat: number\n  lng: number\n}\n\nexport interface PolylineProps {\n  path: LatLng[] | LatLng[][]\n  /**\n   * 화살표 여부\n   */\n  endArrow?: boolean\n  /**\n   * 픽셀 단위의 선 두께 (기본값: 3)\n   */\n  strokeWeight?: number\n  /**\n   * #xxxxxx 형태의 선 색 (기본값: ‘#F10000’)\n   */\n  strokeColor?: string\n  /**\n   * 선 불투명도 (0-1) (기본값: 0.6)\n   */\n  strokeOpacity?: number\n  /**\n   * 선 스타일 (기본값: ‘solid’)\n   */\n  strokeStyle?: kakao.maps.StrokeStyles\n  /**\n   * 선의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 마우스 커서를 올리면 발생한다.\n   */\n  onMouseover?: (\n    target: kakao.maps.Polyline,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스 커서가 벗어나면 발생한다.\n   */\n  onMouseout?: (\n    target: kakao.maps.Polyline,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스를 움직이면 발생한다.\n   */\n  onMousemove?: (\n    target: kakao.maps.Polyline,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스 버튼을 누르면 발생한다.\n   */\n  onMousedown?: (\n    target: kakao.maps.Polyline,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 클릭하면 발생한다.\n   */\n  onClick?: (\n    target: kakao.maps.Polyline,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 객체 생성시 호출 됩니다.\n   */\n  onCreate?: (target: kakao.maps.Polyline) => void\n}\n\n/**\n * Map 상에 폴리라인을 그립니다.\n */\nconst Polyline = React.forwardRef<kakao.maps.Polyline, PolylineProps>(\n  (\n    {\n      path,\n      endArrow,\n      onClick,\n      onMousedown,\n      onMousemove,\n      onMouseout,\n      onMouseover,\n      onCreate,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n      zIndex,\n    },\n    ref\n  ) => {\n    const map = useMap(`Polyline`)\n\n    const polyLinePath = useMemo(() => {\n      if ((path as LatLng[]).every((v) => v instanceof Array)) {\n        return (path as LatLng[][]).map((v) => {\n          return v.map((p) => new kakao.maps.LatLng(p.lat, p.lng))\n        })\n      }\n      return (path as LatLng[]).map((v) => {\n        return new kakao.maps.LatLng(v.lat, v.lng)\n      })\n    }, [path])\n\n    const polyline = useMemo(() => {\n      return new kakao.maps.Polyline({\n        path: polyLinePath,\n        endArrow,\n        strokeColor,\n        strokeOpacity,\n        strokeStyle,\n        strokeWeight,\n        zIndex,\n      })\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useImperativeHandle(ref, () => polyline, [polyline])\n\n    useLayoutEffect(() => {\n      polyline.setMap(map)\n      return () => polyline.setMap(null)\n    }, [map, polyline])\n\n    useLayoutEffect(() => {\n      if (onCreate) onCreate(polyline)\n    }, [polyline, onCreate])\n\n    useLayoutEffect(() => {\n      polyline.setOptions({\n        endArrow,\n        strokeColor,\n        strokeOpacity,\n        strokeStyle,\n        strokeWeight,\n      })\n    }, [\n      polyline,\n      endArrow,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n    ])\n\n    useLayoutEffect(() => {\n      polyline.setPath(polyLinePath)\n    }, [polyline, polyLinePath])\n\n    useLayoutEffect(() => {\n      if (zIndex) polyline.setZIndex(zIndex)\n    }, [polyline, zIndex])\n\n    useKakaoEvent(polyline, \"mouseover\", onMouseover)\n    useKakaoEvent(polyline, \"mouseout\", onMouseout)\n    useKakaoEvent(polyline, \"mousemove\", onMousemove)\n    useKakaoEvent(polyline, \"mousedown\", onMousedown)\n    useKakaoEvent(polyline, \"click\", onClick)\n\n    return null\n  }\n)\n\nexport default Polyline\n","import React, { useLayoutEffect, useImperativeHandle, useMemo } from \"react\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport useMap from \"../hooks/useMap\"\n\ninterface LatLng {\n  lat: number\n  lng: number\n}\n\nexport interface PolygonProps {\n  path: LatLng[] | LatLng[][]\n  /**\n   * #xxxxxx 형태의 채움 색 (기본값: ‘#F10000’)\n   */\n  fillColor?: string\n  /**\n   * 채움 불투명도 (0-1) (기본값: 0)\n   */\n  fillOpacity?: number\n  /**\n   * 픽셀 단위의 선 두께 (기본값: 3)\n   */\n  strokeWeight?: number\n  /**\n   * #xxxxxx 형태의 선 색 (기본값: ‘#F10000’)\n   */\n  strokeColor?: string\n  /**\n   * 선 불투명도 (0-1) (기본값: 0.6)\n   */\n  strokeOpacity?: number\n  /**\n   * 선 스타일 (기본값: ‘solid’)\n   */\n  strokeStyle?: kakao.maps.StrokeStyles\n  /**\n   * 선의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 마우스 커서를 올리면 발생한다.\n   */\n  onMouseover?: (\n    target: kakao.maps.Polygon,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스 커서가 벗어나면 발생한다.\n   */\n  onMouseout?: (\n    target: kakao.maps.Polygon,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스를 움직이면 발생한다.\n   */\n  onMousemove?: (\n    target: kakao.maps.Polygon,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스 버튼을 누르면 발생한다.\n   */\n  onMousedown?: (\n    target: kakao.maps.Polygon,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 클릭하면 발생한다.\n   */\n  onClick?: (\n    target: kakao.maps.Polygon,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 객체 생성시 호출 됩니다.\n   */\n  onCreate?: (target: kakao.maps.Polygon) => void\n}\n\n/**\n * Map 상에 다각형을 그립니다.\n */\nconst Polygon = React.forwardRef<kakao.maps.Polygon, PolygonProps>(\n  (\n    {\n      path,\n      onClick,\n      onMousedown,\n      onMousemove,\n      onMouseout,\n      onMouseover,\n      onCreate,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n      fillColor,\n      fillOpacity,\n      zIndex,\n    },\n    ref\n  ) => {\n    const map = useMap(`Polygon`)\n\n    const polygonPath = useMemo(() => {\n      if ((path as LatLng[]).every((v) => v instanceof Array)) {\n        return (path as LatLng[][]).map((v) => {\n          return v.map((p) => new kakao.maps.LatLng(p.lat, p.lng))\n        })\n      }\n      return (path as LatLng[]).map((v) => {\n        return new kakao.maps.LatLng(v.lat, v.lng)\n      })\n    }, [path])\n\n    const polygon = useMemo(() => {\n      return new kakao.maps.Polygon({\n        path: polygonPath,\n        fillColor,\n        fillOpacity,\n        strokeColor,\n        strokeOpacity,\n        strokeStyle,\n        strokeWeight,\n        zIndex,\n      })\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useImperativeHandle(ref, () => polygon, [polygon])\n\n    useLayoutEffect(() => {\n      polygon.setMap(map)\n      return () => polygon.setMap(null)\n    }, [map, polygon])\n\n    useLayoutEffect(() => {\n      if (onCreate) onCreate(polygon)\n    }, [polygon, onCreate])\n\n    useLayoutEffect(() => {\n      polygon.setOptions({\n        fillColor,\n        fillOpacity,\n        strokeColor,\n        strokeOpacity,\n        strokeStyle,\n        strokeWeight,\n      })\n    }, [\n      polygon,\n      fillColor,\n      fillOpacity,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n    ])\n\n    useLayoutEffect(() => {\n      polygon.setPath(polygonPath)\n    }, [polygon, polygonPath])\n\n    useLayoutEffect(() => {\n      if (zIndex) polygon.setZIndex(zIndex)\n    }, [polygon, zIndex])\n\n    useKakaoEvent(polygon, \"mouseover\", onMouseover)\n    useKakaoEvent(polygon, \"mouseout\", onMouseout)\n    useKakaoEvent(polygon, \"mousemove\", onMousemove)\n    useKakaoEvent(polygon, \"mousedown\", onMousedown)\n    useKakaoEvent(polygon, \"click\", onClick)\n\n    return null\n  }\n)\n\nexport default Polygon\n","import React, { useImperativeHandle, useLayoutEffect, useMemo } from \"react\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport useMap from \"../hooks/useMap\"\n\ninterface LatLng {\n  lat: number\n  lng: number\n}\n\nexport interface RectangleProps {\n  bounds: {\n    sw: LatLng\n    ne: LatLng\n  }\n  /**\n   * #xxxxxx 형태의 채움 색 (기본값: ‘#F10000’)\n   */\n  fillColor?: string\n  /**\n   * 채움 불투명도 (0-1) (기본값: 0)\n   */\n  fillOpacity?: number\n  /**\n   * 픽셀 단위의 선 두께 (기본값: 3)\n   */\n  strokeWeight?: number\n  /**\n   * #xxxxxx 형태의 선 색 (기본값: ‘#F10000’)\n   */\n  strokeColor?: string\n  /**\n   * 선 불투명도 (0-1) (기본값: 0.6)\n   */\n  strokeOpacity?: number\n  /**\n   * 선 스타일 (기본값: ‘solid’)\n   */\n  strokeStyle?: kakao.maps.StrokeStyles\n  /**\n   * 선의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 마우스 커서를 올리면 발생한다.\n   */\n  onMouseover?: (\n    target: kakao.maps.Rectangle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스 커서가 벗어나면 발생한다.\n   */\n  onMouseout?: (\n    target: kakao.maps.Rectangle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스를 움직이면 발생한다.\n   */\n  onMousemove?: (\n    target: kakao.maps.Rectangle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스 버튼을 누르면 발생한다.\n   */\n  onMousedown?: (\n    target: kakao.maps.Rectangle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 클릭하면 발생한다.\n   */\n  onClick?: (\n    target: kakao.maps.Rectangle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 객체 생성시 호출 됩니다.\n   */\n  onCreate?: (target: kakao.maps.Rectangle) => void\n}\n\n/**\n * Map 상에 사각형을 그립니다.\n */\nconst Rectangle = React.forwardRef<kakao.maps.Rectangle, RectangleProps>(\n  (\n    {\n      bounds,\n      onClick,\n      onMousedown,\n      onMousemove,\n      onMouseout,\n      onMouseover,\n      onCreate,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n      fillColor,\n      fillOpacity,\n      zIndex,\n    },\n    ref\n  ) => {\n    const map = useMap(`Rectangle`)\n\n    const rectangleBounds = useMemo(() => {\n      return new kakao.maps.LatLngBounds(\n        new kakao.maps.LatLng(bounds.sw.lat, bounds.sw.lng),\n        new kakao.maps.LatLng(bounds.ne.lat, bounds.ne.lng)\n      )\n    }, [bounds])\n\n    const rectangle = useMemo(() => {\n      return new kakao.maps.Rectangle({\n        bounds: rectangleBounds,\n        fillColor,\n        fillOpacity,\n        strokeColor,\n        strokeOpacity,\n        strokeStyle,\n        strokeWeight,\n        zIndex,\n      })\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useImperativeHandle(ref, () => rectangle, [rectangle])\n\n    useLayoutEffect(() => {\n      rectangle.setMap(map)\n      return () => rectangle.setMap(null)\n    }, [map, rectangle])\n\n    useLayoutEffect(() => {\n      if (onCreate) onCreate(rectangle)\n    }, [rectangle, onCreate])\n\n    useLayoutEffect(() => {\n      rectangle.setOptions({\n        fillColor,\n        fillOpacity,\n        strokeColor,\n        strokeOpacity,\n        strokeStyle,\n        strokeWeight,\n      })\n    }, [\n      rectangle,\n      fillColor,\n      fillOpacity,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n    ])\n\n    useLayoutEffect(() => {\n      rectangle.setBounds(rectangleBounds)\n    }, [rectangle, rectangleBounds])\n\n    useLayoutEffect(() => {\n      if (zIndex) rectangle.setZIndex(zIndex)\n    }, [rectangle, zIndex])\n\n    useKakaoEvent(rectangle, \"mouseover\", onMouseover)\n    useKakaoEvent(rectangle, \"mouseout\", onMouseout)\n    useKakaoEvent(rectangle, \"mousemove\", onMousemove)\n    useKakaoEvent(rectangle, \"mousedown\", onMousedown)\n    useKakaoEvent(rectangle, \"click\", onClick)\n\n    return null\n  }\n)\n\nexport default Rectangle\n","import React, { useImperativeHandle, useLayoutEffect, useMemo } from \"react\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport useMap from \"../hooks/useMap\"\n\nexport interface EllipseProps {\n  /**\n   * 중심 좌표를 지정합니다.\n   */\n  center: {\n    lat: number\n    lng: number\n  }\n  /**\n   * 미터 단위의 x축 반지름\n   */\n  rx: number\n\n  /**\n   * 미터 단위의 y축 반지름\n   */\n  ry: number\n\n  /**\n   * #xxxxxx 형태의 채움 색 (기본값: ‘#F10000’)\n   */\n  fillColor?: string\n\n  /**\n   * 채움 불투명도 (0-1) (기본값: 0)\n   */\n  fillOpacity?: number\n\n  /**\n   * 픽셀 단위의 선 두께 (기본값: 3)\n   */\n  strokeWeight?: number\n\n  /**\n   * #xxxxxx 형태의 선 색 (기본값: ‘#F10000’)\n   */\n  strokeColor?: string\n\n  /**\n   * 선 불투명도 (0-1) (기본값: 0.6)\n   */\n  strokeOpacity?: number\n\n  /**\n   * 선 스타일 (기본값: ‘solid’)\n   */\n  strokeStyle?: kakao.maps.StrokeStyles\n\n  /**\n   * 타원의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 타원에 마우스 커서를 올리면 발생한다.\n   */\n  onMouseover?: (\n    target: kakao.maps.Ellipse,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스 커서가 타원에서 벗어나면 발생한다.\n   */\n  onMouseout?: (\n    target: kakao.maps.Ellipse,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 타원에서 마우스를 움직이면 발생한다.\n   */\n  onMousemove?: (\n    target: kakao.maps.Ellipse,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 타원에서 마우스 버튼을 누르면 발생한다.\n   */\n  onMousedown?: (\n    target: kakao.maps.Ellipse,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 타원을 클릭하면 발생한다.\n   */\n  onClick?: (\n    target: kakao.maps.Ellipse,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 객체 생성시 호출 됩니다.\n   */\n  onCreate?: (target: kakao.maps.Ellipse) => void\n}\n\n/**\n * Map 상에 타원을 그립니다.\n */\nconst Ellipse = React.forwardRef<kakao.maps.Ellipse, EllipseProps>(\n  (\n    {\n      center,\n      rx,\n      ry,\n      fillColor,\n      fillOpacity,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n      zIndex,\n      onMouseover,\n      onMouseout,\n      onMousemove,\n      onMousedown,\n      onClick,\n      onCreate,\n    },\n    ref\n  ) => {\n    const map = useMap(`Ellipse`)\n\n    const ellipseCenter = useMemo(() => {\n      return new kakao.maps.LatLng(center.lat, center.lng)\n    }, [center.lat, center.lng])\n\n    const ellipse = useMemo(() => {\n      return new kakao.maps.Ellipse({\n        center: ellipseCenter,\n        rx,\n        ry,\n        fillColor,\n        fillOpacity,\n        strokeColor,\n        strokeOpacity,\n        strokeStyle,\n        strokeWeight,\n        zIndex,\n      })\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useImperativeHandle(ref, () => ellipse, [ellipse])\n\n    useLayoutEffect(() => {\n      ellipse.setMap(map)\n\n      return () => {\n        ellipse.setMap(null)\n      }\n    }, [map, ellipse])\n\n    useLayoutEffect(() => {\n      if (onCreate) onCreate(ellipse)\n    }, [ellipse, onCreate])\n\n    useLayoutEffect(() => {\n      if (ellipse) ellipse.setPosition(ellipseCenter)\n    }, [ellipse, ellipseCenter])\n\n    useLayoutEffect(() => {\n      ellipse.setRadius(rx, ry)\n    }, [ellipse, rx, ry])\n\n    useLayoutEffect(() => {\n      if (!zIndex) return\n      ellipse.setZIndex(zIndex)\n    }, [ellipse, zIndex])\n\n    useLayoutEffect(() => {\n      ellipse.setOptions({\n        fillColor,\n        fillOpacity,\n        strokeColor,\n        strokeOpacity,\n        strokeStyle,\n        strokeWeight,\n      })\n    }, [\n      ellipse,\n      fillColor,\n      fillOpacity,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n    ])\n\n    useKakaoEvent(ellipse, \"mouseover\", onMouseover)\n    useKakaoEvent(ellipse, \"mouseout\", onMouseout)\n    useKakaoEvent(ellipse, \"mousemove\", onMousemove)\n    useKakaoEvent(ellipse, \"mousedown\", onMousedown)\n    useKakaoEvent(ellipse, \"click\", onClick)\n\n    return null\n  }\n)\n\nexport default Ellipse\n","import React, { useImperativeHandle, useLayoutEffect, useMemo } from \"react\"\nimport useMap from \"../hooks/useMap\"\n\nexport interface AbstractOverlayProps {\n  /**\n   * AbstractOverlay에서 필요한 `onAdd` 함수를 구현 합니다.\n   * 위치를 재조정할 필요가 있을 때 호출된다.\n   * 이 함수 내에서 엘리먼트의 위치를 잡아주어야 한다.\n   *\n   * 이때 arrow 함수가 아닌 일반 funtion으로 하여 this 바인딩이 되도록 하여 AbstractOverlay를 상속 받은 객체에 접근하여 필요 기능을 정의 합니다.\n   * ```tsx\n   * const panel = (this as kakao.maps.AbstractOverlay).getPanels().overlayLayer\n   * panel.appendChild(node.current)\n   * ```\n   */\n  draw: () => void\n  /**\n   * 지도에 올릴 때 호출된다.\n   * setMap(map) 을 실행하면 이 함수가 실행된다.\n   * 이 함수 내에서 생성된 `DOM` 객체를 MapPanels에 자식 노드로 넣어주도록 한다.\n   *\n   * ```tsx\n   * var projection = this.getProjection()\n   * var point = projection.pointFromCoords(positionLatlng)\n   * var width = node.current.offsetWidth\n   * var height = node.current.offsetHeight\n   *\n   * console.log(point, width, height)\n   *\n   * node.current.style.left = point.x - width / 2 + \"px\"\n   * node.current.style.top = point.y - height / 2 + \"px\"\n   * ```\n   */\n  onAdd: () => void\n\n  /**\n   * 지도에서 제거할 때 호출된다.\n   * setMap(null) 을 실행하면 이 함수가 실행된다.\n   * 이 함수 내에서 MapPanels에 자식 노드로 넣어준 엘리먼트를 제거하도록 한다.\n   *\n   * ```tsx\n   * this.node.parentNode.removeChild(this.node);\n   * ```\n   */\n  onRemove: () => void\n\n  /**\n   * 생성된 kakao.maps.AbstractOverlay 객체를 받을 수 있는 CallBack 함수 입니다.\n   */\n  onCreate?: (target: kakao.maps.AbstractOverlay) => void\n}\n\n/**\n * `API` 사용자가 직접 정의할 수 있는 오버레이.\n * AbstractOverlay를 상속 받아 사용할 객체를 생성하고 prototype을 연결해 준다.\n * 온전히 동작하는 오버레이를 만들고자 한다면 3가지 인터페이스 메소드( onAdd, draw, onRemove )를 구현해야 한다.\n *\n * 해당 Component 내부에서 `ReactAbstractOveraly` class를 만들어 `onAdd`, `draw`, `onRemove` 를 연결한 후 React Life Cycle에 맞춰 `setMap` 를 자동으로 호출 합니다.\n *\n * *경고* `draw`, `onAdd`, `onRemove` 의 경우 반드시 익명함수가 **아닌** 형태로 만들어서 전달해야 합니다.\n * `this.~` 를 통한 접근이 가능하니 해당 부분을 이용해서 구현 해주세요!\n *\n * ### Example Code\n *\n * ```jsx live\n * function () {\n *  const TooltipMarker = ({\n *    position,\n *  }) => {\n *    const node = useRef(document.createElement(\"div\"))\n *\n *    const positionLatlng = useMemo(() => {\n *      return new kakao.maps.LatLng(position.lat, position.lng)\n *    }, [position.lat, position.lng])\n *\n *    function onAdd() {\n *      const panel = this.getPanels()\n *        .overlayLayer\n *      panel.appendChild(node.current)\n *    }\n *\n *    function onRemove() {\n *      node.current.parentNode.removeChild(node.current)\n *    }\n *\n *    function draw() {\n *      var projection = this.getProjection()\n *      var point = projection.pointFromCoords(positionLatlng)\n *      var width = node.current.offsetWidth\n *      var height = node.current.offsetHeight\n *\n *      console.log(point, width, height)\n *\n *      node.current.style.left = point.x - width / 2 + \"px\"\n *      node.current.style.top = point.y - height / 2 + \"px\"\n *    }\n *\n *    useEffect(() => {\n *      node.current.style.position = \"absolute\"\n *      node.current.style.whiteSpace = \"nowrap\"\n *    }, [])\n *\n *    return (\n *      <>\n *        <AbstractOverlay onAdd={onAdd} onRemove={onRemove} draw={draw} />\n *        {ReactDOM.createPortal(\n *          <div\n *            style={{\n *              color: \"#000\",\n *              backgroundColor: \"#fff\",\n *              padding: \"5px\",\n *              borderRadius: \"15px\",\n *            }}\n *          >\n *            Hello Marker!\n *          </div>,\n *          node.current\n *        )}\n *      </>\n *    )\n *  }\n *\n *  return (\n *    <>\n *      <Map // 지도를 표시할 Container\n *        center={{\n *          // 지도의 중심좌표\n *          lat: 37.54699,\n *          lng: 127.09598,\n *        }}\n *        style={{\n *          // 지도의 크기\n *          width: \"100%\",\n *          height: \"450px\",\n *        }}\n *        level={3} // 지도의 확대 레벨\n *      >\n *        <TooltipMarker\n *          position={{\n *            lat: 37.54699,\n *            lng: 127.09598,\n *          }}\n *        />\n *      </Map>\n *    </>\n *  )\n *}\n * ```\n */\nconst AbstractOverlay = React.forwardRef<\n  kakao.maps.AbstractOverlay,\n  AbstractOverlayProps\n>(({ draw, onAdd, onRemove, onCreate }, ref) => {\n  const map = useMap()\n\n  const reactAbstractOverlay = useMemo(() => {\n    class ReactAbstractOveraly extends kakao.maps.AbstractOverlay {\n      constructor(draw: () => void, onAdd: () => void, onRemove: () => void) {\n        super()\n        this.draw = draw\n        this.onAdd = onAdd\n        this.onRemove = onRemove\n      }\n    }\n    const overlay = new ReactAbstractOveraly(draw, onAdd, onRemove)\n    return overlay\n  }, [draw, onAdd, onRemove])\n\n  useImperativeHandle(ref, () => reactAbstractOverlay, [reactAbstractOverlay])\n\n  useLayoutEffect(() => {\n    reactAbstractOverlay.setMap(map)\n\n    return () => {\n      reactAbstractOverlay.setMap(null)\n    }\n  }, [map, reactAbstractOverlay])\n\n  useLayoutEffect(() => {\n    if (onCreate) onCreate(reactAbstractOverlay)\n  }, [reactAbstractOverlay, onCreate])\n\n  return null\n})\n\nexport default AbstractOverlay\n","import React, { useImperativeHandle, useRef, useState } from \"react\"\nimport useIsomorphicLayoutEffect from \"../hooks/useIsomorphicLayoutEffect\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport {\n  PolymorphicComponentProps,\n  PolymorphicComponentPropsWithOutRef,\n} from \"../types\"\nimport { Loader } from \"../util/kakaoMapApiLoader\"\n\nexport const KakaoRoadviewContext = React.createContext<kakao.maps.Roadview>(\n  undefined as unknown as kakao.maps.Roadview\n)\n\nexport interface RoadviewProps {\n  /**\n   * 중심으로 설정할 위치 입니다.\n   * 해당 lat와 lng에 해당하는 radius범위 안에서 가장가까운 Roadview을 선택합니다.\n   * 만약 없다면 lat, lng로 설정 됩니다.\n   */\n  position: {\n    lat: number\n    lng: number\n    radius: number\n  }\n\n  /**\n   * 로드뷰 시작 지역의 고유 아이디 값.\n   */\n  panoId?: number\n\n  /**\n   * panoId가 유효하지 않을 경우 지도좌표를 기반으로 데이터를 요청할 수평 좌표값.\n   */\n  panoX?: number\n\n  /**\n   * panoId가 유효하지 않을 경우 지도좌표를 기반으로 데이터를 요청할 수직 좌표값.\n   */\n  panoY?: number\n\n  /**\n   * 로드뷰 처음 실행시에 바라봐야 할 수평 각. 0이 정북방향. (0_360)\n   */\n  pan?: number\n\n  /**\n   * 로드뷰 처음 실행시에 바라봐야 할 수직 각.(-90_90)\n   */\n  tilt?: number\n\n  /**\n   * 로드뷰 줌 초기값.(-3_3)\n   */\n  zoom?: number\n\n  /**\n   * 로드뷰 생성후 해당 객체를 전달하는 callback.\n   */\n  onCreate?: (roadview: kakao.maps.Roadview) => void\n\n  /**\n   * 로드뷰가 초기화를 끝내면 발생한다.\n   */\n  onInit?: (target: kakao.maps.Roadview) => void\n\n  /**\n   * 파노라마 ID가 바뀌면 발생한다.\n   */\n  onPanoidChange?: (target: kakao.maps.Roadview) => void\n\n  /**\n   * 시점이 바뀌면 발생한다.\n   */\n  onViewpointChange?: (target: kakao.maps.Roadview) => void\n\n  /**\n   * 지도 좌표가 바뀌면 발생한다.\n   */\n  onPositionChanged?: (target: kakao.maps.Roadview) => void\n\n  /**\n   * getNearestPanoId 동작 실패시 호출 합니다.\n   */\n  onErrorGetNearestPanoId?: (target: kakao.maps.Roadview) => void\n}\n\ntype RoadviewComponent = <T extends React.ElementType = \"div\">(\n  props: PolymorphicComponentPropsWithOutRef<T, RoadviewProps>\n) => React.ReactElement | null\n/**\n * Roadview를 Roadview를 생성하는 컴포넌트 입니다.\n * props로 받는 `on*` 이벤트는 해당 `kakao.maps.Map` 객체를 반환 합니다.\n * `onCreate` 이벤트를 통해 생성 후 `Roadview` 객체에 직접 접근하여 초기 설정이 가능합니다.\n */\nconst Roadview: RoadviewComponent = React.forwardRef(\n  <T extends React.ElementType = \"div\">(\n    {\n      id,\n      as,\n      children,\n      position,\n      pan,\n      panoId,\n      panoX,\n      panoY,\n      tilt,\n      zoom,\n      onCreate,\n      onInit,\n      onPanoidChange,\n      onPositionChanged,\n      onViewpointChange,\n      onErrorGetNearestPanoId,\n      ...props\n    }: PolymorphicComponentProps<T, React.PropsWithChildren<RoadviewProps>>,\n    ref: React.ForwardedRef<kakao.maps.Roadview>\n  ) => {\n    const Container = as || \"div\"\n    const [isLoaded, setIsLoaded] = useState(false)\n    const [isLoading, setIsLoading] = useState(true)\n    const [roadview, setRoadview] = useState<kakao.maps.Roadview>()\n    const container = useRef<HTMLDivElement>(null)\n\n    useIsomorphicLayoutEffect(() => {\n      Loader.isLoaded().then(setIsLoaded)\n    }, [])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!isLoaded) return\n\n      const RoadviewContainer = container.current\n\n      if (!RoadviewContainer) return\n\n      const kakaoRoadview = new kakao.maps.Roadview(RoadviewContainer, {\n        pan: pan,\n        panoId: panoId,\n        panoX: panoX,\n        panoY: panoY,\n        tilt: tilt,\n        zoom: zoom,\n      })\n\n      setRoadview(kakaoRoadview)\n\n      return () => {\n        RoadviewContainer.innerHTML = \"\"\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isLoaded, panoX, panoY, zoom])\n\n    useImperativeHandle(ref, () => roadview!, [roadview])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!roadview || !onCreate) return\n      onCreate(roadview)\n    }, [roadview, onCreate])\n\n    useIsomorphicLayoutEffect(() => {\n      if (\n        !roadview ||\n        panoId ||\n        (roadview.getPosition().getLat() === position.lat &&\n          roadview.getPosition().getLng() === position.lng)\n      )\n        return\n\n      const newPostion = new kakao.maps.LatLng(position.lat, position.lng)\n\n      new kakao.maps.RoadviewClient().getNearestPanoId(\n        newPostion,\n        position.radius,\n        (panoId) => {\n          if (panoId === null && onErrorGetNearestPanoId) {\n            onErrorGetNearestPanoId(roadview)\n          } else {\n            roadview.setPanoId(panoId, newPostion)\n          }\n        }\n      )\n    }, [\n      roadview,\n      panoId,\n      position.lat,\n      position.lng,\n      position.radius,\n      onErrorGetNearestPanoId,\n    ])\n\n    useIsomorphicLayoutEffect(() => {\n      if (\n        !roadview ||\n        !panoId ||\n        panoId === roadview.getPanoId() ||\n        (roadview.getPosition().getLat() === position.lat &&\n          roadview.getPosition().getLng() === position.lng)\n      )\n        return\n\n      const newPostion = new kakao.maps.LatLng(position.lat, position.lng)\n      roadview.setPanoId(panoId, newPostion)\n    }, [roadview, panoId, position.lat, position.lng])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!roadview) return\n\n      const prevViewpoint = roadview.getViewpoint()\n\n      if (prevViewpoint.pan === pan && prevViewpoint.tilt === tilt) return\n\n      if (pan) prevViewpoint.pan = pan\n      if (tilt) prevViewpoint.tilt = tilt\n      roadview.setViewpoint(prevViewpoint)\n    }, [roadview, pan, tilt])\n\n    useKakaoEvent(roadview, \"init\", (target) => {\n      setIsLoading(false)\n      if (onInit) onInit(target)\n    })\n    useKakaoEvent(roadview, \"panoid_changed\", onPanoidChange)\n    useKakaoEvent(roadview, \"viewpoint_changed\", onViewpointChange)\n    useKakaoEvent(roadview, \"position_changed\", onPositionChanged)\n\n    return (\n      <>\n        <Container\n          ref={container}\n          id={id || \"react-kakao-maps-sdk-roadview-container\"}\n          {...props}\n        />\n        {roadview && !isLoading && (\n          <KakaoRoadviewContext.Provider value={roadview}>\n            {children}\n          </KakaoRoadviewContext.Provider>\n        )}\n      </>\n    )\n  }\n)\n\nexport default Roadview\n","import { useContext } from \"react\"\nimport { KakaoRoadviewContext } from \"../components/Roadview\"\n\n/**\n * kakao roadview 객체를 가져오는 hook 입니다.\n * Roadview 객체 내부가 아니라면 Error를 발생 시킵니다.\n */\nconst useRoadview = (componentName?: string) => {\n  const kakaoRoadview = useContext(KakaoRoadviewContext)\n  if (!kakaoRoadview) {\n    throw new Error(\n      `${\n        componentName ? componentName + \" Component\" : \"useRoadview\"\n      } must exist inside Roadview Component!`\n    )\n  }\n\n  return kakaoRoadview\n}\n\nexport default useRoadview\n","import React, {\n  useImperativeHandle,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from \"react\"\nimport ReactDOM from \"react-dom\"\nimport useRoadview from \"../hooks/useRoadview\"\n\nexport interface CustomOverlayRoadviewProps {\n  /**\n   * 커스텀 오버레이의 좌표\n   */\n  position:\n    | {\n        lat: number\n        lng: number\n      }\n    | {\n        /**\n         * 가로 각도, 0부터 360 사이의 값으로 북쪽부터 시계방향으로 대응한다.\n         */\n        pan: number\n        /**\n         * 세로 각도, -90부터 90 사이의 값으로 위쪽부터 아래쪽으로 대응한다.\n         */\n        tilt: number\n        /**\n         * 확대 수준, -3부터 3 사이의 정수이다.\n         */\n        zoom?: number\n        /**\n         * 특정 위치의 로드뷰 고유의 아이디 값\n         */\n        panoId?: number\n      }\n  /**\n   * true 로 설정하면 컨텐츠 영역을 클릭했을 경우 지도 이벤트를 막아준다.\n   */\n  clickable?: boolean\n\n  /**\n   * 컨텐츠의 x축 위치. 0_1 사이의 값을 가진다. 기본값은 0.5\n   */\n  xAnchor?: number\n\n  /**\n   * 컨텐츠의 y축 위치. 0_1 사이의 값을 가진다. 기본값은 0.5\n   */\n  yAnchor?: number\n\n  /**\n   * 커스텀 오버레이의 z-index\n   */\n  zIndex?: number\n\n  /**\n   * 로드뷰상에서 커스텀 오버레이의 높이(위치)를 지정한다.\n   * 단위는 m(미터)이며 현재 로드뷰의 바닥 높이를 기준으로 떨어져있는 높이를 말한다.\n   */\n  altitude?: number\n\n  /**\n   * 커스텀 오버레이의 가시반경을 설정한다.\n   * 로드뷰의 위치와 커스텀 오버레이의 위치 사이의 거리가 가시반경 이내일 경우에만 로드뷰상에 노출된다.\n   * 단위는 m(미터)이며 기본값은 500m이다.\n   */\n  range?: number\n\n  /**\n   * 커스텀 오버레이를 생성 후 해당 객체를 가지고 callback 함수를 실행 시켜줌\n   */\n  onCreate?: (customOverlay: kakao.maps.CustomOverlay) => void\n}\n\n/**\n * Roadview에 CustomOverlay를 올릴 때 사용하는 컴포넌트 입니다.\n * `onCreate` 이벤트 또는 `ref` 객체를 통해서 `CustomOverlay` 객체에 직접 접근 및 초기 설정 작업을 지정할 수 있습니다.\n */\nconst CustomOverlayRoadview = React.forwardRef<\n  kakao.maps.CustomOverlay,\n  React.PropsWithChildren<CustomOverlayRoadviewProps>\n>(\n  (\n    {\n      position,\n      children,\n      clickable,\n      xAnchor,\n      yAnchor,\n      zIndex,\n      altitude,\n      range,\n      onCreate,\n    },\n    ref\n  ) => {\n    const roadview = useRoadview(`CustomOverlayRoadview`)\n    const container = useRef(document.createElement(\"div\"))\n\n    const overlayPosition = useMemo(() => {\n      if (\"lat\" in position) {\n        return new kakao.maps.LatLng(position.lat, position.lng)\n      }\n      return new kakao.maps.Viewpoint(\n        position.pan,\n        position.tilt,\n        position.zoom,\n        position.panoId\n      )\n      /* eslint-disable react-hooks/exhaustive-deps */\n    }, [\n      // @ts-ignore\n      position.lat,\n      // @ts-ignore\n      position.lng,\n      // @ts-ignore\n      position.pan,\n      // @ts-ignore\n      position.tilt,\n      // @ts-ignore\n      position.zoom,\n      // @ts-ignore\n      position.panoId,\n    ])\n    /* eslint-enable react-hooks/exhaustive-deps */\n\n    const overlay = useMemo(() => {\n      const KakaoCustomOverlay = new kakao.maps.CustomOverlay({\n        clickable: clickable,\n        xAnchor: xAnchor,\n        yAnchor: yAnchor,\n        zIndex: zIndex,\n        position: overlayPosition,\n        content: container.current,\n      })\n      container.current.style.display = \"none\"\n      return KakaoCustomOverlay\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [clickable, xAnchor, yAnchor])\n\n    useImperativeHandle(ref, () => overlay, [overlay])\n\n    useLayoutEffect(() => {\n      if (!roadview) return\n\n      overlay.setMap(roadview)\n\n      return () => {\n        overlay.setMap(null)\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [overlay, roadview])\n\n    useLayoutEffect(() => {\n      if (onCreate) onCreate(overlay)\n    }, [overlay, onCreate])\n\n    useLayoutEffect(() => {\n      overlay.setPosition(overlayPosition)\n    }, [overlay, overlayPosition])\n\n    useLayoutEffect(() => {\n      if (!zIndex) return\n      overlay.setZIndex(zIndex)\n    }, [overlay, zIndex])\n\n    useLayoutEffect(() => {\n      if (!altitude) return\n      overlay.setAltitude(altitude)\n    }, [overlay, altitude])\n\n    useLayoutEffect(() => {\n      if (!range) return\n      overlay.setRange(range)\n    }, [overlay, range])\n\n    return (\n      container.current.parentElement &&\n      ReactDOM.createPortal(children, container.current.parentElement)\n    )\n  }\n)\n\nexport default CustomOverlayRoadview\n","import React, { useMemo } from \"react\"\nimport useRoadview from \"../hooks/useRoadview\"\nimport Marker from \"./Marker\"\n\nexport interface RoadviewMarkerProps {\n  /**\n   * 표시 위치\n   */\n  position:\n    | {\n        lat: number\n        lng: number\n      }\n    | {\n        x: number\n        y: number\n      }\n    | {\n        /**\n         * 가로 각도, 0부터 360 사이의 값으로 북쪽부터 시계방향으로 대응한다.\n         */\n        pan: number\n        /**\n         * 세로 각도, -90부터 90 사이의 값으로 위쪽부터 아래쪽으로 대응한다.\n         */\n        tilt: number\n        /**\n         * 확대 수준, -3부터 3 사이의 정수이다.\n         */\n        zoom?: number\n        /**\n         * 특정 위치의 로드뷰 고유의 아이디 값\n         */\n        panoId?: number\n      }\n\n  image?: {\n    /**\n     * 표시 이미지 src\n     */\n    src: string\n\n    /**\n     * 표시 이미지 크기\n     */\n    size: {\n      width: number\n      height: number\n    }\n\n    options?: {\n      /**\n       * 마커 이미지의 alt 속성값을 정의한다.\n       */\n      alt?: string\n\n      /**\n       * 마커의 클릭 또는 마우스오버 가능한 영역을 표현하는 좌표값\n       */\n      coords?: string\n\n      /**\n       * 마커의 좌표에 일치시킬 이미지 안의 좌표 (기본값: 이미지의 가운데 아래)\n       */\n      offset?: { x: number; y: number }\n\n      /**\n       * 마커의 클릭 또는 마우스오버 가능한 영역의 모양\n       */\n      shape?: \"default\" | \"rect\" | \"circle\" | \"poly\"\n\n      /**\n       * 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\n       */\n      spriteOrigin?: { x: number; y: number }\n\n      /**\n       * 스프라이트 이미지의 전체 크기\n       */\n      spriteSize?: { width: number; height: number }\n    }\n  }\n\n  /**\n   * click 이벤트 핸들러\n   */\n  onClick?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * mouseover 이벤트 핸들러\n   */\n  onMouseOver?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * mouseout 이벤트 핸들러\n   */\n  onMouseOut?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * dragstart 이벤트 핸들러\n   */\n  onDragStart?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * dragend 이벤트 핸들러\n   */\n  onDragEnd?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * Maker 생성 이벤트 핸들러\n   */\n  onCreate?: (maker: kakao.maps.Marker) => void\n\n  /**\n   * 마커 엘리먼트의 타이틀 속성 값 (툴팁)\n   */\n  title?: string\n\n  /**\n   * 클릭 가능한 마커\n   */\n  clickable?: boolean\n\n  /**\n   * 마커 엘리먼트의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 마커 투명도 (0-1)\n   */\n  opacity?: number\n\n  /**\n   * 로드뷰에 올라있는 마커의 높이 값(m 단위)\n   */\n  altitude?: number\n\n  /**\n   * 로드뷰 상에서 마커의 가시반경(m 단위), 두 지점 사이의 거리가 지정한 값보다 멀어지면 마커는 로드뷰에서 보이지 않게 된다.\n   */\n  range?: number\n\n  /**\n   * InfoWindow 옵션\n   */\n  infoWindowOptions?: {\n    /**\n     * 인포윈도우를 열 때 지도가 자동으로 패닝하지 않을지의 여부 (기본값: false)\n     */\n    disableAutoPan?: boolean\n\n    /**\n     * 삭제 가능한 인포윈도우\n     */\n    removable?: boolean\n\n    /**\n     * 인포윈도우 엘리먼트의 z-index 속성 값\n     */\n    zIndex?: number\n  }\n}\n\n/**\n * Map에서 Marker를 생성할 때 사용 합니다.\n * `onCreate` 이벤트를 통해 생성 후 `maker` 객체에 직접 접근하여 초기 설정이 가능합니다.\n */\nconst RoadviewMarker = React.forwardRef<\n  kakao.maps.Marker,\n  React.PropsWithChildren<RoadviewMarkerProps>\n>(\n  (\n    {\n      image,\n      position,\n      children,\n      altitude,\n      clickable,\n      infoWindowOptions,\n      onClick,\n      onDragEnd,\n      onDragStart,\n      onMouseOut,\n      onMouseOver,\n      onCreate,\n      opacity,\n      range,\n      title,\n      zIndex,\n    },\n    ref\n  ) => {\n    const roadview = useRoadview(`RoadviewMarker`)\n\n    const markerImage = useMemo(() => {\n      return (\n        image &&\n        new kakao.maps.MarkerImage(\n          image.src,\n          new kakao.maps.Size(image.size.width, image.size.height),\n          {\n            alt: image.options?.alt,\n            coords: image.options?.coords,\n            offset:\n              image.options?.offset &&\n              new kakao.maps.Point(\n                image.options?.offset.x,\n                image.options?.offset.y\n              ),\n            shape: image.options?.shape,\n            spriteOrigin:\n              image.options?.spriteOrigin &&\n              new kakao.maps.Point(\n                image.options?.spriteOrigin.x,\n                image.options?.spriteOrigin.y\n              ),\n            spriteSize:\n              image.options?.spriteSize &&\n              new kakao.maps.Size(\n                image.options?.spriteSize.width,\n                image.options?.spriteSize.height\n              ),\n          }\n        )\n      )\n    }, [image])\n\n    const markerPosition = useMemo(() => {\n      if (\"lat\" in position) {\n        return new kakao.maps.LatLng(position.lat, position.lng)\n      }\n      if (\"x\" in position) {\n        return new kakao.maps.Coords(position.x, position.y).toLatLng()\n      }\n      return new kakao.maps.Viewpoint(\n        position.pan,\n        position.tilt,\n        position.zoom,\n        position.panoId\n      )\n\n      /* eslint-disable react-hooks/exhaustive-deps */\n    }, [\n      // @ts-ignore\n      position.lat,\n      // @ts-ignore\n      position.lng,\n      // @ts-ignore\n      position.x,\n      // @ts-ignore\n      position.y,\n      // @ts-ignore\n      position.pan,\n      // @ts-ignore\n      position.tilt,\n      // @ts-ignore\n      position.zoom,\n      // @ts-ignore\n      position?.panoId,\n    ])\n    /* eslint-enable react-hooks/exhaustive-deps */\n\n    return (\n      <Marker\n        map={roadview}\n        position={markerPosition}\n        image={markerImage}\n        altitude={altitude}\n        clickable={clickable}\n        infoWindowOptions={infoWindowOptions}\n        onClick={onClick}\n        onDragEnd={onDragEnd}\n        onDragStart={onDragStart}\n        onMouseOut={onMouseOut}\n        onMouseOver={onMouseOver}\n        onCreate={onCreate}\n        opacity={opacity}\n        range={range}\n        title={title}\n        zIndex={zIndex}\n        ref={ref}\n      >\n        {children}\n      </Marker>\n    )\n  }\n)\n\nexport default RoadviewMarker\n","import React, { useMemo } from \"react\"\nimport InfoWindow from \"./InfoWindow\"\nimport useRoadview from \"../hooks/useRoadview\"\n\nexport interface RoadviewInfoWindowProps {\n  /**\n   * 인포윈도가 표시될 위치\n   */\n  position:\n    | {\n        lat: number\n        lng: number\n      }\n    | {\n        /**\n         * 가로 각도, 0부터 360 사이의 값으로 북쪽부터 시계방향으로 대응한다.\n         */\n        pan: number\n        /**\n         * 세로 각도, -90부터 90 사이의 값으로 위쪽부터 아래쪽으로 대응한다.\n         */\n        tilt: number\n        /**\n         * 확대 수준, -3부터 3 사이의 정수이다.\n         */\n        zoom?: number\n        /**\n         * 특정 위치의 로드뷰 고유의 아이디 값\n         */\n        panoId?: number\n      }\n\n  /**\n   * 인포윈도우를 열 때 지도가 자동으로 패닝하지 않을지의 여부 (기본값: false)\n   */\n  disableAutoPan?: boolean\n\n  /**\n   * 삭제 가능한 인포윈도우\n   */\n  removable?: boolean\n\n  /**\n   * 인포윈도우 엘리먼트의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 로드뷰에 올라있는 인포윈도우의 높이 값(m 단위)\n   */\n  altitude?: number\n\n  /**\n   * 로드뷰 상에서 인포윈도우의 가시반경(m 단위), 두 지점 사이의 거리가 지정한 값보다 멀어지면 인포윈도우는 보이지 않게 된다\n   */\n  range?: number\n\n  /**\n   * 인포윈도우 객체 생성후 해당 객체를 반환하는 함수\n   */\n  onCreate?: (infoWindow: kakao.maps.InfoWindow) => void\n}\n\n/**\n * Map 컴포넌트에서 InfoWindow를 그릴 때 사용됩니다.\n * `onCreate` 이벤트를 통해 생성 후 `infoWindow` 객체에 직접 접근하여 초기 설정이 가능합니다.\n */\nconst RoadviewInfoWindow = React.forwardRef<\n  kakao.maps.InfoWindow,\n  React.PropsWithChildren<RoadviewInfoWindowProps>\n>(\n  (\n    {\n      position,\n      children,\n      altitude,\n      disableAutoPan,\n      range,\n      removable,\n      zIndex,\n      onCreate,\n    },\n    ref\n  ) => {\n    const roadview = useRoadview(`RoadviewInfoWindow`)\n    const infoPosition = useMemo(() => {\n      if (\"lat\" in position) {\n        return new kakao.maps.LatLng(position.lat, position.lng)\n      }\n      return new kakao.maps.Viewpoint(\n        position.pan,\n        position.tilt,\n        position.zoom,\n        position.panoId\n      )\n      /* eslint-disable react-hooks/exhaustive-deps */\n    }, [\n      // @ts-ignore\n      position.lat,\n      // @ts-ignore\n      position.lng,\n      // @ts-ignore\n      position.pan,\n      // @ts-ignore\n      position.tilt,\n      // @ts-ignore\n      position.zoom,\n      // @ts-ignore\n      position.panoId,\n    ])\n    /* eslint-enable react-hooks/exhaustive-deps */\n\n    return (\n      <InfoWindow\n        altitude={altitude}\n        disableAutoPan={disableAutoPan}\n        range={range}\n        removable={removable}\n        zIndex={zIndex}\n        map={roadview}\n        position={infoPosition}\n        onCreate={onCreate}\n        ref={ref}\n      >\n        {children}\n      </InfoWindow>\n    )\n  }\n)\n\nexport default RoadviewInfoWindow\n","import React, {\n  ReactNode,\n  Ref,\n  useImperativeHandle,\n  useLayoutEffect,\n  useMemo,\n} from \"react\"\nimport useMap from \"../hooks/useMap\"\n\nexport const DrawingManagerContext =\n  React.createContext<kakao.maps.drawing.DrawingManager>(\n    undefined as unknown as kakao.maps.drawing.DrawingManager\n  )\n\nexport type DrawingManagerProps<\n  T extends kakao.maps.drawing.OverlayType = kakao.maps.drawing.OverlayType\n> = Partial<kakao.maps.drawing.OverlayOptions> &\n  Pick<kakao.maps.drawing.OverlayOptions, `${T}Options`> & {\n    /**\n     * 마우스 오버 시 가이드 툴팁 표시 여부. ‘draw’, ‘drag’, ‘edit’ 3가지를 지정할 수 있다 (기본값: 모두 표시 안함)\n     * 예를들어 [‘draw’]로 설정하면 객체를 그릴때 가이드 툴팁이 표시된다\n     */\n    guideTooltip?: Array<\"draw\" | \"drag\" | \"edit\">\n    /**\n     * 사용할 그리기 요소 지정한다 (기본값: 모든 그리기 요소)\n     */\n    drawingMode?: Array<T>\n\n    /**\n     * 그리기 요소를 선택하면 발생한다.\n     */\n    onSelect?: (\n      drawingManager: kakao.maps.drawing.DrawingManager<T>,\n      event: kakao.maps.drawing.MouseEvent\n    ) => void\n\n    /**\n     * 그리기를 시작하면 발생한다.\n     */\n    onDrawstart?: (\n      drawingManager: kakao.maps.drawing.DrawingManager<T>,\n      event: kakao.maps.drawing.MouseEvent\n    ) => void\n\n    /**\n     * 그리기 시작 후, 마우스를 이동하면 발생한다.\n     */\n    onDraw?: (\n      drawingManager: kakao.maps.drawing.DrawingManager<T>,\n      event: kakao.maps.drawing.MouseEvent\n    ) => void\n\n    /**\n     * 그리기를 시작하면 발생한다.\n     */\n    onDrawend?: (\n      drawingManager: kakao.maps.drawing.DrawingManager<T>,\n      event: kakao.maps.drawing.MouseEvent\n    ) => void\n\n    /**\n     * 다음 단계 그리기를 하면 발생한다. (Polyline, Polygon, Arrow 한정)\n     */\n    onDrawnext?: (\n      drawingManager: kakao.maps.drawing.DrawingManager<T>,\n      event: kakao.maps.drawing.MouseEvent\n    ) => void\n\n    /**\n     * 그리기를 취소하면 발생한다.\n     */\n    onCancle?: (\n      drawingManager: kakao.maps.drawing.DrawingManager<T>,\n      event: kakao.maps.drawing.MouseEvent\n    ) => void\n\n    /**\n     * 그리기 요소를 삭제하면 발생한다.\n     */\n    onRemove?: (\n      drawingManager: kakao.maps.drawing.DrawingManager<T>,\n      event: kakao.maps.drawing.MouseEvent\n    ) => void\n\n    /**\n     * 그리기 요소들의 상태가 변경되면 발생한다.\n     * 각 요소의 생성/수정/이동/삭제 동작과 undo 또는 redo 함수 호출이 이에 해당한다.\n     */\n    onStateChanged?: (\n      drawingManager: kakao.maps.drawing.DrawingManager<T>\n    ) => void\n\n    /**\n     * 객체 생성후 해당 이벤트가 발생합니다.\n     */\n    onCreate?: (drawingManager: kakao.maps.drawing.DrawingManager<T>) => void\n\n    /**\n     * Toolbox에 대해서 추가할 때 사용합니다.\n     */\n    children?: ReactNode\n  }\n\nfunction useDrawingManagerEvent<T extends kakao.maps.drawing.OverlayType>(\n  target: kakao.maps.drawing.DrawingManager<T> | undefined,\n  type:\n    | \"drawstart\"\n    | \"draw\"\n    | \"drawend\"\n    | \"drawnext\"\n    | \"select\"\n    | \"cancel\"\n    | \"remove\"\n    | \"state_changed\",\n  callback:\n    | ((target: kakao.maps.drawing.DrawingManager<T>, ...args: any) => void)\n    | undefined\n) {\n  useLayoutEffect(() => {\n    if (!target || !callback) return\n\n    const wrapCallback = (...arg: any[]) => {\n      if (arg === undefined) return callback(target)\n      else return callback(target, ...arg)\n    }\n\n    // @ts-ignore\n    target.addListener(type, wrapCallback)\n  }, [callback, target, type])\n}\n\n/**\n * 그리기 관리자 객체를 생성하는 컴포넌트 입니다.\n *\n * 초기 생성자에 필요한 Props는 최초 렌더링에만 반영을 하고 이후에는 값이 변경되더라도 적용되지 않습니다.\n *\n * > `on~` 시리즈를 제외한 props는 초기 렌더링 이후 작동 안함\n *\n * DrawingManager는 이전 Map, Marker, CustomOverlay와 달리 Props를 통해 제어를 하는 것이 아닌 직접 DrawingManager 객체를 이용하여 제어를 해야 합니다.\n *\n * 이를 위해 ref 객체를 통해 `DrawingManager` 객체를 접근 할 수 있으며, 이를 활용하여 여러 이벤트 처리 및 제어가 가능합니다.\n *\n * TypeScript 사용자를 위한 `Generic`이 적용되어 있으므로, `ref` 객체에 대한 typing 및 `drawingMode`에 대해 확실하게 정의해야 합니다.\n *\n * ```tsx\n * const Main = () => {\n *     const managerRef = useRef<kakao.maps.drawing.DrawingManager<\n *       kakao.maps.drawing.OverlayType.POLYLINE\n *     >>(null);\n *\n *     function selectOverlay(type: string) {\n *       const manager = managerRef.current;\n *       manager.cancel();\n *       manager.select(kakao.maps.drawing.OverlayType.POLYLINE);\n *     }\n *\n *     return (\n *       <>\n *         <Map\n *           center={{\n *             // 지도의 중심좌표\n *             lat: 33.450701,\n *             lng: 126.570667,\n *           }}\n *           style={{\n *             width: \"100%\",\n *             height: \"450px\",\n *           }}\n *           level={3} // 지도의 확대 레벨\n *         >\n *           <DrawingManager\n *             ref={managerRef}\n *             drawingMode={[\n *               kakao.maps.drawing.OverlayType.POLYLINE,\n *             ]}\n *             guideTooltip={['draw', 'drag', 'edit']}\n *             polylineOptions={{\n *               draggable: true,\n *               removable: true,\n *               editable: true\n *             }}\n *           />\n *         </Map>\n *         <button onClick={(e) => {\n *           selectOverlay('POLYLINE')\n *         }}>선</button>\n *       </>\n *     )\n *   }\n * ```\n *\n * > JavaScript 코드 버전\n *\n * ```jsx live\n * function() {\n *   const Main = () => {\n *     const managerRef = useRef(null);\n *\n *     function selectOverlay() {\n *       const manager = managerRef.current;\n *       manager.cancel();\n *       manager.select(kakao.maps.drawing.OverlayType.POLYLINE);\n *     }\n *\n *     return (\n *       <>\n *         <Map\n *           center={{\n *             // 지도의 중심좌표\n *             lat: 33.450701,\n *             lng: 126.570667,\n *           }}\n *           style={{\n *             width: \"100%\",\n *             height: \"450px\",\n *           }}\n *           level={3} // 지도의 확대 레벨\n *         >\n *           <DrawingManager\n *             ref={managerRef}\n *             drawingMode={[\n *               kakao.maps.drawing.OverlayType.POLYLINE,\n *             ]}\n *             guideTooltip={['draw', 'drag', 'edit']}\n *             polylineOptions={{\n *               draggable: true,\n *               removable: true,\n *               editable: true\n *             }}\n *           />\n *         </Map>\n *         <button onClick={selectOverlay}>선</button>\n *       </>\n *     )\n *   }\n *   return (<Main />)\n * }\n * ```\n */\nconst DrawingManager = React.forwardRef(function <\n  T extends kakao.maps.drawing.OverlayType\n>(\n  {\n    arrowOptions,\n    circleOptions,\n    ellipseOptions,\n    markerOptions,\n    polygonOptions,\n    polylineOptions,\n    rectangleOptions,\n    drawingMode,\n    guideTooltip,\n    onSelect,\n    onDrawstart,\n    onDraw,\n    onDrawend,\n    onDrawnext,\n    onCancle,\n    onRemove,\n    onStateChanged,\n    onCreate,\n    children,\n  }: DrawingManagerProps<T>,\n  ref: Ref<kakao.maps.drawing.DrawingManager<T>>\n) {\n  const map = useMap(\"Toolbox\")\n\n  const drawingManager = useMemo(\n    () => {\n      if (!window.kakao.maps.drawing) {\n        console.warn(\n          \"drawing 라이브러리를 별도 로드 해야 사용 가능합니다. `https://apis.map.kakao.com/web/guide/#loadlibrary`\"\n        )\n        return\n      }\n\n      return new kakao.maps.drawing.DrawingManager({\n        // @ts-ignore\n        map,\n        drawingMode,\n        guideTooltip,\n        arrowOptions,\n        circleOptions,\n        ellipseOptions,\n        markerOptions,\n        polygonOptions,\n        polylineOptions,\n        rectangleOptions,\n      })\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  )\n  useImperativeHandle(ref, () => drawingManager!, [drawingManager])\n\n  useLayoutEffect(() => {\n    drawingManager && onCreate && onCreate(drawingManager)\n  }, [drawingManager, onCreate])\n\n  useDrawingManagerEvent(drawingManager, \"select\", onSelect)\n  useDrawingManagerEvent(drawingManager, \"drawstart\", onDrawstart)\n  useDrawingManagerEvent(drawingManager, \"draw\", onDraw)\n  useDrawingManagerEvent(drawingManager, \"drawend\", onDrawend)\n  useDrawingManagerEvent(drawingManager, \"drawnext\", onDrawnext)\n  useDrawingManagerEvent(drawingManager, \"cancel\", onCancle)\n  useDrawingManagerEvent(drawingManager, \"remove\", onRemove)\n  useDrawingManagerEvent(drawingManager, \"state_changed\", onStateChanged)\n\n  if (!drawingManager) return null\n\n  return (\n    <DrawingManagerContext.Provider value={drawingManager}>\n      {children}\n    </DrawingManagerContext.Provider>\n  )\n}) as unknown as <\n  T extends kakao.maps.drawing.OverlayType = kakao.maps.drawing.OverlayType\n>(\n  _props: DrawingManagerProps<T> &\n    React.RefAttributes<kakao.maps.drawing.DrawingManager<T>>\n) => null\n\nexport default DrawingManager\n","import React, {\n  Ref,\n  useContext,\n  useImperativeHandle,\n  useLayoutEffect,\n  useMemo,\n} from \"react\"\nimport useMap from \"../hooks/useMap\"\nimport { DrawingManagerContext } from \"./DrawingManager\"\n\nexport type ToolboxProps = {\n  /**\n   * Toolbox의 Position를 정의 한다.\n   */\n  position?: kakao.maps.ControlPosition\n}\n\n/**\n * 그리기 툴박스를 생성합니다.\n *\n * 해당 컴포넌트는 반드시 `DrawingManager` 컴포넌트의 자식으로 존재해야 합니다.\n */\nconst Toolbox = React.forwardRef(function (\n  { position }: ToolboxProps,\n  ref: Ref<kakao.maps.drawing.Toolbox>\n) {\n  position = position || kakao.maps.ControlPosition.TOP\n\n  const map = useMap(\"Toolbox\")\n  const drawingmanager = useContext(DrawingManagerContext)\n\n  if (!drawingmanager) {\n    throw new Error(\"Toolbox must exist inside DrawingManager Component!`\")\n  }\n\n  const toolbox = useMemo(\n    () =>\n      new kakao.maps.drawing.Toolbox({\n        drawingManager: drawingmanager,\n      }),\n    [drawingmanager]\n  )\n  useImperativeHandle(ref, () => toolbox, [toolbox])\n\n  useLayoutEffect(() => {\n    const element = toolbox.getElement()\n    map.addControl(element, position!)\n    return () => {\n      map.removeControl(element)\n    }\n  }, [map, toolbox, position])\n\n  return null\n})\n\nexport default Toolbox\n","import React, { useRef, useState, useImperativeHandle } from \"react\"\nimport useIsomorphicLayoutEffect from \"../hooks/useIsomorphicLayoutEffect\"\n\nexport interface StaticMapProps {\n  /**\n   * MapContinaer의 id에 대해서 지정합니다.\n   */\n  id?: string\n\n  /**\n   * MapContainer의 className에 대해서 지정합니다.\n   */\n  className?: string\n\n  /**\n   * MapContainer의 style에 대해서 지정합니다.\n   */\n  style?: React.CSSProperties\n\n  /**\n   * 중심으로 설정할 위치 입니다.\n   */\n  center: {\n    lat: number\n    lng: number\n  }\n\n  /**\n   * 확대 수준\n   * @default 3\n   */\n  level?: number\n\n  /**\n   * 지도 종류 (기본값: 일반 지도)\n   */\n  mapTypeId?: kakao.maps.MapTypeId\n\n  /**\n   * 이미지 지도에 표시할 마커 또는 마커 배열\n   */\n  marker:\n    | boolean\n    | {\n        /**\n         * 마커 tooltip에 표시될 내용\n         */\n        text?: string\n        /**\n         * 마커 포지션\n         */\n        position?: {\n          lat: number\n          lng: number\n        }\n      }\n    | Array<{\n        /**\n         * 마커 tooltip에 표시될 내용\n         */\n        text?: string\n        /**\n         * 마커 포지션\n         */\n        position: {\n          lat: number\n          lng: number\n        }\n      }>\n  /**\n   * StaticMap 생성 이벤트 핸들러\n   */\n  onCreate?: (maker: kakao.maps.StaticMap) => void\n}\n\nconst StaticMap = React.forwardRef<kakao.maps.StaticMap, StaticMapProps>(\n  (\n    {\n      id = \"react-kakao-maps-sdk-staticmap-container\",\n      style,\n      className,\n      center,\n      marker,\n      level,\n      mapTypeId,\n      onCreate,\n    },\n    ref\n  ) => {\n    const [map, setMap] = useState<kakao.maps.StaticMap>()\n    const container = useRef<HTMLDivElement>(null)\n\n    useIsomorphicLayoutEffect(() => {\n      if (!window.kakao) {\n        console.warn(\n          \"kakao map javascript api를 먼저 불러와야 합니다. `https://apis.map.kakao.com/web/guide`\"\n        )\n        return\n      }\n\n      const mapContainer = container.current\n      if (!mapContainer) return\n\n      kakao.maps.load(() => {\n        const _marker = (() => {\n          if (Array.isArray(marker)) {\n            return marker.map((mk) => {\n              return {\n                ...mk,\n                position: new kakao.maps.LatLng(\n                  mk.position.lat,\n                  mk.position.lng\n                ),\n              }\n            })\n          }\n          if (typeof marker === \"object\") {\n            if (!!marker.position) {\n              return {\n                ...marker,\n                position: new kakao.maps.LatLng(\n                  marker.position.lat,\n                  marker.position.lng\n                ),\n              }\n            }\n            return marker as { text: string }\n          }\n          return marker\n        })()\n        const kakaoStaticMap = new kakao.maps.StaticMap(mapContainer, {\n          center: new kakao.maps.LatLng(center.lat, center.lng),\n          level,\n          mapTypeId,\n          marker: _marker,\n        })\n\n        setMap(kakaoStaticMap)\n      })\n    }, [JSON.stringify(marker)])\n\n    useImperativeHandle(ref, () => map!, [map])\n\n    useIsomorphicLayoutEffect(() => {\n      if (map) map.setCenter(new kakao.maps.LatLng(center.lat, center.lng))\n    }, [map, center.lat, center.lng])\n\n    useIsomorphicLayoutEffect(() => {\n      if (map && level) map.setLevel(level)\n    }, [map, level])\n\n    useIsomorphicLayoutEffect(() => {\n      if (map && mapTypeId) map.setMapTypeId(mapTypeId)\n    }, [map, mapTypeId])\n\n    useIsomorphicLayoutEffect(() => {\n      if (map && onCreate) onCreate(map)\n    }, [map, onCreate])\n\n    return (\n      <div id={id} style={style} className={className} ref={container}></div>\n    )\n  }\n)\n\nexport default StaticMap\n","import { useEffect, useMemo, useState } from \"react\"\nimport { Loader, LoaderOptions } from \"../util/kakaoMapApiLoader\"\n\n/**\n * Kakao Map Api를 injection 합니다.\n *\n * 해당 hook은 cleanup 시점에도 Kakao Map Api를 제거 하지 않고, 동일한 hook를 여러 위치에서 호출 하더라도 최초 한번만 injection 됩니다.\n */\nconst useInjectKakaoMapApi = (options: LoaderOptions) => {\n  const [state, setState] = useState<{\n    loading: boolean\n    error: ErrorEvent | undefined\n  }>({\n    loading: true,\n    error: undefined,\n  })\n\n  const loader = useMemo(\n    () => new Loader(options),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [JSON.stringify(options)]\n  )\n\n  useEffect(() => {\n    loader\n      .load()\n      .then(() =>\n        setState({\n          loading: false,\n          error: undefined,\n        })\n      )\n      .catch((error) =>\n        setState({\n          loading: false,\n          error: error,\n        })\n      )\n  }, [loader])\n\n  return state\n}\n\nexport default useInjectKakaoMapApi\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}